name: Build and Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ['3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install pip-tools
      run: pip install pip-tools
    - name: Generate requirements.txt from pyproject.toml
      run: pip-compile pyproject.toml --output-file requirements.txt
    - name: Install dependencies
      run: pip install -r requirements.txt
    
    - name: Build package
      run: python -m build
    
    - name: Build Windows Installer
      if: matrix.os == 'windows-latest'
      run: |
        pip install pyinstaller
        pyinstaller PktMask.spec
        ls dist

    - name: Build macOS App
      if: matrix.os == 'macos-latest'
      run: |
        pip install pyinstaller
        pyinstaller PktMask.spec
        ls dist

    - name: Sign macOS App (if certificates available)
      if: matrix.os == 'macos-latest'
      env:
        MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        MACOS_CERTIFICATE_NAME: ${{ secrets.MACOS_CERTIFICATE_NAME }}
        MACOS_CI_KEYCHAIN_PWD: ${{ secrets.MACOS_CI_KEYCHAIN_PWD }}
      run: |
        if [ "$MACOS_CERTIFICATE" != "" ]; then
          echo "Certificates available, proceeding with code signing..."
          
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          
          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          
          find dist/PktMask.app -name "*.so" -exec codesign --force --verify --verbose --sign "$MACOS_CERTIFICATE_NAME" {} \;
          find dist/PktMask.app -name "*.dylib" -exec codesign --force --verify --verbose --sign "$MACOS_CERTIFICATE_NAME" {} \;
          codesign --force --options=runtime --verify --verbose --sign "$MACOS_CERTIFICATE_NAME" dist/PktMask.app/Contents/MacOS/*
          codesign --force --options=runtime --verify --verbose --sign "$MACOS_CERTIFICATE_NAME" dist/PktMask.app
          
          codesign --verify --deep --strict --verbose=2 dist/PktMask.app
          spctl -a -t exec -vv dist/PktMask.app
          
          echo "Code signing completed successfully"
          
          pip install dmgbuild
          dmgbuild -s dmg_settings.py "PktMask" dist/PktMask-Signed.dmg
          
          echo "SIGNED_BUILD=true" >> $GITHUB_ENV
        else
          echo "No certificates found, creating unsigned build..."
          echo "SIGNED_BUILD=false" >> $GITHUB_ENV
        fi

    - name: Create DMG settings
      if: matrix.os == 'macos-latest' && env.SIGNED_BUILD == 'true'
      run: |
        cat > dmg_settings.py << 'EOF'
        import os
        
        application = 'dist/PktMask.app'
        
        format = 'UDZO'
        size = '500M'
        files = [application]
        symlinks = {'Applications': '/Applications'}
        
        background = None
        show_status_bar = False
        show_tab_view = False
        show_toolbar = False
        show_pathbar = False
        show_sidebar = False
        sidebar_width = 180
        
        window_rect = ((100, 100), (600, 400))
        
        icon_locations = {
            'PktMask.app': (150, 200),
            'Applications': (450, 200)
        }
        EOF

    - name: Create usage instructions for unsigned macOS build
      if: matrix.os == 'macos-latest' && env.SIGNED_BUILD == 'false'
      run: |
        cat > dist/MACOS_INSTALLATION_INSTRUCTIONS.txt << 'EOF'
        PktMask macOS Installation Instructions
        ======================================

        Since this version is not code-signed, you need to follow these steps to run the application:

        Method 1: Allow app to run through System Preferences
        1. Extract the downloaded zip file
        2. Move the PktMask folder to your desired location (such as Applications folder)
        3. Double-click the PktMask executable
        4. If a security warning appears, click "Cancel"
        5. Open "System Preferences" -> "Security & Privacy" -> "General" tab
        6. Find the message about PktMask at the bottom, click "Open Anyway"
        7. Click "Open" in the confirmation dialog

        Method 2: Bypass security check through Terminal
        1. Extract the downloaded zip file
        2. Open Terminal
        3. Enter the following command to remove quarantine attributes:
           xattr -dr com.apple.quarantine /path/to/PktMask
           (Replace /path/to/PktMask with the actual PktMask folder path)
        4. Now you can run PktMask normally

        Method 3: Use right-click menu
        1. Extract the downloaded zip file
        2. Find the PktMask executable in Finder
        3. Hold Control key and click the file (or right-click)
        4. Select "Open"
        5. Click "Open" in the warning dialog

        Note: These methods should only be used if you trust this application. PktMask is open source software, you can view the source code on GitHub.
        EOF

    - name: Upload Windows Artifact
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: PktMask-Windows
        path: dist/PktMask/**

    - name: Upload macOS Signed Artifact
      if: matrix.os == 'macos-latest' && env.SIGNED_BUILD == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: PktMask-macOS-Signed
        path: dist/PktMask-Signed.dmg

    - name: Upload macOS Unsigned Artifact
      if: matrix.os == 'macos-latest' && env.SIGNED_BUILD == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: PktMask-macOS-Unsigned
        path: |
          dist/PktMask/**
          dist/MACOS_INSTALLATION_INSTRUCTIONS.txt

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: List artifacts
        run: ls -R ./artifacts
      
      - name: Zip Windows App
        run: |
          cd ./artifacts/PktMask-Windows
          zip -r ../../PktMask-Windows.zip .
      
      - name: Prepare macOS Release
        run: |
          if [ -d "./artifacts/PktMask-macOS-Signed" ]; then
            echo "Found signed macOS build"
            cp ./artifacts/PktMask-macOS-Signed/PktMask-Signed.dmg ./PktMask-macOS.dmg
            echo "MACOS_SIGNED=true" >> $GITHUB_ENV
          elif [ -d "./artifacts/PktMask-macOS-Unsigned" ]; then
            echo "Found unsigned macOS build"
            cd ./artifacts/PktMask-macOS-Unsigned
            zip -r ../../PktMask-macOS-Unsigned.zip .
            echo "MACOS_SIGNED=false" >> $GITHUB_ENV
          fi
      
      - name: Create Release (with signed macOS)
        if: env.MACOS_SIGNED == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./PktMask-Windows.zip
            ./PktMask-macOS.dmg
          body: |
            ## PktMask Release
            
            ### Download Instructions:
            - **Windows Users**: Download `PktMask-Windows.zip`, extract and run
            - **macOS Users**: Download `PktMask-macOS.dmg`, mount and drag to Applications folder

            ### New Features and Improvements:
            - Signed macOS version, can run directly
            - Complete security and compatibility support
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create Release (with unsigned macOS)
        if: env.MACOS_SIGNED == 'false'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./PktMask-Windows.zip
            ./PktMask-macOS-Unsigned.zip
          body: |
            ## PktMask Release
            
            ### Download Instructions:
            - **Windows Users**: Download `PktMask-Windows.zip`, extract and run
            - **macOS Users**: Download `PktMask-macOS-Unsigned.zip`, extract and follow included installation instructions

            ### ⚠️ Important Notice for macOS Users:
            This version is not code-signed, first run requires following these steps:
            1. Extract zip file
            2. Run in terminal: `xattr -dr com.apple.quarantine /path/to/PktMask`
            3. Or allow through System Preferences -> Security & Privacy

            For detailed instructions, see the `MACOS_INSTALLATION_INSTRUCTIONS.txt` file in the archive.

            ### New Features and Improvements:
            - Latest feature updates
            - Bug fixes and performance optimizations
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 