name: PktMask 自动化测试

# 触发条件
on:
  # 推送到主分支时运行
  push:
    branches: [ main, develop ]
  # PR到主分支时运行
  pull_request:
    branches: [ main, develop ]
  # 手动触发
  workflow_dispatch:
  # 定时运行 (每天凌晨2点)
  schedule:
    - cron: '0 2 * * *'

# 环境变量
env:
  PYTHON_VERSION: '3.11'
  CACHE_VERSION: v1

jobs:
  # 代码质量检查 - 已禁用
  # lint:
  #   name: 代码质量检查
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 检出代码
  #       uses: actions/checkout@v4
  #
  #     - name: 设置Python环境
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}
  #
  #     - name: 缓存依赖
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-
  #
  #     - name: 安装依赖
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -e ".[dev]"
  #         pip install flake8 black isort mypy
  #
  #     - name: 代码格式检查
  #       run: |
  #         black --check --diff src/
  #         isort --check-only --diff src/
  #
  #     - name: 代码风格检查
  #       run: |
  #         flake8 src/ --count --statistics
  #
  #     - name: 类型检查
  #       run: |
  #         mypy src/pktmask/ --ignore-missing-imports

  # 跨平台测试
  test:
    name: 测试 (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    # needs: lint  # 代码质量检查已禁用
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # 排除一些组合以减少构建时间
          - os: windows-latest
            python-version: '3.8'
          - os: macOS-latest
            python-version: '3.8'

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 缓存依赖 (Ubuntu/macOS)
        if: matrix.os != 'windows-latest'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ env.CACHE_VERSION }}-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ env.CACHE_VERSION }}-${{ matrix.python-version }}-

      - name: 缓存依赖 (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ matrix.os }}-pip-${{ env.CACHE_VERSION }}-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ env.CACHE_VERSION }}-${{ matrix.python-version }}-

      - name: 安装系统依赖 (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: 运行快速测试 (跳过性能测试)
        env:
          QT_QPA_PLATFORM: offscreen  # 无头模式运行Qt
        run: |
          python -m pytest tests/unit/ -v --tb=short --junit-xml=test_reports_${{ matrix.os }}_${{ matrix.python-version }}/junit/results.xml

      - name: 上传测试报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-${{ matrix.os }}-${{ matrix.python-version }}
          path: test_reports_${{ matrix.os }}_${{ matrix.python-version }}/
          retention-days: 30

      - name: 发布测试结果
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: 测试结果 (${{ matrix.os }}, Python ${{ matrix.python-version }})
          path: test_reports_${{ matrix.os }}_${{ matrix.python-version }}/*_results.xml
          reporter: java-junit

  # 覆盖率测试 (仅在Ubuntu上运行)
  coverage:
    name: 代码覆盖率
    runs-on: ubuntu-latest
    # needs: lint  # 代码质量检查已禁用
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 安装系统依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install coverage[toml]

      - name: 运行覆盖率测试
        env:
          QT_QPA_PLATFORM: offscreen
        run: |
          python -m pytest --cov=src/pktmask --cov-report=xml --cov-report=html --cov-report=term tests/

      - name: 上传覆盖率到Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

      - name: 上传覆盖率报告
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 30

  # 性能测试 (仅在主分支推送时运行)
  performance:
    name: 性能测试
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test]  # 代码质量检查已禁用
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 安装系统依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libxkbcommon-x11-0

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: 运行性能测试
        env:
          QT_QPA_PLATFORM: offscreen
        run: |
          python -m pytest -m performance tests/ -v --junit-xml=performance_reports/junit/results.xml

      - name: 上传性能报告
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance_reports/
          retention-days: 30

  # 安全扫描
  security:
    name: 安全扫描
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 运行Bandit安全扫描
        run: |
          python -m pip install --upgrade pip bandit
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt || true

      - name: 运行Safety依赖扫描
        run: |
          pip install safety
          pip install -e .
          safety check --json --output safety-report.json || true

      - name: 上传安全报告
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # 发布就绪检查 (仅在发布标签时运行)
  release-ready:
    name: 发布就绪检查
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [test, coverage, security]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 安装构建依赖
        run: |
          python -m pip install --upgrade pip build twine

      - name: 构建发行版
        run: |
          python -m build

      - name: 检查发行版
        run: |
          python -m twine check dist/*

      - name: 运行完整测试套件
        run: |
          pip install -e ".[dev]"
          python -m pytest tests/ -v --junit-xml=release_test_reports/junit/results.xml

      - name: 上传发布测试报告
        uses: actions/upload-artifact@v4
        with:
          name: release-test-report
          path: release_test_reports/
          retention-days: 90

  # 报告汇总
  report:
    name: 测试报告汇总
    runs-on: ubuntu-latest
    if: always()
    needs: [test, coverage, performance, security]  # 代码质量检查已禁用
    steps:
      - name: 下载所有测试报告
        uses: actions/download-artifact@v4

      - name: 创建汇总报告
        run: |
          echo "# PktMask 测试报告汇总" > SUMMARY.md
          echo "" >> SUMMARY.md
          echo "## 测试状态" >> SUMMARY.md
          echo "- 跨平台测试: ${{ needs.test.result }}" >> SUMMARY.md
          echo "- 代码覆盖率: ${{ needs.coverage.result }}" >> SUMMARY.md
          echo "- 性能测试: ${{ needs.performance.result }}" >> SUMMARY.md
          echo "- 安全扫描: ${{ needs.security.result }}" >> SUMMARY.md
          echo "" >> SUMMARY.md
          echo "## 工件" >> SUMMARY.md
          ls -la
          echo "生成时间: $(date)" >> SUMMARY.md

      - name: 上传汇总报告
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: SUMMARY.md
          retention-days: 90