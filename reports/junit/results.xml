<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="46" failures="300" skipped="16" tests="1118" time="245.619" timestamp="2025-07-03T14:57:38.107432+08:00" hostname="Rickys-MacBook-Air.local"><testcase classname="" name="tests.unit.test_performance_centralized" time="0.000"><skipped message="collection skipped">('/Users/ricky/Downloads/PktMask/tests/unit/test_performance_centralized.py', 26, "Skipped: 无法导入模块: cannot import name '_process_pcap_data_enhanced' from 'src.pktmask.core.processors' (/Users/ricky/Downloads/PktMask/src/pktmask/core/processors/__init__.py)")</skipped></testcase><testcase classname="tests.integration.test_phase2_2_integration_simple.TestPhase22IntegrationSimple" name="test_basic_integration" time="0.655"><failure message="assert False&#10; +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x127015d30&gt;.success">tests/integration/test_phase2_2_integration_simple.py:109: in test_basic_integration
    assert result.success
E   assert False
E    +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x127015d30&gt;.success</failure></testcase><testcase classname="tests.integration.test_phase4_integration.TestRealDataIntegration" name="test_real_data_processing" time="0.002"><skipped type="pytest.skip" message="测试数据目录不存在">/Users/ricky/Downloads/PktMask/tests/integration/test_phase4_integration.py:301: 测试数据目录不存在</skipped></testcase><testcase classname="tests.integration.test_phase2_day12_core_integration.TestPhase2Day12CoreIntegration" name="test_02_mask_stage_config_mode_support" time="0.003" /><testcase classname="tests.e2e.test_complete_workflow.TestCompleteWorkflow" name="test_basic_processing_workflow" time="0.003" /><testcase classname="tests.integration.test_phase3_day15_enhanced_validation.TestPhase3Day15EnhancedValidation" name="test_validate_cross_segment_handling" time="0.004" /><testcase classname="tests.integration.test_phase1_2_integration_fixed.TestPhase12IntegrationFixed" name="test_error_handling_comprehensive" time="0.021"><failure message="RuntimeError: Stage 'TShark预处理器' 初始化失败">tests/integration/test_phase1_2_integration_fixed.py:377: in test_error_handling_comprehensive
    executor.register_stage(tshark_stage)
src/pktmask/core/trim/multi_stage_executor.py:93: in register_stage
    raise RuntimeError(f"Stage '{stage.name}' 初始化失败")
E   RuntimeError: Stage 'TShark预处理器' 初始化失败</failure></testcase><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestErrorRecoveryStrategies" name="test_error_handling_with_context" time="0.011" /><testcase classname="tests.integration.test_phase3_day19_performance_benchmark.TestPhase3Day19PerformanceBenchmark" name="test_initialization_performance_comparison" time="18.428" /><testcase classname="tests.e2e.test_complete_workflow.TestCompleteWorkflow" name="test_configuration_workflow" time="0.000" /><testcase classname="tests.e2e.test_complete_workflow.TestCompleteWorkflow" name="test_error_recovery_workflow" time="0.000" /><testcase classname="tests.e2e.test_complete_workflow.TestCompleteWorkflow" name="test_output_generation_workflow" time="0.000" /><testcase classname="tests.e2e.test_complete_workflow.TestPerformanceWorkflow" name="test_large_file_processing" time="0.001" /><testcase classname="tests.e2e.test_complete_workflow.TestPerformanceWorkflow" name="test_memory_efficient_processing" time="0.001" /><testcase classname="tests.e2e.test_complete_workflow.TestErrorHandlingWorkflow" name="test_invalid_input_file_handling" time="0.001" /><testcase classname="tests.integration.test_phase3_day15_enhanced_validation.TestPhase3Day15EnhancedValidation" name="test_validate_enhanced_tls_processing" time="0.005" /><testcase classname="tests.integration.test_phase4_integration.TestPhase4Optimization" name="test_encapsulation_type_caching" time="0.001" /><testcase classname="tests.integration.test_phase4_integration.TestPhase4Optimization" name="test_parsing_algorithm_optimization" time="0.001" /><testcase classname="tests.integration.test_phase4_integration.TestPhase4Optimization" name="test_processing_adapter_optimization" time="0.002" /><testcase classname="tests.integration.test_phase2_day12_core_integration.TestPhase2Day12CoreIntegration" name="test_03_pipeline_executor_mask_stage_integration" time="0.001" /><testcase classname="tests.integration.test_phase2_day12_core_integration.TestPhase2Day12CoreIntegration" name="test_04_enhanced_processor_fallback_mechanism" time="0.715" /><testcase classname="tests.integration.test_phase3_day15_enhanced_validation.TestPhase3Day15EnhancedValidation" name="test_validate_protocol_type_detection" time="0.005" /><testcase classname="tests.integration.test_phase5_mcp_adapter" name="test_mcp_process_noop" time="0.023" /><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestErrorRecoveryStrategies" name="test_memory_error_recovery" time="0.001" /><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestErrorRecoveryStrategies" name="test_timeout_error_recovery" time="0.001" /><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestEnhancedFallbackMechanism" name="test_fallback_with_retry_tracking" time="0.003" /><testcase classname="tests.e2e.test_complete_workflow.TestErrorHandlingWorkflow" name="test_permission_denied_handling" time="0.001" /><testcase classname="tests.e2e.test_complete_workflow.TestErrorHandlingWorkflow" name="test_disk_space_handling" time="0.001" /><testcase classname="tests.e2e.test_complete_workflow.TestIntegrationWorkflow" name="test_config_to_processing_integration" time="0.001" /><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestEnhancedFallbackMechanism" name="test_fallback_processor_safe_execution" time="0.002" /><testcase classname="tests.integration.test_phase3_day15_enhanced_validation.TestPhase3Day15EnhancedValidation" name="test_validate_smart_masking" time="0.003" /><testcase classname="tests.e2e.test_complete_workflow.TestIntegrationWorkflow" name="test_processing_to_output_integration" time="0.001" /><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestErrorReportingAndDiagnostics" name="test_basic_error_report_generation" time="0.001"><failure message="AssertionError: assert 'category_breakdown' in {'total_errors': 1, 'recent_errors': 1, 'category_distribution': {'io_error': 1}, 'severity_distribution': {'medium': 1}, 'most_common_patterns': {'io_error:FILE_ACCESS_ERROR': 1}, 'recovery_success_rate': {}}">tests/integration/test_phase2_day13_error_handling_enhancement.py:492: in test_basic_error_report_generation
    assert "category_breakdown" in report["error_summary"]
E   AssertionError: assert 'category_breakdown' in {'total_errors': 1, 'recent_errors': 1, 'category_distribution': {'io_error': 1}, 'severity_distribution': {'medium': 1}, 'most_common_patterns': {'io_error:FILE_ACCESS_ERROR': 1}, 'recovery_success_rate': {}}</failure></testcase><testcase classname="tests.e2e.test_complete_workflow.TestGUIWorkflow" name="test_gui_initialization" time="0.003" /><testcase classname="tests.integration.test_phase3_day15_enhanced_validation.TestPhase3Day15ValidationCriteria" name="test_tls_protocol_types_support" time="0.003" /><testcase classname="tests.e2e.test_complete_workflow.TestGUIWorkflow" name="test_gui_config_integration" time="0.001" /><testcase classname="tests.integration.test_phase3_day15_enhanced_validation.TestPhase3Day15ValidationCriteria" name="test_validation_functions_exist" time="0.002" /><testcase classname="tests.integration.test_phase3_day15_enhanced_validation.TestPhase3Day15ValidationCriteria" name="test_validation_thresholds" time="0.001" /><testcase classname="tests.integration.test_phase3_day16_real_tls_data_testing.TestPhase3Day16RealTLSDataTesting" name="test_verify_sample_files_exist" time="0.001" /><testcase classname="tests.integration.test_enhanced_mask_stage_integration.TestEnhancedMaskStageIntegration" name="test_pipeline_executor_integration_enhanced_mode" time="0.005" /><testcase classname="tests.integration.test_enhanced_mask_stage_integration.TestEnhancedMaskStageIntegration" name="test_pipeline_executor_integration_basic_mode" time="0.002" /><testcase classname="tests.integration.test_enhanced_mask_stage_integration.TestEnhancedMaskStageIntegration" name="test_enhanced_mode_fallback_to_basic_mode" time="0.001" /><testcase classname="tests.integration.test_phase3_day16_real_tls_data_testing.TestPhase3Day16RealTLSDataTesting" name="test_sample_files_basic_info" time="0.002" /><testcase classname="tests.integration.test_phase7_e2e_tls23_validation" name="test_phase7_tls23_e2e_validation_pass" time="66.442"><skipped type="pytest.xfail" message="TLS-23 验证器返回非零退出码，可能是环境依赖问题，标记为 xfail" /></testcase><testcase classname="tests.integration.test_enhanced_mask_stage_integration.TestEnhancedMaskStageIntegration" name="test_end_to_end_processing_simulation" time="0.003"><failure message="scapy.error.Scapy_Exception: No data could be read!">src/pktmask/core/pipeline/stages/mask_payload/stage.py:327: in _process_with_enhanced_mode
    return StageStats(
E   pydantic_core._pydantic_core.ValidationError: 2 validation errors for StageStats
E   packets_processed
E     Input should be a valid integer [type=int_type, input_value=&lt;Mock name='mock.execute_....get()' id='4677883552'&gt;, input_type=Mock]
E       For further information visit https://errors.pydantic.dev/2.11/v/int_type
E   packets_modified
E     Input should be a valid integer [type=int_type, input_value=&lt;Mock name='mock.execute_....get()' id='4677883552'&gt;, input_type=Mock]
E       For further information visit https://errors.pydantic.dev/2.11/v/int_type

During handling of the above exception, another exception occurred:
tests/integration/test_enhanced_mask_stage_integration.py:177: in test_end_to_end_processing_simulation
    result = stage.process_file(input_file.name, output_file.name)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/stages/mask_payload/stage.py:259: in process_file
    return self._process_with_enhanced_mode(input_path, output_path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/stages/mask_payload/stage.py:349: in _process_with_enhanced_mode
    return self._process_with_basic_mode_fallback(input_path, output_path, duration_ms, str(e))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/stages/mask_payload/stage.py:405: in _process_with_basic_mode_fallback
    packets: List[Packet] = rdpcap(str(input_path))
                            ^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/scapy/utils.py:1345: in rdpcap
    with PcapReader(filename) as fdesc:  # type: ignore
         ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/scapy/utils.py:1387: in __call__
    raise Scapy_Exception(
E   scapy.error.Scapy_Exception: No data could be read!</failure></testcase><testcase classname="tests.integration.test_phase3_day16_real_tls_data_testing.TestPhase3Day16RealTLSDataTesting" name="test_enhanced_processor_on_real_tls_sample[tls_1_2_smtp_mix.pcapng]" time="0.005" /><testcase classname="tests.integration.test_phase3_day16_real_tls_data_testing.TestPhase3Day16RealTLSDataTesting" name="test_enhanced_processor_on_real_tls_sample[tls_1_3_0-RTT-2_22_23_mix.pcapng]" time="0.003" /><testcase classname="tests.integration.test_phase3_day16_real_tls_data_testing.TestPhase3Day16RealTLSDataTesting" name="test_enhanced_processor_on_real_tls_sample[tls_1_2_single_vlan.pcap]" time="0.002" /><testcase classname="tests.integration.test_phase3_day16_real_tls_data_testing.TestPhase3Day16RealTLSDataTesting" name="test_enhanced_processor_on_real_tls_sample[tls_1_2_double_vlan.pcap]" time="0.002" /><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestErrorReportingAndDiagnostics" name="test_detailed_error_report_generation" time="0.003"><failure message="AssertionError: assert 'error_patterns' in {'processor_info': {'name': 'TShark Enhanced Mask Processor', 'version': '1.0.0 (Phase 2, Day 13)', 'error_analytics_enabled': True}, 'error_summary': {'total_errors': 3, 'recent_errors': 3, 'category_distribution': {'memory_error': 1, 'timeout_error': 1, 'validation_error': 1}, 'severity_distribution': {'high': 1, 'medium': 1, 'low': 1}, 'most_common_patterns': {'memory_error:OUT_OF_MEMORY': 1, 'timeout_error:PROCESSING_TIMEOUT': 1, 'validation_error:VALIDATION_FAILED': 1}, 'recovery_success_rate': {}}, 'processing_stats': {'total_files_processed': 0, 'successful_files': 0, 'fallback_usage': {}, 'tls_records_processed': 0, 'mask_rules_generated': 0, 'packets_modified': 0, 'stage_performance': {}, 'error_recovery_count': 0, 'error_statistics': {}, 'retry_statistics': {}, 'recovery_success_rate': 0.0}, 'configuration': {'retry_config': {'max_retries': 3, 'base_delay': 1.0, 'exponential_backoff': True}, 'fallback_enabled': True, 'fallback_order': ['enhanced_trimmer', 'mask_stage']}, 'error_history': [{'timestamp': 1751525861.087453, 'category': 'memory_error', 'severity': 'high', 'error_code': 'OUT_OF_MEMORY', 'message': '\u6d4b\u8bd5\u9519\u8bef: OUT_OF_MEMORY', 'file_context': None, 'stage_context': None, 'retry_count': 0, 'recovery_attempted': False, 'mitigation_suggestions': []}, {'timestamp': 1751525861.087617, 'category': 'timeout_error', 'severity': 'medium', 'error_code': 'PROCESSING_TIMEOUT', 'message': '\u6d4b\u8bd5\u9519\u8bef: PROCESSING_TIMEOUT', 'file_context': None, 'stage_context': None, 'retry_count': 0, 'recovery_attempted': False, 'mitigation_suggestions': []}, {'timestamp': 1751525861.0876951, 'category': 'validation_error', 'severity': 'low', 'error_code': 'VALIDATION_FAILED', 'message': '\u6d4b\u8bd5\u9519\u8bef: VALIDATION_FAILED', 'file_context': None, 'stage_context': None, 'retry_count': 0, 'recovery_attempted': False, 'mitigation_suggestions': []}], 'retry_history': {}}">tests/integration/test_phase2_day13_error_handling_enhancement.py:519: in test_detailed_error_report_generation
    assert "error_patterns" in report
E   AssertionError: assert 'error_patterns' in {'processor_info': {'name': 'TShark Enhanced Mask Processor', 'version': '1.0.0 (Phase 2, Day 13)', 'error_analytics_enabled': True}, 'error_summary': {'total_errors': 3, 'recent_errors': 3, 'category_distribution': {'memory_error': 1, 'timeout_error': 1, 'validation_error': 1}, 'severity_distribution': {'high': 1, 'medium': 1, 'low': 1}, 'most_common_patterns': {'memory_error:OUT_OF_MEMORY': 1, 'timeout_error:PROCESSING_TIMEOUT': 1, 'validation_error:VALIDATION_FAILED': 1}, 'recovery_success_rate': {}}, 'processing_stats': {'total_files_processed': 0, 'successful_files': 0, 'fallback_usage': {}, 'tls_records_processed': 0, 'mask_rules_generated': 0, 'packets_modified': 0, 'stage_performance': {}, 'error_recovery_count': 0, 'error_statistics': {}, 'retry_statistics': {}, 'recovery_success_rate': 0.0}, 'configuration': {'retry_config': {'max_retries': 3, 'base_delay': 1.0, 'exponential_backoff': True}, 'fallback_enabled': True, 'fallback_order': ['enhanced_trimmer', 'mask_stage']}, 'error_history': [{'timestamp': 1751525861.087453, 'category': 'memory_error', 'severity': 'high', 'error_code': 'OUT_OF_MEMORY', 'message': '\u6d4b\u8bd5\u9519\u8bef: OUT_OF_MEMORY', 'file_context': None, 'stage_context': None, 'retry_count': 0, 'recovery_attempted': False, 'mitigation_suggestions': []}, {'timestamp': 1751525861.087617, 'category': 'timeout_error', 'severity': 'medium', 'error_code': 'PROCESSING_TIMEOUT', 'message': '\u6d4b\u8bd5\u9519\u8bef: PROCESSING_TIMEOUT', 'file_context': None, 'stage_context': None, 'retry_count': 0, 'recovery_attempted': False, 'mitigation_suggestions': []}, {'timestamp': 1751525861.0876951, 'category': 'validation_error', 'severity': 'low', 'error_code': 'VALIDATION_FAILED', 'message': '\u6d4b\u8bd5\u9519\u8bef: VALIDATION_FAILED', 'file_context': None, 'stage_context': None, 'retry_count': 0, 'recovery_attempted': False, 'mitigation_suggestions': []}], 'retry_history': {}}</failure></testcase><testcase classname="tests.integration.test_phase3_day16_real_tls_data_testing.TestPhase3Day16RealTLSDataTesting" name="test_enhanced_processor_on_real_tls_sample[tls_1_2_plainip.pcap]" time="0.003" /><testcase classname="tests.integration.test_phase3_day16_real_tls_data_testing.TestPhase3Day16RealTLSDataTesting" name="test_enhanced_processor_on_real_tls_sample[tls_1_2_pop_mix.pcapng]" time="0.003" /><testcase classname="tests.integration.test_phase1_2_integration_fixed.TestPhase12IntegrationFixed" name="test_performance_and_scalability" time="0.588"><failure message="pktmask.core.trim.exceptions.StageExecutionError: Stage 'EnhancedPySharkAnalyzer' 执行失败: 未知错误 (详情: stage_name=EnhancedPySharkAnalyzer, stage_index=1, total_stages=3)">tests/integration/test_phase1_2_integration_fixed.py:459: in test_performance_and_scalability
    result = executor.execute_pipeline(self.input_file, self.output_file)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/trim/multi_stage_executor.py:143: in execute_pipeline
    raise StageExecutionError(
E   pktmask.core.trim.exceptions.StageExecutionError: Stage 'EnhancedPySharkAnalyzer' 执行失败: 未知错误 (详情: stage_name=EnhancedPySharkAnalyzer, stage_index=1, total_stages=3)</failure></testcase><testcase classname="tests.integration.test_phase3_day16_real_tls_data_testing.TestPhase3Day16RealTLSDataTesting" name="test_enhanced_processor_on_real_tls_sample[tls_1_0_multi_segment_google-https.pcap]" time="0.002" /><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestErrorReportingAndDiagnostics" name="test_verbose_error_report_generation" time="0.001"><failure message="AssertionError: assert 'error_patterns' in {'processor_info': {'name': 'TShark Enhanced Mask Processor', 'version': '1.0.0 (Phase 2, Day 13)', 'error_analytics_enabled': True}, 'error_summary': {'total_errors': 1, 'recent_errors': 1, 'category_distribution': {'processing_error': 1}, 'severity_distribution': {'high': 1}, 'most_common_patterns': {'processing_error:PROCESSING_FAILED': 1}, 'recovery_success_rate': {}}, 'processing_stats': {'total_files_processed': 0, 'successful_files': 0, 'fallback_usage': {}, 'tls_records_processed': 0, 'mask_rules_generated': 0, 'packets_modified': 0, 'stage_performance': {}, 'error_recovery_count': 0, 'error_statistics': {}, 'retry_statistics': {}, 'recovery_success_rate': 0.0}, 'configuration': {'retry_config': {'max_retries': 3, 'base_delay': 1.0, 'exponential_backoff': True}, 'fallback_enabled': True, 'fallback_order': ['enhanced_trimmer', 'mask_stage']}, 'error_history': [{'timestamp': 1751525861.101197, 'category': 'processing_error', 'severity': 'high', 'error_code': 'PROCESSING_FAILED', 'message': '\u5904\u7406\u5931\u8d25', 'file_context': 'test_file.pcap', 'stage_context': 'main_processing', 'retry_count': 0, 'recovery_attempted': False, 'mitigation_suggestions': [], 'exception_type': 'ValueError'}], 'retry_history': {}, 'system_diagnostics': {'temp_dir': None, 'temp_dir_exists': False, 'fallback_processors_available': [], 'core_components_available': False, 'current_fallback_mode': None}}">tests/integration/test_phase2_day13_error_handling_enhancement.py:549: in test_verbose_error_report_generation
    assert "error_patterns" in report
E   AssertionError: assert 'error_patterns' in {'processor_info': {'name': 'TShark Enhanced Mask Processor', 'version': '1.0.0 (Phase 2, Day 13)', 'error_analytics_enabled': True}, 'error_summary': {'total_errors': 1, 'recent_errors': 1, 'category_distribution': {'processing_error': 1}, 'severity_distribution': {'high': 1}, 'most_common_patterns': {'processing_error:PROCESSING_FAILED': 1}, 'recovery_success_rate': {}}, 'processing_stats': {'total_files_processed': 0, 'successful_files': 0, 'fallback_usage': {}, 'tls_records_processed': 0, 'mask_rules_generated': 0, 'packets_modified': 0, 'stage_performance': {}, 'error_recovery_count': 0, 'error_statistics': {}, 'retry_statistics': {}, 'recovery_success_rate': 0.0}, 'configuration': {'retry_config': {'max_retries': 3, 'base_delay': 1.0, 'exponential_backoff': True}, 'fallback_enabled': True, 'fallback_order': ['enhanced_trimmer', 'mask_stage']}, 'error_history': [{'timestamp': 1751525861.101197, 'category': 'processing_error', 'severity': 'high', 'error_code': 'PROCESSING_FAILED', 'message': '\u5904\u7406\u5931\u8d25', 'file_context': 'test_file.pcap', 'stage_context': 'main_processing', 'retry_count': 0, 'recovery_attempted': False, 'mitigation_suggestions': [], 'exception_type': 'ValueError'}], 'retry_history': {}, 'system_diagnostics': {'temp_dir': None, 'temp_dir_exists': False, 'fallback_processors_available': [], 'core_components_available': False, 'current_fallback_mode': None}}</failure></testcase><testcase classname="tests.integration.test_phase3_day16_real_tls_data_testing.TestPhase3Day16RealTLSDataTesting" name="test_enhanced_processor_on_real_tls_sample[tls_1_2-2.pcapng]" time="0.002" /><testcase classname="tests.integration.test_phase3_day16_real_tls_data_testing.TestPhase3Day16RealTLSDataTesting" name="test_enhanced_processor_on_real_tls_sample[ssl_3.pcapng]" time="0.002" /><testcase classname="tests.integration.test_phase3_day16_real_tls_data_testing.TestPhase3Day16RealTLSDataTesting" name="test_cross_sample_protocol_coverage" time="0.001" /><testcase classname="tests.integration.test_phase3_day16_real_tls_data_testing.TestPhase3Day16RealTLSDataTesting" name="test_enhanced_processor_fallback_on_real_data" time="0.003" /><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestErrorReportingAndDiagnostics" name="test_mitigation_recommendations_generation" time="0.001" /><testcase classname="tests.integration.test_phase3_day16_real_tls_data_testing.TestPhase3Day16RealTLSDataTesting" name="test_real_data_error_recovery" time="0.002" /><testcase classname="tests.integration.test_phase2_day14_comprehensive_e2e.TestPhase2Day14ComprehensiveE2E" name="test_e2e_complete_workflow_with_mock_tshark" time="0.902"><failure message="AttributeError: 'dict' object has no attribute 'content_type'">tests/integration/test_phase2_day14_comprehensive_e2e.py:124: in test_e2e_complete_workflow_with_mock_tshark
    result = processor.process_file(self.input_file, self.output_file)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:775: in process_file
    result = self._process_with_core_pipeline(input_path, output_path)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:861: in _process_with_core_pipeline
    tls_23_records = [r for r in tls_records if r.content_type == 23]
                                                ^^^^^^^^^^^^^^
E   AttributeError: 'dict' object has no attribute 'content_type'</failure></testcase><testcase classname="tests.integration.test_phase3_day16_real_tls_data_testing.TestPhase3Day16RealTLSDataTesting" name="test_phase3_day16_acceptance_criteria" time="0.003" /><testcase classname="tests.integration.test_phase3_day17_cross_segment_tls.TestPhase3Day17CrossSegmentTLS" name="test_cross_segment_boundary_safety" time="0.002" /><testcase classname="tests.integration.test_phase3_day17_cross_segment_tls.TestPhase3Day17CrossSegmentTLS" name="test_cross_segment_detection_accuracy" time="0.002" /><testcase classname="tests.integration.test_phase3_day17_cross_segment_tls.TestPhase3Day17CrossSegmentTLS" name="test_cross_segment_processing_strategy" time="0.004"><failure message="AssertionError: 5 != 3 : 应该生成3个掩码规则">tests/integration/test_phase3_day17_cross_segment_tls.py:207: in test_cross_segment_processing_strategy
    self.assertEqual(len(rules), 3, "应该生成3个掩码规则")
E   AssertionError: 5 != 3 : 应该生成3个掩码规则</failure></testcase><testcase classname="tests.integration.test_phase3_day17_cross_segment_tls.TestPhase3Day17CrossSegmentTLS" name="test_cross_segment_statistics" time="0.005"><failure message="AssertionError: 8 != 7 : 应该生成7个掩码规则（6个基础+1个跨包分段）">tests/integration/test_phase3_day17_cross_segment_tls.py:304: in test_cross_segment_statistics
    self.assertEqual(len(rules), 7, "应该生成7个掩码规则（6个基础+1个跨包分段）")
E   AssertionError: 8 != 7 : 应该生成7个掩码规则（6个基础+1个跨包分段）</failure></testcase><testcase classname="tests.integration.test_phase3_day17_cross_segment_tls.TestPhase3Day17CrossSegmentTLS" name="test_end_to_end_cross_segment_processing" time="0.015"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/integration/test_phase3_day17_cross_segment_tls.py:425: in test_end_to_end_cross_segment_processing
    result = processor.process_file(str(self.input_file), str(self.output_file))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.integration.test_phase3_day17_cross_segment_tls.TestPhase3Day17CrossSegmentTLS" name="test_real_multi_segment_file_analysis" time="0.004" /><testcase classname="tests.integration.test_phase3_day18_tls_protocol_types.TestPhase3Day18TLSProtocolTypes" name="test_all_protocol_types_together" time="0.002"><failure message="AssertionError: 100 != 95 : TLS-23应该掩码95字节载荷">tests/integration/test_phase3_day18_tls_protocol_types.py:170: in test_all_protocol_types_together
    self.assertEqual(tls_23_rule.mask_length, 95,
E   AssertionError: 100 != 95 : TLS-23应该掩码95字节载荷</failure></testcase><testcase classname="tests.integration.test_phase3_day18_tls_protocol_types.TestPhase3Day18TLSProtocolTypes" name="test_boundary_cases_protocol_strategies" time="0.002"><failure message="AssertionError: &lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt; != &lt;MaskAction.KEEP_ALL: 'keep_all'&gt; : TLS-23在最小长度记录下的处理策略不正确">tests/integration/test_phase3_day18_tls_protocol_types.py:273: in test_boundary_cases_protocol_strategies
    self.assertEqual(tls_23_rule.action, test_case['expected_23_action'],
E   AssertionError: &lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt; != &lt;MaskAction.KEEP_ALL: 'keep_all'&gt; : TLS-23在最小长度记录下的处理策略不正确</failure></testcase><testcase classname="tests.integration.test_phase3_day18_tls_protocol_types.TestPhase3Day18TLSProtocolTypes" name="test_individual_protocol_type_strategies" time="0.003"><failure message="AssertionError: 100 != 95 : TLS-23(ApplicationData)应该掩码95字节载荷">tests/integration/test_phase3_day18_tls_protocol_types.py:117: in test_individual_protocol_type_strategies
    self.assertEqual(rule.mask_length, 95,
E   AssertionError: 100 != 95 : TLS-23(ApplicationData)应该掩码95字节载荷</failure></testcase><testcase classname="tests.integration.test_enhanced_mask_stage_integration.TestEnhancedMaskStageIntegration" name="test_configuration_propagation" time="0.001" /><testcase classname="tests.integration.test_enhanced_mask_stage_integration.TestEnhancedMaskStageIntegration" name="test_performance_metrics_collection" time="0.001"><failure message="scapy.error.Scapy_Exception: No data could be read!">src/pktmask/core/pipeline/stages/mask_payload/stage.py:327: in _process_with_enhanced_mode
    return StageStats(
E   pydantic_core._pydantic_core.ValidationError: 2 validation errors for StageStats
E   packets_processed
E     Input should be a valid integer [type=int_type, input_value=&lt;Mock name='mock.execute_....get()' id='4677882208'&gt;, input_type=Mock]
E       For further information visit https://errors.pydantic.dev/2.11/v/int_type
E   packets_modified
E     Input should be a valid integer [type=int_type, input_value=&lt;Mock name='mock.execute_....get()' id='4677882208'&gt;, input_type=Mock]
E       For further information visit https://errors.pydantic.dev/2.11/v/int_type

During handling of the above exception, another exception occurred:
tests/integration/test_enhanced_mask_stage_integration.py:241: in test_performance_metrics_collection
    result = stage.process_file(input_file.name, output_file.name)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/stages/mask_payload/stage.py:259: in process_file
    return self._process_with_enhanced_mode(input_path, output_path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/stages/mask_payload/stage.py:349: in _process_with_enhanced_mode
    return self._process_with_basic_mode_fallback(input_path, output_path, duration_ms, str(e))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/stages/mask_payload/stage.py:405: in _process_with_basic_mode_fallback
    packets: List[Packet] = rdpcap(str(input_path))
                            ^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/scapy/utils.py:1345: in rdpcap
    with PcapReader(filename) as fdesc:  # type: ignore
         ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/scapy/utils.py:1387: in __call__
    raise Scapy_Exception(
E   scapy.error.Scapy_Exception: No data could be read!</failure></testcase><testcase classname="tests.integration.test_phase3_day18_tls_protocol_types.TestPhase3Day18TLSProtocolTypes" name="test_protocol_type_strategy_consistency" time="0.001" /><testcase classname="tests.integration.test_phase3_day18_tls_protocol_types.TestPhase3Day18TLSProtocolTypes" name="test_unsupported_protocol_type_handling" time="0.001" /><testcase classname="tests.integration.test_phase3_day18_tls_protocol_types.TestPhase3Day18AcceptanceCriteria" name="test_acceptance_criteria_verification" time="0.000" /><testcase classname="tests.unit.test_config.TestLoggingSettings" name="test_logging_defaults" time="0.000" /><testcase classname="tests.unit.test_config.TestLoggingSettings" name="test_logging_modifications" time="0.000" /><testcase classname="tests.unit.test_config.TestConfigurationIntegration" name="test_config_save_and_load" time="0.016" /><testcase classname="tests.unit.test_config.TestConfigurationIntegration" name="test_config_default_path" time="0.000" /><testcase classname="tests.unit.test_config.TestConfigurationIntegration" name="test_config_with_nonexistent_file" time="0.001" /><testcase classname="tests.unit.test_config.TestConfigurationIntegration" name="test_config_helper_methods" time="0.000" /><testcase classname="tests.unit.test_config.TestConfigurationEdgeCases" name="test_invalid_config_data" time="0.001" /><testcase classname="tests.unit.test_config.TestConfigurationEdgeCases" name="test_partial_config_data" time="0.002" /><testcase classname="tests.unit.test_config.TestConfigurationEdgeCases" name="test_config_update_directories" time="0.001" /><testcase classname="tests.unit.test_config.TestConfigurationDefaults" name="test_default_values_are_reasonable" time="0.001" /><testcase classname="tests.unit.test_config.TestConfigurationDefaults" name="test_configs_are_consistent" time="0.000" /><testcase classname="tests.unit.test_domain_adapters_comprehensive.TestEventDataAdapter" name="test_event_adapter_initialization" time="0.001" /><testcase classname="tests.unit.test_domain_adapters_comprehensive.TestEventDataAdapter" name="test_from_legacy_dict_basic" time="0.000"><skipped type="pytest.skip" message="Legacy format conversion tests require complex data model setup - feature works but tests need refinement">/Users/ricky/Downloads/PktMask/tests/unit/test_domain_adapters_comprehensive.py:31: Legacy format conversion tests require complex data model setup - feature works but tests need refinement</skipped></testcase><testcase classname="tests.unit.test_domain_adapters_comprehensive.TestEventDataAdapter" name="test_to_legacy_dict_basic" time="0.001" /><testcase classname="tests.unit.test_domain_adapters_comprehensive.TestEventDataAdapter" name="test_preprocess_legacy_data_log" time="0.000" /><testcase classname="tests.unit.test_domain_adapters_comprehensive.TestEventDataAdapter" name="test_create_enhanced_event" time="0.001"><skipped type="pytest.skip" message="Enhanced event creation requires complex data model setup - feature works but tests need refinement">/Users/ricky/Downloads/PktMask/tests/unit/test_domain_adapters_comprehensive.py:66: Enhanced event creation requires complex data model setup - feature works but tests need refinement</skipped></testcase><testcase classname="tests.unit.test_domain_adapters_comprehensive.TestEventDataAdapter" name="test_is_legacy_format" time="0.000"><skipped type="pytest.skip" message="Legacy format detection requires complex data model setup - feature works but tests need refinement">/Users/ricky/Downloads/PktMask/tests/unit/test_domain_adapters_comprehensive.py:70: Legacy format detection requires complex data model setup - feature works but tests need refinement</skipped></testcase><testcase classname="tests.unit.test_domain_adapters_comprehensive.TestStatisticsDataAdapter" name="test_statistics_adapter_initialization" time="0.000" /><testcase classname="tests.unit.test_domain_adapters_comprehensive.TestStatisticsDataAdapter" name="test_to_legacy_dict_basic" time="0.002" /><testcase classname="tests.unit.test_domain_adapters_comprehensive.TestStatisticsDataAdapter" name="test_merge_statistics_basic" time="0.002" /><testcase classname="tests.unit.test_domain_adapters_comprehensive.TestStatisticsDataAdapter" name="test_create_dashboard_update" time="0.001" /><testcase classname="tests.unit.test_domain_adapters_comprehensive.TestStatisticsDataAdapter" name="test_validate_statistics_data" time="0.003" /><testcase classname="tests.unit.test_domain_adapters_comprehensive.TestDataModels" name="test_pipeline_event_data_exists" time="0.001" /><testcase classname="tests.unit.test_domain_adapters_comprehensive.TestDataModels" name="test_statistics_data_exists" time="0.001" /><testcase classname="tests.unit.test_domain_adapters_comprehensive.TestDataModels" name="test_pipeline_events_enum" time="0.001" /><testcase classname="tests.unit.test_domain_adapters_comprehensive.TestDomainAdaptersIntegration" name="test_adapters_can_be_instantiated" time="0.000" /><testcase classname="tests.unit.test_domain_adapters_comprehensive.TestDomainAdaptersIntegration" name="test_adapters_have_expected_methods" time="0.000" /><testcase classname="tests.unit.test_domain_adapters_comprehensive.TestDomainAdaptersIntegration" name="test_error_handling_in_adapters" time="0.001" /><testcase classname="tests.unit.test_encapsulation_basic.TestEncapsulationTypes" name="test_encapsulation_type_enum" time="0.000" /><testcase classname="tests.unit.test_encapsulation_basic.TestEncapsulationDetector" name="test_detector_initialization" time="0.002" /><testcase classname="tests.unit.test_encapsulation_basic.TestEncapsulationDetector" name="test_detect_plain_packet" time="0.002" /><testcase classname="tests.unit.test_encapsulation_basic.TestEncapsulationDetector" name="test_detect_vlan_packet" time="0.002" /><testcase classname="tests.unit.test_encapsulation_basic.TestEncapsulationDetector" name="test_is_encapsulated" time="0.003" /><testcase classname="tests.unit.test_encapsulation_basic.TestEncapsulationDetector" name="test_get_encapsulation_depth" time="0.002" /><testcase classname="tests.unit.test_encapsulation_basic.TestEncapsulationDetector" name="test_get_supported_encapsulations" time="0.001" /><testcase classname="tests.unit.test_encapsulation_basic.TestEncapsulationDetector" name="test_cache_functionality" time="0.002" /><testcase classname="tests.unit.test_encapsulation_basic.TestProtocolStackParser" name="test_parser_initialization" time="0.001" /><testcase classname="tests.unit.test_encapsulation_basic.TestProtocolStackParser" name="test_parse_plain_packet_layers" time="0.004" /><testcase classname="tests.unit.test_encapsulation_basic.TestProtocolStackParser" name="test_parse_vlan_packet_layers" time="0.003" /><testcase classname="tests.unit.test_encapsulation_basic.TestProtocolStackParser" name="test_extract_all_ip_addresses" time="0.002" /><testcase classname="tests.unit.test_encapsulation_basic.TestProtocolStackParser" name="test_find_innermost_payload" time="0.002" /><testcase classname="tests.unit.test_encapsulation_basic.TestProcessingAdapter" name="test_adapter_initialization" time="0.001" /><testcase classname="tests.unit.test_encapsulation_basic.TestProcessingAdapter" name="test_analyze_packet_for_ip_processing" time="0.002" /><testcase classname="tests.unit.test_encapsulation_basic.TestProcessingAdapter" name="test_analyze_packet_for_payload_processing" time="0.002" /><testcase classname="tests.unit.test_encapsulation_basic.TestProcessingAdapter" name="test_extract_ips_for_anonymization" time="0.002" /><testcase classname="tests.unit.test_encapsulation_basic.TestProcessingAdapter" name="test_is_packet_encapsulated" time="0.002" /><testcase classname="tests.unit.test_encapsulation_basic.TestProcessingAdapter" name="test_get_encapsulation_summary" time="0.004" /><testcase classname="tests.unit.test_encapsulation_basic.TestProcessingAdapter" name="test_get_processing_stats" time="0.004" /><testcase classname="tests.unit.test_encapsulation_basic.TestProcessingAdapter" name="test_reset_stats" time="0.003" /><testcase classname="tests.integration.test_enhanced_mask_stage_integration.TestEnhancedMaskStageIntegration" name="test_error_handling_and_recovery" time="0.002" /><testcase classname="tests.unit.test_encapsulation_basic.TestEncapsulationIntegration" name="test_end_to_end_plain_packet" time="0.005" /><testcase classname="tests.integration.test_enhanced_mask_stage_integration.TestMaskStageCompatibility" name="test_stage_stats_compatibility" time="0.003" /><testcase classname="tests.integration.test_enhanced_mask_stage_integration.TestMaskStageCompatibility" name="test_backward_compatibility_with_original_interface" time="0.514" /><testcase classname="tests.unit.test_encapsulation_basic.TestEncapsulationIntegration" name="test_end_to_end_vlan_packet" time="0.005" /><testcase classname="tests.unit.test_enhanced_ip_anonymization.TestEnhancedIPAnonymization" name="test_strategy_initialization_with_encapsulation_support" time="0.001" /><testcase classname="tests.unit.test_enhanced_ip_anonymization.TestEnhancedIPAnonymization" name="test_reset_with_encapsulation_stats" time="0.001" /><testcase classname="tests.unit.test_enhanced_ip_anonymization.TestEnhancedIPAnonymization" name="test_prescan_plain_packets" time="0.025" /><testcase classname="tests.unit.test_enhanced_ip_anonymization.TestEnhancedIPAnonymization" name="test_prescan_vlan_packets" time="0.014" /><testcase classname="tests.unit.test_enhanced_ip_anonymization.TestEnhancedIPAnonymization" name="test_prescan_mixed_packets" time="0.015" /><testcase classname="tests.unit.test_enhanced_ip_anonymization.TestEnhancedIPAnonymization" name="test_create_mapping_with_encapsulation_stats" time="0.009" /><testcase classname="tests.unit.test_enhanced_ip_anonymization.TestEnhancedIPAnonymization" name="test_anonymize_plain_packet" time="0.001" /><testcase classname="tests.unit.test_enhanced_ip_anonymization.TestEnhancedIPAnonymization" name="test_anonymize_vlan_packet" time="0.008" /><testcase classname="tests.unit.test_enhanced_ip_anonymization.TestEnhancedIPAnonymization" name="test_anonymize_packet_not_in_mapping" time="0.001" /><testcase classname="tests.unit.test_enhanced_ip_anonymization.TestEnhancedIPAnonymization" name="test_anonymize_packet_no_mapping" time="0.001" /><testcase classname="tests.unit.test_enhanced_ip_anonymization.TestEncapsulationStatistics" name="test_encapsulation_stats_initialization" time="0.000" /><testcase classname="tests.unit.test_enhanced_ip_anonymization.TestEncapsulationStatistics" name="test_stats_collection_during_prescan" time="0.019" /><testcase classname="tests.unit.test_enhanced_ip_anonymization.TestEncapsulationIntegration" name="test_end_to_end_vlan_processing" time="0.011" /><testcase classname="tests.unit.test_enhanced_ip_anonymization.TestEncapsulationIntegration" name="test_mixed_encapsulation_processing" time="0.015" /><testcase classname="tests.unit.test_enhanced_mask_stage.TestEnhancedMaskStage" name="test_initialization_enhanced_mode_default" time="0.000" /><testcase classname="tests.unit.test_enhanced_mask_stage.TestEnhancedMaskStage" name="test_initialization_explicit_enhanced_mode" time="0.000" /><testcase classname="tests.unit.test_enhanced_mask_stage.TestEnhancedMaskStage" name="test_initialization_basic_mode" time="0.000" /><testcase classname="tests.unit.test_enhanced_mask_stage.TestEnhancedMaskStage" name="test_enhanced_mode_initialization_success" time="0.002" /><testcase classname="tests.unit.test_enhanced_mask_stage.TestEnhancedMaskStage" name="test_enhanced_mode_initialization_import_failure_fallback" time="0.001" /><testcase classname="tests.unit.test_enhanced_mask_stage.TestEnhancedMaskStage" name="test_basic_mode_initialization_with_recipe" time="0.001" /><testcase classname="tests.unit.test_enhanced_mask_stage.TestEnhancedMaskStage" name="test_stage_config_creation_tshark" time="0.003" /><testcase classname="tests.unit.test_enhanced_mask_stage.TestEnhancedMaskStage" name="test_stage_config_creation_pyshark" time="0.000" /><testcase classname="tests.unit.test_enhanced_mask_stage.TestEnhancedMaskStage" name="test_stage_config_creation_scapy" time="0.000" /><testcase classname="tests.unit.test_enhanced_mask_stage.TestEnhancedMaskStage" name="test_process_file_enhanced_mode_success" time="0.002"><failure message="assert 0 == 100&#10; +  where 0 = StageStats(stage_name='MaskStage', packets_processed=0, packets_modified=0, duration_ms=0.26702880859375, extra_metrics={'enhanced_mode': False, 'processor_adapter_mode': False, 'mode': 'fallback', 'original_mode': 'enhanced_or_processor_adapter', 'fallback_reason': &quot;2 validation errors for StageStats\npackets_processed\n  Input should be a valid integer [type=int_type, input_value=&lt;Mock name='mock.execute_....get()' id='4767839776'&gt;, input_type=Mock]\n    For further information visit https://errors.pydantic.dev/2.11/v/int_type\npackets_modified\n  Input should be a valid integer [type=int_type, input_value=&lt;Mock name='mock.execute_....get()' id='4767839776'&gt;, input_type=Mock]\n    For further information visit https://errors.pydantic.dev/2.11/v/int_type&quot;, 'graceful_degradation': True}).packets_processed">tests/unit/test_enhanced_mask_stage.py:175: in test_process_file_enhanced_mode_success
    assert result.packets_processed == 100
E   assert 0 == 100
E    +  where 0 = StageStats(stage_name='MaskStage', packets_processed=0, packets_modified=0, duration_ms=0.26702880859375, extra_metrics={'enhanced_mode': False, 'processor_adapter_mode': False, 'mode': 'fallback', 'original_mode': 'enhanced_or_processor_adapter', 'fallback_reason': "2 validation errors for StageStats\npackets_processed\n  Input should be a valid integer [type=int_type, input_value=&lt;Mock name='mock.execute_....get()' id='4767839776'&gt;, input_type=Mock]\n    For further information visit https://errors.pydantic.dev/2.11/v/int_type\npackets_modified\n  Input should be a valid integer [type=int_type, input_value=&lt;Mock name='mock.execute_....get()' id='4767839776'&gt;, input_type=Mock]\n    For further information visit https://errors.pydantic.dev/2.11/v/int_type", 'graceful_degradation': True}).packets_processed</failure></testcase><testcase classname="tests.unit.test_enhanced_mask_stage.TestEnhancedMaskStage" name="test_process_file_enhanced_mode_failure_fallback" time="0.002" /><testcase classname="tests.unit.test_enhanced_mask_stage.TestEnhancedMaskStage" name="test_process_file_basic_mode_with_masker" time="0.002" /><testcase classname="tests.unit.test_enhanced_mask_stage.TestEnhancedMaskStage" name="test_process_file_basic_mode_no_masker_bypass" time="0.001" /><testcase classname="tests.unit.test_enhanced_mask_stage.TestEnhancedMaskStage" name="test_mode_switching_during_runtime" time="0.000" /><testcase classname="tests.unit.test_enhanced_mask_stage.TestEnhancedMaskStage" name="test_configuration_inheritance" time="0.000" /><testcase classname="tests.unit.test_enhanced_mask_stage.TestMaskStageIntegration" name="test_compatibility_with_stage_base_interface" time="0.000" /><testcase classname="tests.unit.test_enhanced_mask_stage.TestMaskStageIntegration" name="test_error_handling_in_initialization" time="0.001" /><testcase classname="tests.unit.test_enhanced_mask_stage.TestMaskStageIntegration" name="test_file_path_handling" time="0.001" /><testcase classname="tests.unit.test_enhanced_payload_trimming.TestEnhancedPayloadTrimming" name="test_encapsulation_statistics_collection" time="0.009" /><testcase classname="tests.unit.test_enhanced_payload_trimming.TestEnhancedPayloadTrimming" name="test_enhanced_tcp_session_key_fallback" time="0.002" /><testcase classname="tests.unit.test_enhanced_payload_trimming.TestEnhancedPayloadTrimming" name="test_enhanced_tcp_session_key_plain_packet" time="0.001" /><testcase classname="tests.unit.test_enhanced_payload_trimming.TestEnhancedPayloadTrimming" name="test_enhanced_tcp_session_key_vlan_packet" time="0.002" /><testcase classname="tests.unit.test_enhanced_payload_trimming.TestEnhancedPayloadTrimming" name="test_enhanced_tcp_session_key_without_adapter" time="0.002" /><testcase classname="tests.unit.test_enhanced_payload_trimming.TestEnhancedPayloadTrimming" name="test_error_handling_and_fallback" time="0.005" /><testcase classname="tests.unit.test_enhanced_payload_trimming.TestEnhancedPayloadTrimming" name="test_performance_logging_integration" time="0.020" /><testcase classname="tests.unit.test_enhanced_payload_trimming.TestEnhancedPayloadTrimming" name="test_process_pcap_data_enhanced_mixed_packets" time="0.002" /><testcase classname="tests.unit.test_enhanced_payload_trimming.TestEnhancedPayloadTrimming" name="test_process_pcap_data_enhanced_plain_packets" time="0.004" /><testcase classname="tests.unit.test_enhanced_payload_trimming.TestEnhancedPayloadTrimming" name="test_process_pcap_data_enhanced_vlan_packets" time="0.005" /><testcase classname="tests.unit.test_enhanced_payload_trimming.TestEnhancedPayloadTrimming" name="test_process_pcap_data_enhanced_without_adapter" time="0.004" /><testcase classname="tests.unit.test_enhanced_payload_trimming.TestEnhancedPayloadTrimming" name="test_tcp_session_consistency" time="0.003" /><testcase classname="tests.unit.test_enhanced_payload_trimming.TestEnhancedPayloadTrimming" name="test_tls_signaling_detection_compatibility" time="0.002" /><testcase classname="tests.unit.test_enhanced_payload_trimming.TestEnhancedPayloadTrimming" name="test_trim_packet_payload_functionality" time="0.003" /><testcase classname="tests.unit.test_enhanced_payload_trimming.TestEnhancedPayloadTrimming" name="test_trimming_step_initialization" time="0.002" /><testcase classname="tests.integration.test_phase1_2_integration_fixed.TestPhase12IntegrationFixed" name="test_existing_system_compatibility" time="0.027" /><testcase classname="tests.unit.test_enhanced_payload_trimming.TestEnhancedPayloadTrimming" name="test_trimming_step_process_file_with_encapsulation" time="0.014" /><testcase classname="tests.integration.test_phase2_2_integration_simple.TestPhase22IntegrationSimple" name="test_error_handling_integration" time="0.003"><failure message="TypeError: argument of type 'NoneType' is not iterable">tests/integration/test_phase2_2_integration_simple.py:143: in test_error_handling_integration
    assert "PyShark分析失败" in result.error
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: argument of type 'NoneType' is not iterable</failure></testcase><testcase classname="tests.unit.test_enhanced_trim_core_models.TestMaskSpec" name="test_keep_all" time="0.000" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestMaskSpec" name="test_mask_after_basic" time="0.000" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestMaskSpec" name="test_mask_after_empty_payload" time="0.001" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestMaskSpec" name="test_mask_after_full_keep" time="0.001" /><testcase classname="tests.integration.test_phase2_2_integration_simple.TestPhase22IntegrationSimple" name="test_configuration_integration" time="0.002" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestMaskSpec" name="test_mask_after_full_zero" time="0.001" /><testcase classname="tests.integration.test_phase2_2_integration_simple.TestPhase22IntegrationSimple" name="test_mask_table_generation" time="0.404"><failure message="assert False&#10; +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x127029bd0&gt;.success">tests/integration/test_phase2_2_integration_simple.py:225: in test_mask_table_generation
    assert result.success
E   assert False
E    +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x127029bd0&gt;.success</failure></testcase><testcase classname="tests.unit.test_enhanced_trim_core_models.TestMaskSpec" name="test_mask_after_invalid_params" time="0.000" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestMaskSpec" name="test_mask_range_basic" time="0.004" /><testcase classname="tests.integration.test_phase1_day7_component_integration.TestPhase1Day7ComponentIntegration" name="test_basic_three_stage_integration" time="0.005" /><testcase classname="tests.integration.test_phase1_day7_component_integration.TestPhase1Day7ComponentIntegration" name="test_data_flow_consistency" time="0.003"><failure message="AssertionError: assert 4 == 3&#10; +  where 4 = len([MaskRule(packet_number=1, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=105, mask_offset=0, mask_length=0, action=&lt;MaskAction.KEEP_ALL: 'keep_all'&gt;, reason='TLS-22 \u534f\u8bae\u5b8c\u5168\u4fdd\u7559\u7b56\u7565', tls_record_type=22), MaskRule(packet_number=2, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=205, mask_offset=5, mask_length=200, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23), MaskRule(packet_number=3, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=305, mask_offset=5, mask_length=300, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u91cd\u7ec4\u5305\u63a9\u7801\uff1a\u4fdd\u75595\u5b57\u8282\u5934\u90e8\uff0c\u63a9\u7801300\u5b57\u8282\u8f7d\u8377 (\u8de8\u5305[3, 4])', tls_record_type=23), MaskRule(packet_number=4, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=0, mask_offset=0, mask_length=-1, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u4e2d\u95f4\u6bb5\u63a9\u7801\uff1a\u63a9\u7801\u6574\u4e2a\u8f7d\u8377 (\u5206\u6bb52/2, \u91cd\u7ec4\u5230\u53053)', tls_record_type=23)])">tests/integration/test_phase1_day7_component_integration.py:187: in test_data_flow_consistency
    assert len(mask_rules) == 3
E   AssertionError: assert 4 == 3
E    +  where 4 = len([MaskRule(packet_number=1, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=105, mask_offset=0, mask_length=0, action=&lt;MaskAction.KEEP_ALL: 'keep_all'&gt;, reason='TLS-22 \u534f\u8bae\u5b8c\u5168\u4fdd\u7559\u7b56\u7565', tls_record_type=22), MaskRule(packet_number=2, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=205, mask_offset=5, mask_length=200, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23), MaskRule(packet_number=3, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=305, mask_offset=5, mask_length=300, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u91cd\u7ec4\u5305\u63a9\u7801\uff1a\u4fdd\u75595\u5b57\u8282\u5934\u90e8\uff0c\u63a9\u7801300\u5b57\u8282\u8f7d\u8377 (\u8de8\u5305[3, 4])', tls_record_type=23), MaskRule(packet_number=4, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=0, mask_offset=0, mask_length=-1, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u4e2d\u95f4\u6bb5\u63a9\u7801\uff1a\u63a9\u7801\u6574\u4e2a\u8f7d\u8377 (\u5206\u6bb52/2, \u91cd\u7ec4\u5230\u53053)', tls_record_type=23)])</failure></testcase><testcase classname="tests.integration.test_phase2_day12_core_integration.TestPhase2Day12CoreIntegration" name="test_05_config_system_tshark_enhanced_support" time="0.001" /><testcase classname="tests.integration.test_phase2_day12_core_integration.TestPhase2Day12CoreIntegration" name="test_06_event_system_compatibility" time="0.001" /><testcase classname="tests.integration.test_phase1_day7_component_integration.TestPhase1Day7ComponentIntegration" name="test_end_to_end_processing_simulation" time="0.006"><failure message="AssertionError: assert 9 &lt;= 8&#10; +  where 9 = len([MaskRule(packet_number=1, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=15, mask_offset=0, mask_length=0, action=&lt;MaskAction.KEEP_ALL: 'keep_all'&gt;, reason='TLS-20 \u534f\u8bae\u5b8c\u5168\u4fdd\u7559\u7b56\u7565', tls_record_type=20), MaskRule(packet_number=2, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=20, mask_offset=0, mask_length=0, action=&lt;MaskAction.KEEP_ALL: 'keep_all'&gt;, reason='TLS-21 \u534f\u8bae\u5b8c\u5168\u4fdd\u7559\u7b56\u7565', tls_record_type=21), MaskRule(packet_number=3, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=205, mask_offset=0, mask_length=0, action=&lt;MaskAction.KEEP_ALL: 'keep_all'&gt;, reason='TLS-22 \u534f\u8bae\u5b8c\u5168\u4fdd\u7559\u7b56\u7565', tls_record_type=22), MaskRule(packet_number=4, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=1005, mask_offset=5, mask_length=1000, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23), MaskRule(packet_number=5, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=35, mask_offset=0, mask_length=0, action=&lt;MaskAction.KEEP_ALL: 'keep_all'&gt;, reason='TLS-24 \u534f\u8bae\u5b8c\u5168\u4fdd\u7559\u7b56\u7565', tls_record_type=24), MaskRule(packet_number=6, tcp_stream_id='stream_2', tls_record_offset=0, tls_record_length=2005, mask_offset=5, mask_length=2000, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u91cd\u7ec4\u5305\u63a9\u7801\uff1a\u4fdd\u75595\u5b57\u8282\u5934\u90e8\uff0c\u63a9\u78012000\u5b57\u8282\u8f7d\u8377 (\u8de8\u5305[6, 7])', tls_record_type=23), MaskRule(packet_number=7, tcp_stream_id='stream_2', tls_record_offset=0, tls_record_length=0, mask_offset=0, mask_length=-1, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u4e2d\u95f4\u6bb5\u63a9\u7801\uff1a\u63a9\u7801\u6574\u4e2a\u8f7d\u8377 (\u5206\u6bb52/2, \u91cd\u7ec4\u5230\u53056)', tls_record_type=23), MaskRule(packet_number=8, tcp_stream_id='stream_3', tls_record_offset=0, tls_record_length=805, mask_offset=5, mask_length=800, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23), MaskRule(packet_number=9, tcp_stream_id='stream_3', tls_record_offset=0, tls_record_length=155, mask_offset=0, mask_length=0, action=&lt;MaskAction.KEEP_ALL: 'keep_all'&gt;, reason='TLS-22 \u534f\u8bae\u5b8c\u5168\u4fdd\u7559\u7b56\u7565', tls_record_type=22)])&#10; +  and   8 = len([TLSRecordInfo(packet_number=1, content_type=20, version=(3, 3), length=10, is_complete=True, spans_packets=[1], tcp_stream_id='stream_1', record_offset=0), TLSRecordInfo(packet_number=2, content_type=21, version=(3, 3), length=15, is_complete=True, spans_packets=[2], tcp_stream_id='stream_1', record_offset=0), TLSRecordInfo(packet_number=3, content_type=22, version=(3, 3), length=200, is_complete=True, spans_packets=[3], tcp_stream_id='stream_1', record_offset=0), TLSRecordInfo(packet_number=4, content_type=23, version=(3, 3), length=1000, is_complete=True, spans_packets=[4], tcp_stream_id='stream_1', record_offset=0), TLSRecordInfo(packet_number=5, content_type=24, version=(3, 3), length=30, is_complete=True, spans_packets=[5], tcp_stream_id='stream_1', record_offset=0), TLSRecordInfo(packet_number=6, content_type=23, version=(3, 3), length=2000, is_complete=False, spans_packets=[6, 7], tcp_stream_id='stream_2', record_offset=0), TLSRecordInfo(packet_number=8, content_type=23, version=(3, 3), length=800, is_complete=True, spans_packets=[8], tcp_stream_id='stream_3', record_offset=0), TLSRecordInfo(packet_number=9, content_type=22, version=(3, 3), length=150, is_complete=True, spans_packets=[9], tcp_stream_id='stream_3', record_offset=0)])">tests/integration/test_phase1_day7_component_integration.py:274: in test_end_to_end_processing_simulation
    assert len(mask_rules) &lt;= len(tls_records)  # 规则数不应超过记录数
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AssertionError: assert 9 &lt;= 8
E    +  where 9 = len([MaskRule(packet_number=1, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=15, mask_offset=0, mask_length=0, action=&lt;MaskAction.KEEP_ALL: 'keep_all'&gt;, reason='TLS-20 \u534f\u8bae\u5b8c\u5168\u4fdd\u7559\u7b56\u7565', tls_record_type=20), MaskRule(packet_number=2, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=20, mask_offset=0, mask_length=0, action=&lt;MaskAction.KEEP_ALL: 'keep_all'&gt;, reason='TLS-21 \u534f\u8bae\u5b8c\u5168\u4fdd\u7559\u7b56\u7565', tls_record_type=21), MaskRule(packet_number=3, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=205, mask_offset=0, mask_length=0, action=&lt;MaskAction.KEEP_ALL: 'keep_all'&gt;, reason='TLS-22 \u534f\u8bae\u5b8c\u5168\u4fdd\u7559\u7b56\u7565', tls_record_type=22), MaskRule(packet_number=4, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=1005, mask_offset=5, mask_length=1000, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23), MaskRule(packet_number=5, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=35, mask_offset=0, mask_length=0, action=&lt;MaskAction.KEEP_ALL: 'keep_all'&gt;, reason='TLS-24 \u534f\u8bae\u5b8c\u5168\u4fdd\u7559\u7b56\u7565', tls_record_type=24), MaskRule(packet_number=6, tcp_stream_id='stream_2', tls_record_offset=0, tls_record_length=2005, mask_offset=5, mask_length=2000, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u91cd\u7ec4\u5305\u63a9\u7801\uff1a\u4fdd\u75595\u5b57\u8282\u5934\u90e8\uff0c\u63a9\u78012000\u5b57\u8282\u8f7d\u8377 (\u8de8\u5305[6, 7])', tls_record_type=23), MaskRule(packet_number=7, tcp_stream_id='stream_2', tls_record_offset=0, tls_record_length=0, mask_offset=0, mask_length=-1, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u4e2d\u95f4\u6bb5\u63a9\u7801\uff1a\u63a9\u7801\u6574\u4e2a\u8f7d\u8377 (\u5206\u6bb52/2, \u91cd\u7ec4\u5230\u53056)', tls_record_type=23), MaskRule(packet_number=8, tcp_stream_id='stream_3', tls_record_offset=0, tls_record_length=805, mask_offset=5, mask_length=800, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23), MaskRule(packet_number=9, tcp_stream_id='stream_3', tls_record_offset=0, tls_record_length=155, mask_offset=0, mask_length=0, action=&lt;MaskAction.KEEP_ALL: 'keep_all'&gt;, reason='TLS-22 \u534f\u8bae\u5b8c\u5168\u4fdd\u7559\u7b56\u7565', tls_record_type=22)])
E    +  and   8 = len([TLSRecordInfo(packet_number=1, content_type=20, version=(3, 3), length=10, is_complete=True, spans_packets=[1], tcp_stream_id='stream_1', record_offset=0), TLSRecordInfo(packet_number=2, content_type=21, version=(3, 3), length=15, is_complete=True, spans_packets=[2], tcp_stream_id='stream_1', record_offset=0), TLSRecordInfo(packet_number=3, content_type=22, version=(3, 3), length=200, is_complete=True, spans_packets=[3], tcp_stream_id='stream_1', record_offset=0), TLSRecordInfo(packet_number=4, content_type=23, version=(3, 3), length=1000, is_complete=True, spans_packets=[4], tcp_stream_id='stream_1', record_offset=0), TLSRecordInfo(packet_number=5, content_type=24, version=(3, 3), length=30, is_complete=True, spans_packets=[5], tcp_stream_id='stream_1', record_offset=0), TLSRecordInfo(packet_number=6, content_type=23, version=(3, 3), length=2000, is_complete=False, spans_packets=[6, 7], tcp_stream_id='stream_2', record_offset=0), TLSRecordInfo(packet_number=8, content_type=23, version=(3, 3), length=800, is_complete=True, spans_packets=[8], tcp_stream_id='stream_3', record_offset=0), TLSRecordInfo(packet_number=9, content_type=22, version=(3, 3), length=150, is_complete=True, spans_packets=[9], tcp_stream_id='stream_3', record_offset=0)])</failure></testcase><testcase classname="tests.unit.test_enhanced_trim_core_models.TestMaskSpec" name="test_mask_range_boundary" time="0.001" /><testcase classname="tests.integration.test_phase2_day12_core_integration.TestPhase2Day12CoreIntegration" name="test_07_processor_interface_compatibility" time="0.002"><failure message="FileNotFoundError: 输入文件不存在: test.pcap">tests/integration/test_phase2_day12_core_integration.py:338: in test_07_processor_interface_compatibility
    result = processor.process_file("test.pcap", "output.pcap")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:761: in process_file
    self.validate_inputs(input_path, output_path)
src/pktmask/core/processors/base_processor.py:92: in validate_inputs
    raise FileNotFoundError(f"输入文件不存在: {input_path}")
E   FileNotFoundError: 输入文件不存在: test.pcap</failure></testcase><testcase classname="tests.unit.test_enhanced_trim_core_models.TestMaskSpec" name="test_mask_range_invalid_params" time="0.000" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestMaskSpec" name="test_mask_spec_factory_functions" time="0.000" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestStreamMaskTable" name="test_add_entry_basic" time="0.000" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestStreamMaskTable" name="test_add_mask_range_convenience" time="0.000" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestStreamMaskTable" name="test_export_to_dict" time="0.001" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestStreamMaskTable" name="test_finalize_and_merge" time="0.002" /><testcase classname="tests.integration.test_phase2_day12_core_integration" name="test_day12_core_integration_summary" time="0.001" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestStreamMaskTable" name="test_invalid_entry" time="0.074" /><testcase classname="tests.integration.test_phase1_day7_component_integration.TestPhase1Day7ComponentIntegration" name="test_error_handling_integration" time="0.003"><failure message="AssertionError: assert &lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt; == &lt;MaskAction.KEEP_ALL: 'keep_all'&gt;&#10; +  where &lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt; = MaskRule(packet_number=1, tcp_stream_id='test_stream', tls_record_offset=0, tls_record_length=6, mask_offset=5, mask_length=1, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23).action&#10; +  and   &lt;MaskAction.KEEP_ALL: 'keep_all'&gt; = MaskAction.KEEP_ALL">tests/integration/test_phase1_day7_component_integration.py:308: in test_error_handling_integration
    assert boundary_rules[0].action == MaskAction.KEEP_ALL  # 小于头部长度，完全保留
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AssertionError: assert &lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt; == &lt;MaskAction.KEEP_ALL: 'keep_all'&gt;
E    +  where &lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt; = MaskRule(packet_number=1, tcp_stream_id='test_stream', tls_record_offset=0, tls_record_length=6, mask_offset=5, mask_length=1, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23).action
E    +  and   &lt;MaskAction.KEEP_ALL: 'keep_all'&gt; = MaskAction.KEEP_ALL</failure></testcase><testcase classname="tests.unit.test_enhanced_trim_core_models.TestStreamMaskTable" name="test_lookup_basic" time="0.001" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestStreamMaskTable" name="test_lookup_multiple" time="0.003" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestStreamMaskTable" name="test_statistics" time="0.001" /><testcase classname="tests.integration.test_phase2_day12_gui_integration.TestPhase2Day12GUIIntegration" name="test_01_gui_initialization_with_enhanced_processor" time="0.015"><error message="failed on setup with &quot;TypeError: ProcessorResult.__init__() got an unexpected keyword argument 'input_file'&quot;">tests/integration/test_phase2_day12_gui_integration.py:104: in mock_enhanced_processor
    processor.process_file.return_value = ProcessorResult(
E   TypeError: ProcessorResult.__init__() got an unexpected keyword argument 'input_file'</error></testcase><testcase classname="tests.unit.test_enhanced_trim_core_models.TestTrimmerConfig" name="test_config_to_dict" time="0.000" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestTrimmerConfig" name="test_config_validation" time="0.000" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestTrimmerConfig" name="test_default_config" time="0.001" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestExecutionResult" name="test_basic_lifecycle" time="0.002" /><testcase classname="tests.integration.test_phase2_day12_gui_integration.TestPhase2Day12GUIIntegration" name="test_02_pipeline_config_building" time="0.001"><error message="failed on setup with &quot;TypeError: ProcessorResult.__init__() got an unexpected keyword argument 'input_file'&quot;">tests/integration/test_phase2_day12_gui_integration.py:104: in mock_enhanced_processor
    processor.process_file.return_value = ProcessorResult(
E   TypeError: ProcessorResult.__init__() got an unexpected keyword argument 'input_file'</error></testcase><testcase classname="tests.unit.test_enhanced_trim_core_models.TestExecutionResult" name="test_error_and_warning_handling" time="0.001" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestExecutionResult" name="test_failed_execution" time="0.001" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestExecutionResult" name="test_stage_lifecycle" time="0.002" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestExecutionResult" name="test_stage_management" time="0.000" /><testcase classname="tests.unit.test_enhanced_trim_core_models.TestExecutionResult" name="test_summary_and_report" time="0.000" /><testcase classname="tests.integration.test_phase1_day7_component_integration.TestPhase1Day7ComponentIntegration" name="test_boundary_conditions_integration" time="0.008"><failure message="AssertionError: assert &lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt; == &lt;MaskAction.KEEP_ALL: 'keep_all'&gt;&#10; +  where &lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt; = MaskRule(packet_number=1, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=10, mask_offset=5, mask_length=5, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23).action&#10; +  and   &lt;MaskAction.KEEP_ALL: 'keep_all'&gt; = MaskAction.KEEP_ALL">tests/integration/test_phase1_day7_component_integration.py:385: in test_boundary_conditions_integration
    assert min_rule.action == MaskAction.KEEP_ALL  # 刚好等于头部长度，完全保留
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AssertionError: assert &lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt; == &lt;MaskAction.KEEP_ALL: 'keep_all'&gt;
E    +  where &lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt; = MaskRule(packet_number=1, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=10, mask_offset=5, mask_length=5, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23).action
E    +  and   &lt;MaskAction.KEEP_ALL: 'keep_all'&gt; = MaskAction.KEEP_ALL</failure></testcase><testcase classname="tests.integration.test_enhanced_mask_stage_integration.TestMaskStageCompatibility" name="test_integration_with_existing_pipeline_events" time="0.002"><failure message="scapy.error.Scapy_Exception: No data could be read!">src/pktmask/core/pipeline/stages/mask_payload/stage.py:327: in _process_with_enhanced_mode
    return StageStats(
E   pydantic_core._pydantic_core.ValidationError: 2 validation errors for StageStats
E   packets_processed
E     Input should be a valid integer [type=int_type, input_value=&lt;Mock name='mock.execute_....get()' id='4677889936'&gt;, input_type=Mock]
E       For further information visit https://errors.pydantic.dev/2.11/v/int_type
E   packets_modified
E     Input should be a valid integer [type=int_type, input_value=&lt;Mock name='mock.execute_....get()' id='4677889936'&gt;, input_type=Mock]
E       For further information visit https://errors.pydantic.dev/2.11/v/int_type

During handling of the above exception, another exception occurred:
tests/integration/test_enhanced_mask_stage_integration.py:388: in test_integration_with_existing_pipeline_events
    result = stage.process_file(input_file.name, output_file.name)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/stages/mask_payload/stage.py:259: in process_file
    return self._process_with_enhanced_mode(input_path, output_path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/stages/mask_payload/stage.py:349: in _process_with_enhanced_mode
    return self._process_with_basic_mode_fallback(input_path, output_path, duration_ms, str(e))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/stages/mask_payload/stage.py:405: in _process_with_basic_mode_fallback
    packets: List[Packet] = rdpcap(str(input_path))
                            ^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/scapy/utils.py:1345: in rdpcap
    with PcapReader(filename) as fdesc:  # type: ignore
         ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/scapy/utils.py:1387: in __call__
    raise Scapy_Exception(
E   scapy.error.Scapy_Exception: No data could be read!</failure></testcase><testcase classname="tests.unit.test_fallback.TestFallbackRobustness" name="test_fallback_configuration" time="0.027" /><testcase classname="tests.integration.test_phase2_day12_gui_integration.TestPhase2Day12GUIIntegration" name="test_03_enhanced_processor_gui_workflow_integration" time="0.002"><error message="failed on setup with &quot;TypeError: ProcessorResult.__init__() got an unexpected keyword argument 'input_file'&quot;">tests/integration/test_phase2_day12_gui_integration.py:104: in mock_enhanced_processor
    processor.process_file.return_value = ProcessorResult(
E   TypeError: ProcessorResult.__init__() got an unexpected keyword argument 'input_file'</error></testcase><testcase classname="tests.integration.test_phase1_day7_component_integration.TestPhase1Day7ComponentIntegration" name="test_protocol_type_coverage_integration" time="0.004"><failure message="AssertionError: assert 50 == 45&#10; +  where 50 = MaskRule(packet_number=4, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=55, mask_offset=5, mask_length=50, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23).mask_length">tests/integration/test_phase1_day7_component_integration.py:457: in test_protocol_type_coverage_integration
    assert tls_23_rule.mask_length == 45  # 50-5
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AssertionError: assert 50 == 45
E    +  where 50 = MaskRule(packet_number=4, tcp_stream_id='stream_1', tls_record_offset=0, tls_record_length=55, mask_offset=5, mask_length=50, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23).mask_length</failure></testcase><testcase classname="tests.unit.test_fallback.TestFallbackRobustness" name="test_tshark_unavailable" time="0.007" /><testcase classname="tests.integration.test_phase1_day7_component_integration.TestPhase1Day7Acceptance" name="test_phase1_day7_acceptance_criteria" time="0.013" /><testcase classname="tests.unit.test_fallback.TestFallbackRobustness" name="test_fallback_mode_determination" time="0.001"><failure message="AssertionError: assert &lt;FallbackMode.ENHANCED_TRIMMER: 'enhanced_trimmer'&gt; == &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt;&#10; +  where &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt; = FallbackMode.MASK_STAGE">tests/unit/test_fallback.py:61: in test_fallback_mode_determination
    assert mode == FallbackMode.MASK_STAGE
E   AssertionError: assert &lt;FallbackMode.ENHANCED_TRIMMER: 'enhanced_trimmer'&gt; == &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt;
E    +  where &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt; = FallbackMode.MASK_STAGE</failure></testcase><testcase classname="tests.integration.test_phase2_day12_gui_integration.TestPhase2Day12GUIIntegration" name="test_04_gui_error_handling_with_fallback" time="0.002"><error message="failed on setup with &quot;TypeError: ProcessorResult.__init__() got an unexpected keyword argument 'input_file'&quot;">tests/integration/test_phase2_day12_gui_integration.py:104: in mock_enhanced_processor
    processor.process_file.return_value = ProcessorResult(
E   TypeError: ProcessorResult.__init__() got an unexpected keyword argument 'input_file'</error></testcase><testcase classname="tests.unit.test_fallback.TestFallbackRobustness" name="test_enhanced_trimmer_fallback" time="0.002" /><testcase classname="tests.unit.test_fallback.TestFallbackRobustness" name="test_mask_stage_fallback" time="0.004" /><testcase classname="tests.unit.test_fallback.TestFallbackRobustness" name="test_comprehensive_robustness" time="1.865"><failure message="AssertionError: 健壮性验证未达到100%: 60.0%&#10;assert 60.0 == 100.0">tests/unit/test_fallback.py:154: in test_comprehensive_robustness
    assert robustness_rate == 100.0, f"健壮性验证未达到100%: {robustness_rate}%"
E   AssertionError: 健壮性验证未达到100%: 60.0%
E   assert 60.0 == 100.0</failure></testcase><testcase classname="tests.integration.test_phase1_integration_fixed.TestPhase1Integration" name="test_data_structures_compatibility" time="0.003" /><testcase classname="tests.integration.test_phase1_integration_fixed.TestPhase1Integration" name="test_multi_stage_executor_basic_functionality" time="0.004" /><testcase classname="tests.integration.test_phase2_day12_gui_integration.TestPhase2Day12GUIIntegration" name="test_05_gui_component_state_preservation" time="0.005"><error message="failed on setup with &quot;TypeError: ProcessorResult.__init__() got an unexpected keyword argument 'input_file'&quot;">tests/integration/test_phase2_day12_gui_integration.py:104: in mock_enhanced_processor
    processor.process_file.return_value = ProcessorResult(
E   TypeError: ProcessorResult.__init__() got an unexpected keyword argument 'input_file'</error></testcase><testcase classname="tests.integration.test_phase1_integration_fixed.TestPhase1Integration" name="test_event_system_integration" time="0.002" /><testcase classname="tests.integration.test_phase2_day12_gui_integration.TestPhase2Day12GUIIntegration" name="test_06_enhanced_processor_config_access" time="0.001" /><testcase classname="tests.integration.test_phase1_integration_fixed.TestPhase1Integration" name="test_error_handling_integration" time="0.002" /><testcase classname="tests.integration.test_phase1_integration_fixed.TestPhase1Integration" name="test_processor_registry_extensibility" time="0.002" /><testcase classname="tests.integration.test_phase1_integration_fixed.TestPhase1Integration" name="test_configuration_compatibility" time="0.005" /><testcase classname="tests.integration.test_phase1_integration_fixed.TestPhase1Integration" name="test_resource_management" time="0.003" /><testcase classname="tests.integration.test_phase1_integration_fixed.TestPhase1Integration" name="test_performance_baseline" time="0.002" /><testcase classname="tests.integration.test_phase2_day12_gui_integration.TestPhase2Day12GUIIntegration" name="test_07_gui_progress_event_handling" time="0.002"><error message="failed on setup with &quot;TypeError: ProcessorResult.__init__() got an unexpected keyword argument 'input_file'&quot;">tests/integration/test_phase2_day12_gui_integration.py:104: in mock_enhanced_processor
    processor.process_file.return_value = ProcessorResult(
E   TypeError: ProcessorResult.__init__() got an unexpected keyword argument 'input_file'</error></testcase><testcase classname="tests.integration.test_phase2_1_integration.TestTSharkPreprocessorIntegration" name="test_config_system_integration" time="0.001" /><testcase classname="tests.integration.test_phase2_day12_gui_integration" name="test_day12_gui_integration_summary" time="0.001" /><testcase classname="tests.integration.test_phase2_1_integration.TestTSharkPreprocessorIntegration" name="test_multi_stage_executor_integration" time="0.002" /><testcase classname="tests.integration.test_phase2_1_integration.TestTSharkPreprocessorIntegration" name="test_initialization_integration" time="0.004" /><testcase classname="tests.integration.test_phase2_1_integration.TestTSharkPreprocessorIntegration" name="test_stage_context_integration" time="0.006" /><testcase classname="tests.integration.test_phase2_day12_gui_integration_mock.TestPhase2Day12GUIIntegrationMock" name="test_01_pipeline_manager_config_building_integration" time="0.005"><failure message="AttributeError: &lt;module 'pktmask.core.processors.registry' from '/Users/ricky/Downloads/PktMask/src/pktmask/core/processors/registry.py'&gt; does not have the attribute 'get_processor'">tests/integration/test_phase2_day12_gui_integration_mock.py:110: in test_01_pipeline_manager_config_building_integration
    with patch('pktmask.core.processors.registry.get_processor') as mock_get_processor:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'pktmask.core.processors.registry' from '/Users/ricky/Downloads/PktMask/src/pktmask/core/processors/registry.py'&gt; does not have the attribute 'get_processor'</failure></testcase><testcase classname="tests.integration.test_phase2_1_integration.TestTSharkPreprocessorIntegration" name="test_event_system_integration" time="0.004" /><testcase classname="tests.integration.test_phase2_1_integration.TestTSharkPreprocessorIntegration" name="test_temporary_file_management" time="0.002" /><testcase classname="tests.integration.test_phase2_1_integration.TestTSharkPreprocessorIntegration" name="test_error_handling_integration" time="0.005"><failure message="assert True == False&#10; +  where True = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x12841e490&gt;.success">tests/integration/test_phase2_1_integration.py:327: in test_error_handling_integration
    assert result.success == False
E   assert True == False
E    +  where True = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x12841e490&gt;.success</failure></testcase><testcase classname="tests.integration.test_phase2_1_integration.TestTSharkPreprocessorIntegration" name="test_processor_result_compatibility" time="0.001" /><testcase classname="tests.integration.test_phase2_1_integration.TestTSharkPreprocessorIntegration" name="test_configuration_defaults_integration" time="0.001" /><testcase classname="tests.integration.test_phase2_1_integration.TestTSharkPreprocessorIntegration" name="test_resource_cleanup_integration" time="0.001" /><testcase classname="tests.integration.test_phase2_2_integration.TestPhase22Integration" name="test_phase2_1_to_phase2_2_data_flow" time="0.379"><failure message="assert False&#10; +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x12821f890&gt;.success">tests/integration/test_phase2_2_integration.py:126: in test_phase2_1_to_phase2_2_data_flow
    assert result.success
E   assert False
E    +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x12821f890&gt;.success</failure></testcase><testcase classname="tests.integration.test_phase2_day14_comprehensive_e2e.TestPhase2Day14ComprehensiveE2E" name="test_e2e_configuration_integration" time="0.004" /><testcase classname="tests.integration.test_phase2_day14_comprehensive_e2e.TestPhase2Day14ComprehensiveE2E" name="test_e2e_error_handling_and_recovery" time="0.196"><failure message="Exception: TShark analysis failed">tests/integration/test_phase2_day14_comprehensive_e2e.py:247: in test_e2e_error_handling_and_recovery
    result = processor.process_file(self.input_file, self.output_file)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:775: in process_file
    result = self._process_with_core_pipeline(input_path, output_path)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:854: in _process_with_core_pipeline
    tls_records = self._tshark_analyzer.analyze_file(input_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1169: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1173: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1228: in _execute_mock_call
    raise effect
E   Exception: TShark analysis failed</failure></testcase><testcase classname="tests.integration.test_phase2_2_integration_simple.TestPhase22IntegrationSimple" name="test_performance_integration" time="0.466"><failure message="assert False&#10; +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x126fa6520&gt;.success">tests/integration/test_phase2_2_integration_simple.py:275: in test_performance_integration
    assert result.success
E   assert False
E    +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x126fa6520&gt;.success</failure></testcase><testcase classname="tests.integration.test_phase1_2_comprehensive_integration.TestPhase12ComprehensiveIntegration" name="test_complete_pipeline_integration" time="1.522"><failure message="pktmask.core.trim.exceptions.StageExecutionError: Stage 'EnhancedPySharkAnalyzer' 执行失败: 未知错误 (详情: stage_name=EnhancedPySharkAnalyzer, stage_index=1, total_stages=3)">tests/integration/test_phase1_2_comprehensive_integration.py:150: in test_complete_pipeline_integration
    result = executor.execute_pipeline(self.input_file, self.output_file)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/trim/multi_stage_executor.py:143: in execute_pipeline
    raise StageExecutionError(
E   pktmask.core.trim.exceptions.StageExecutionError: Stage 'EnhancedPySharkAnalyzer' 执行失败: 未知错误 (详情: stage_name=EnhancedPySharkAnalyzer, stage_index=1, total_stages=3)</failure></testcase><testcase classname="tests.integration.test_phase2_day12_gui_integration_mock.TestPhase2Day12GUIIntegrationMock" name="test_02_pipeline_executor_creation_integration" time="0.005"><failure message="AttributeError: &lt;module 'pktmask.core.processors.pipeline_adapter' from '/Users/ricky/Downloads/PktMask/src/pktmask/core/processors/pipeline_adapter.py'&gt; does not have the attribute 'ProcessorStageAdapter'">tests/integration/test_phase2_day12_gui_integration_mock.py:149: in test_02_pipeline_executor_creation_integration
    with patch('pktmask.core.processors.pipeline_adapter.ProcessorStageAdapter') as MockAdapter:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'pktmask.core.processors.pipeline_adapter' from '/Users/ricky/Downloads/PktMask/src/pktmask/core/processors/pipeline_adapter.py'&gt; does not have the attribute 'ProcessorStageAdapter'</failure></testcase><testcase classname="tests.integration.test_phase2_day12_gui_integration_mock.TestPhase2Day12GUIIntegrationMock" name="test_03_enhanced_processor_progress_event_handling" time="0.002" /><testcase classname="tests.integration.test_phase2_day12_gui_integration_mock.TestPhase2Day12GUIIntegrationMock" name="test_04_mask_stage_processor_adapter_integration" time="0.003"><failure message="AttributeError: &lt;module 'pktmask.core.processors.pipeline_adapter' from '/Users/ricky/Downloads/PktMask/src/pktmask/core/processors/pipeline_adapter.py'&gt; does not have the attribute 'ProcessorStageAdapter'">tests/integration/test_phase2_day12_gui_integration_mock.py:220: in test_04_mask_stage_processor_adapter_integration
    with patch('pktmask.core.processors.pipeline_adapter.ProcessorStageAdapter') as MockProcessorAdapter:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'pktmask.core.processors.pipeline_adapter' from '/Users/ricky/Downloads/PktMask/src/pktmask/core/processors/pipeline_adapter.py'&gt; does not have the attribute 'ProcessorStageAdapter'</failure></testcase><testcase classname="tests.integration.test_phase2_day12_gui_integration_mock.TestPhase2Day12GUIIntegrationMock" name="test_05_config_system_integration" time="0.001" /><testcase classname="tests.integration.test_phase2_day12_gui_integration_mock.TestPhase2Day12GUIIntegrationMock" name="test_06_error_handling_and_fallback_mechanism" time="0.003" /><testcase classname="tests.integration.test_phase2_day12_gui_integration_mock.TestPhase2Day12GUIIntegrationMock" name="test_07_processor_adapter_interface_compatibility" time="0.001"><failure message="AttributeError: &lt;module 'pktmask.core.processors.pipeline_adapter' from '/Users/ricky/Downloads/PktMask/src/pktmask/core/processors/pipeline_adapter.py'&gt; does not have the attribute 'ProcessorStageAdapter'">tests/integration/test_phase2_day12_gui_integration_mock.py:337: in test_07_processor_adapter_interface_compatibility
    with patch('pktmask.core.processors.pipeline_adapter.ProcessorStageAdapter') as MockAdapter:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'pktmask.core.processors.pipeline_adapter' from '/Users/ricky/Downloads/PktMask/src/pktmask/core/processors/pipeline_adapter.py'&gt; does not have the attribute 'ProcessorStageAdapter'</failure></testcase><testcase classname="tests.integration.test_phase2_2_integration.TestPhase22Integration" name="test_multi_stage_executor_coordination" time="0.013"><failure message="AssertionError: assert 'EnhancedPySharkAnalyzer' == 'PyShark分析器'&#10;  &#10;  #x1B[0m#x1B[91m- PyShark分析器#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ EnhancedPySharkAnalyzer#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/integration/test_phase2_2_integration.py:233: in test_multi_stage_executor_coordination
    assert executor.stages[1].name == "PyShark分析器"
E   AssertionError: assert 'EnhancedPySharkAnalyzer' == 'PyShark分析器'
E     
E     #x1B[0m#x1B[91m- PyShark分析器#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ EnhancedPySharkAnalyzer#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.integration.test_phase2_2_integration.TestPhase22Integration" name="test_event_system_integration" time="0.938"><failure message="assert &lt;PipelineEvents.STEP_END: 13&gt; in [&lt;PipelineEvents.STEP_START: 11&gt;, &lt;PipelineEvents.ERROR: 19&gt;]&#10; +  where &lt;PipelineEvents.STEP_END: 13&gt; = PipelineEvents.STEP_END">tests/integration/test_phase2_2_integration.py:290: in test_event_system_integration
    assert PipelineEvents.STEP_END in event_types
E   assert &lt;PipelineEvents.STEP_END: 13&gt; in [&lt;PipelineEvents.STEP_START: 11&gt;, &lt;PipelineEvents.ERROR: 19&gt;]
E    +  where &lt;PipelineEvents.STEP_END: 13&gt; = PipelineEvents.STEP_END</failure></testcase><testcase classname="tests.integration.test_phase2_day14_comprehensive_e2e.TestPhase2Day14ComprehensiveE2E" name="test_e2e_pipeline_integration_simulation" time="0.002" /><testcase classname="tests.integration.test_phase2_day14_comprehensive_e2e.TestPhase2Day14ComprehensiveE2E" name="test_e2e_real_tls_file_simulation" time="1.239"><failure message="AttributeError: 'dict' object has no attribute 'content_type'">tests/integration/test_phase2_day14_comprehensive_e2e.py:413: in test_e2e_real_tls_file_simulation
    result = processor.process_file(self.input_file, self.output_file)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:775: in process_file
    result = self._process_with_core_pipeline(input_path, output_path)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:861: in _process_with_core_pipeline
    tls_23_records = [r for r in tls_records if r.content_type == 23]
                                                ^^^^^^^^^^^^^^
E   AttributeError: 'dict' object has no attribute 'content_type'</failure></testcase><testcase classname="tests.integration.test_phase2_day12_gui_integration_mock" name="test_day12_gui_integration_mock_summary" time="0.001" /><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestErrorClassificationAndContext" name="test_error_category_enum_completeness" time="0.002" /><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestErrorClassificationAndContext" name="test_error_severity_hierarchy" time="0.001" /><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestErrorClassificationAndContext" name="test_error_context_creation_with_full_info" time="0.146" /><testcase classname="tests.integration.test_phase2_3_integration.TestPhase2_3Integration" name="test_cleanup_functionality" time="0.002"><failure message="AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_mask_table'">tests/integration/test_phase2_3_integration.py:252: in test_cleanup_functionality
    self.assertIsNone(self.rewriter._mask_table)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_mask_table'</failure></testcase><testcase classname="tests.integration.test_phase2_3_integration.TestPhase2_3Integration" name="test_configuration_options" time="0.001" /><testcase classname="tests.integration.test_phase2_3_integration.TestPhase2_3Integration" name="test_duration_estimation" time="0.005"><failure message="AssertionError: 0.5 not greater than 0.5">tests/integration/test_phase2_3_integration.py:269: in test_duration_estimation
    self.assertGreater(large_duration, duration)
E   AssertionError: 0.5 not greater than 0.5</failure></testcase><testcase classname="tests.integration.test_phase2_3_integration.TestPhase2_3Integration" name="test_empty_mask_table_processing" time="0.003"><failure message="AssertionError: False is not true">tests/integration/test_phase2_3_integration.py:143: in test_empty_mask_table_processing
    self.assertTrue(result.success)
E   AssertionError: False is not true</failure></testcase><testcase classname="tests.integration.test_phase2_3_integration.TestPhase2_3Integration" name="test_error_handling" time="0.001"><failure message="AttributeError: 'StageContext' object has no attribute 'masking_recipe'">tests/integration/test_phase2_3_integration.py:234: in test_error_handling
    self.assertFalse(self.rewriter.validate_inputs(self.context))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/trim/stages/tcp_payload_masker_adapter.py:130: in validate_inputs
    if context.masking_recipe is None:
       ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'StageContext' object has no attribute 'masking_recipe'</failure></testcase><testcase classname="tests.integration.test_phase2_3_integration.TestPhase2_3Integration" name="test_initialization" time="0.001" /><testcase classname="tests.integration.test_phase2_3_integration.TestPhase2_3Integration" name="test_input_validation" time="0.025"><failure message="AttributeError: 'StageContext' object has no attribute 'masking_recipe'">tests/integration/test_phase2_3_integration.py:121: in test_input_validation
    self.assertFalse(self.rewriter.validate_inputs(self.context))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/trim/stages/tcp_payload_masker_adapter.py:130: in validate_inputs
    if context.masking_recipe is None:
       ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'StageContext' object has no attribute 'masking_recipe'</failure></testcase><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestErrorClassificationAndContext" name="test_error_context_mitigation_suggestions" time="0.006" /><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestErrorTrackingAndAnalysis" name="test_error_recording_and_pattern_detection" time="0.003" /><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestErrorTrackingAndAnalysis" name="test_recent_error_trend_analysis" time="0.014" /><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestRetryMechanism" name="test_retry_config_validation" time="0.053" /><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestRetryMechanism" name="test_should_retry_logic" time="0.151" /><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestRetryMechanism" name="test_retry_delay_calculation" time="0.025" /><testcase classname="tests.integration.test_phase2_3_integration.TestPhase2_3Integration" name="test_mask_table_integration" time="0.011"><failure message="AssertionError: False is not true">tests/integration/test_phase2_3_integration.py:168: in test_mask_table_integration
    self.assertTrue(result.success)
E   AssertionError: False is not true</failure></testcase><testcase classname="tests.integration.test_phase2_3_integration.TestPhase2_3Integration" name="test_processing_statistics" time="0.004" /><testcase classname="tests.integration.test_phase2_3_integration.TestPhase2_3Integration" name="test_scapy_availability" time="0.003" /><testcase classname="tests.integration.test_phase2_3_integration.TestPhase2_3Integration" name="test_tool_availability_check" time="0.003"><failure message="AssertionError: 'scapy' not found in {}">tests/integration/test_phase2_3_integration.py:179: in test_tool_availability_check
    self.assertIn('scapy', availability)
E   AssertionError: 'scapy' not found in {}</failure></testcase><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestRetryMechanism" name="test_execute_with_retry_success_after_failure" time="0.003" /><testcase classname="tests.integration.test_phase2_day13_error_handling_enhancement.TestRetryMechanism" name="test_execute_with_retry_all_attempts_fail" time="0.004" /><testcase classname="tests.unit.test_phase1_2_multi_stage_executor.TestStageContext" name="test_temp_file_management" time="0.003" /><testcase classname="tests.unit.test_phase1_2_multi_stage_executor.TestBaseStage" name="test_stage_initialization" time="0.007" /><testcase classname="tests.unit.test_phase1_2_multi_stage_executor.TestBaseStage" name="test_stage_initialization_process" time="0.002" /><testcase classname="tests.unit.test_phase1_2_multi_stage_executor.TestBaseStage" name="test_stage_progress_callback" time="0.002" /><testcase classname="tests.unit.test_phase1_2_multi_stage_executor.TestBaseStage" name="test_stage_estimated_duration" time="0.006" /><testcase classname="tests.unit.test_phase1_2_multi_stage_executor.TestMultiStageExecutor" name="test_executor_creation" time="0.002" /><testcase classname="tests.unit.test_phase1_2_multi_stage_executor.TestMultiStageExecutor" name="test_stage_registration" time="0.003" /><testcase classname="tests.unit.test_phase1_2_multi_stage_executor.TestMultiStageExecutor" name="test_successful_pipeline_execution" time="0.116" /><testcase classname="tests.integration.test_phase2_acceptance" name="test_phase2_acceptance_basic[tests/data/tls/tls_plainip.pcap]" time="0.007"><failure message="AssertionError: 输入文件不存在: tests/data/tls/tls_plainip.pcap&#10;assert False&#10; +  where False = exists()&#10; +    where exists = PosixPath('tests/data/tls/tls_plainip.pcap').exists">tests/integration/test_phase2_acceptance.py:26: in test_phase2_acceptance_basic
    assert in_path.exists(), f"输入文件不存在: {in_path}"
E   AssertionError: 输入文件不存在: tests/data/tls/tls_plainip.pcap
E   assert False
E    +  where False = exists()
E    +    where exists = PosixPath('tests/data/tls/tls_plainip.pcap').exists</failure></testcase><testcase classname="tests.integration.test_phase2_acceptance" name="test_phase2_acceptance_basic[tests/data/tls/tls_vlan.pcap]" time="0.002"><failure message="AssertionError: 输入文件不存在: tests/data/tls/tls_vlan.pcap&#10;assert False&#10; +  where False = exists()&#10; +    where exists = PosixPath('tests/data/tls/tls_vlan.pcap').exists">tests/integration/test_phase2_acceptance.py:26: in test_phase2_acceptance_basic
    assert in_path.exists(), f"输入文件不存在: {in_path}"
E   AssertionError: 输入文件不存在: tests/data/tls/tls_vlan.pcap
E   assert False
E    +  where False = exists()
E    +    where exists = PosixPath('tests/data/tls/tls_vlan.pcap').exists</failure></testcase><testcase classname="tests.integration.test_phase2_day10_config_integration.TestPhase2Day10ConfigIntegration" name="test_tshark_enhanced_config_loading" time="0.012" /><testcase classname="tests.integration.test_phase2_day10_config_integration.TestPhase2Day10ConfigIntegration" name="test_processor_config_integration" time="0.013" /><testcase classname="tests.integration.test_phase2_day10_config_integration.TestPhase2Day10ConfigIntegration" name="test_config_dictionary_access" time="0.006" /><testcase classname="tests.integration.test_phase2_day10_config_integration.TestPhase2Day10ConfigIntegration" name="test_default_config_fallback" time="0.002" /><testcase classname="tests.integration.test_phase2_day10_config_integration.TestPhase2Day10ConfigIntegration" name="test_config_validation" time="0.006" /><testcase classname="tests.integration.test_phase2_day11_integration_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_tshark_unavailable_fallback_to_enhanced_trimmer" time="0.032"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/integration/test_phase2_day11_integration_fallback_robustness.py:109: in test_tshark_unavailable_fallback_to_enhanced_trimmer
    result = processor.process_file(str(self.test_input_file), str(self.test_output_file))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.unit.test_phase1_2_multi_stage_executor.TestMultiStageExecutor" name="test_failed_pipeline_execution" time="0.218" /><testcase classname="tests.integration.test_phase2_day11_integration_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_tshark_protocol_parse_error_fallback_to_mask_stage" time="0.005"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/integration/test_phase2_day11_integration_fallback_robustness.py:153: in test_tshark_protocol_parse_error_fallback_to_mask_stage
    result = processor.process_file(str(self.test_input_file), str(self.test_output_file))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.integration.test_phase2_day11_integration_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_multi_level_fallback_cascade" time="0.009"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/integration/test_phase2_day11_integration_fallback_robustness.py:197: in test_multi_level_fallback_cascade
    result = processor.process_file(str(self.test_input_file), str(self.test_output_file))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.integration.test_phase2_2_integration.TestPhase22Integration" name="test_error_handling_and_resource_management" time="0.005"><failure message="TypeError: argument of type 'NoneType' is not iterable">tests/integration/test_phase2_2_integration.py:326: in test_error_handling_and_resource_management
    assert "PyShark分析失败" in result.error
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: argument of type 'NoneType' is not iterable</failure></testcase><testcase classname="tests.integration.test_phase2_2_integration.TestPhase22Integration" name="test_performance_and_memory_usage" time="0.826"><failure message="assert False&#10; +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x12840ce50&gt;.success">tests/integration/test_phase2_2_integration.py:404: in test_performance_and_memory_usage
    assert result.success
E   assert False
E    +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x12840ce50&gt;.success</failure></testcase><testcase classname="tests.unit.test_phase1_2_multi_stage_executor.TestMultiStageExecutor" name="test_empty_pipeline_execution" time="0.001" /><testcase classname="tests.integration.test_phase2_day11_integration_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_fallback_statistics_accuracy" time="0.003"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/integration/test_phase2_day11_integration_fallback_robustness.py:230: in test_fallback_statistics_accuracy
    result = processor.process_file(str(test_input), str(test_output))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.unit.test_phase1_2_multi_stage_executor.TestMultiStageExecutor" name="test_progress_tracking" time="0.004" /><testcase classname="tests.unit.test_phase1_2_multi_stage_executor.TestMultiStageExecutor" name="test_execution_summary" time="0.003" /><testcase classname="tests.unit.test_phase1_2_multi_stage_executor.TestStageResultCollection" name="test_result_collection_operations" time="0.001" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestMaskEntry" name="test_create_valid_entry" time="0.001" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestMaskEntry" name="test_invalid_sequence_numbers" time="0.001" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestMaskEntry" name="test_overlaps_with" time="0.000" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestMaskEntry" name="test_contains_range" time="0.000" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestMaskEntry" name="test_intersects_range" time="0.000" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestMaskEntry" name="test_get_intersection" time="0.002" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestMaskEntry" name="test_get_description" time="0.002" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestSequenceMatchResult" name="test_create_match_result" time="0.000" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestSequenceMatchResult" name="test_no_match_result" time="0.002" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestSequenceMaskTable" name="test_create_table" time="0.000" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestSequenceMaskTable" name="test_add_entry" time="0.002" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestSequenceMaskTable" name="test_add_mask_range" time="0.001" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestSequenceMaskTable" name="test_add_entry_after_finalize" time="0.001" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestSequenceMaskTable" name="test_match_sequence_range_no_stream" time="0.001" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestSequenceMaskTable" name="test_match_sequence_range_basic" time="0.001" /><testcase classname="tests.integration.test_phase2_day11_integration_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_resource_cleanup_during_fallback" time="0.003"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/integration/test_phase2_day11_integration_fallback_robustness.py:262: in test_resource_cleanup_during_fallback
    result = processor.process_file(str(self.test_input_file), str(self.test_output_file))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestSequenceMaskTable" name="test_match_sequence_range_multiple_entries" time="0.004" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestSequenceMaskTable" name="test_lookup_masks" time="0.002" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestSequenceMaskTable" name="test_finalize_and_merge" time="0.002" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestSequenceMaskTable" name="test_merge_different_types_not_merged" time="0.003" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestSequenceMaskTable" name="test_get_stream_coverage" time="0.002" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestSequenceMaskTable" name="test_clear" time="0.003" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestSequenceMaskTable" name="test_get_statistics" time="0.001" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestSequenceMaskTable" name="test_export_to_dict" time="0.000" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestComplexScenarios" name="test_tcp_sequence_wraparound_scenario" time="0.000" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestComplexScenarios" name="test_tls_application_data_scenario" time="0.000" /><testcase classname="tests.unit.test_phase1_sequence_mask_table.TestComplexScenarios" name="test_multiple_streams_scenario" time="0.000" /><testcase classname="tests.unit.test_phase1_tcp_stream.TestConnectionDirection" name="test_direction_values" time="0.000" /><testcase classname="tests.unit.test_phase1_tcp_stream.TestTCPConnection" name="test_create_valid_connection" time="0.000" /><testcase classname="tests.unit.test_phase1_tcp_stream.TestTCPConnection" name="test_invalid_ip_address" time="0.001" /><testcase classname="tests.unit.test_phase2_day11_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_7_concurrent_access_safety" time="0.017"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/unit/test_phase2_day11_fallback_robustness.py:251: in test_7_concurrent_access_safety
    results = [future.result() for future in futures]
               ^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/concurrent/futures/_base.py:449: in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/concurrent/futures/thread.py:59: in run
    result = self.fn(*self.args, **self.kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_phase2_day11_fallback_robustness.py:246: in process_file_wrapper
    return processor.process_file(str(self.test_input_file), str(self.test_output_file))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.integration.test_phase1_2_comprehensive_integration.TestPhase12ComprehensiveIntegration" name="test_data_flow_validation" time="1.251"><failure message="assert False&#10; +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x116ca76f0&gt;.success">tests/integration/test_phase1_2_comprehensive_integration.py:209: in test_data_flow_validation
    assert pyshark_result.success
E   assert False
E    +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x116ca76f0&gt;.success</failure></testcase><testcase classname="tests.integration.test_phase2_day11_integration_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_fallback_disabled_error_handling" time="0.004"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/integration/test_phase2_day11_integration_fallback_robustness.py:287: in test_fallback_disabled_error_handling
    result = processor.process_file(str(self.test_input_file), str(self.test_output_file))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.unit.test_phase2_day11_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_8_tshark_timeout_handling" time="0.004" /><testcase classname="tests.unit.test_phase2_day11_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_9_complete_acceptance_test" time="0.003"><failure message="AssertionError: assert &lt;FallbackMode.ENHANCED_TRIMMER: 'enhanced_trimmer'&gt; == &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt;&#10; +  where &lt;FallbackMode.ENHANCED_TRIMMER: 'enhanced_trimmer'&gt; = _determine_fallback_mode('\u534f\u8bae\u89e3\u6790\u5931\u8d25')&#10; +    where _determine_fallback_mode = &lt;pktmask.core.processors.tshark_enhanced_mask_processor.TSharkEnhancedMaskProcessor object at 0x11d7add60&gt;._determine_fallback_mode&#10; +  and   &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt; = FallbackMode.MASK_STAGE">tests/unit/test_phase2_day11_fallback_robustness.py:285: in test_9_complete_acceptance_test
    assert processor._determine_fallback_mode("协议解析失败") == FallbackMode.MASK_STAGE
E   AssertionError: assert &lt;FallbackMode.ENHANCED_TRIMMER: 'enhanced_trimmer'&gt; == &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt;
E    +  where &lt;FallbackMode.ENHANCED_TRIMMER: 'enhanced_trimmer'&gt; = _determine_fallback_mode('\u534f\u8bae\u89e3\u6790\u5931\u8d25')
E    +    where _determine_fallback_mode = &lt;pktmask.core.processors.tshark_enhanced_mask_processor.TSharkEnhancedMaskProcessor object at 0x11d7add60&gt;._determine_fallback_mode
E    +  and   &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt; = FallbackMode.MASK_STAGE</failure></testcase><testcase classname="tests.integration.test_phase2_day14_comprehensive_e2e.TestPhase2Day14ComprehensiveE2E" name="test_e2e_stage_statistics_tracking" time="1.704"><failure message="AttributeError: 'dict' object has no attribute 'content_type'">tests/integration/test_phase2_day14_comprehensive_e2e.py:305: in test_e2e_stage_statistics_tracking
    result = processor.process_file(self.input_file, self.output_file)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:775: in process_file
    result = self._process_with_core_pipeline(input_path, output_path)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:861: in _process_with_core_pipeline
    tls_23_records = [r for r in tls_records if r.content_type == 23]
                                                ^^^^^^^^^^^^^^
E   AttributeError: 'dict' object has no attribute 'content_type'</failure></testcase><testcase classname="tests.integration.test_phase2_day11_integration_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_concurrent_fallback_safety" time="0.013"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/integration/test_phase2_day11_integration_fallback_robustness.py:321: in test_concurrent_fallback_safety
    results = [future.result() for future in concurrent.futures.as_completed(futures)]
               ^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/concurrent/futures/_base.py:449: in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/concurrent/futures/thread.py:59: in run
    result = self.fn(*self.args, **self.kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/integration/test_phase2_day11_integration_fallback_robustness.py:316: in process_file_concurrent
    return processor.process_file(str(test_input), str(test_output))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.unit.test_phase2_day11_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_10_final_validation_test" time="0.007"><failure message="AssertionError: 错误上下文'协议解析失败'应该映射到FallbackMode.MASK_STAGE&#10;assert &lt;FallbackMode.ENHANCED_TRIMMER: 'enhanced_trimmer'&gt; == &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt;">tests/unit/test_phase2_day11_fallback_robustness.py:329: in test_10_final_validation_test
    assert mode == expected_mode, f"错误上下文'{error_context}'应该映射到{expected_mode}"
E   AssertionError: 错误上下文'协议解析失败'应该映射到FallbackMode.MASK_STAGE
E   assert &lt;FallbackMode.ENHANCED_TRIMMER: 'enhanced_trimmer'&gt; == &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt;</failure></testcase><testcase classname="tests.unit.test_phase2_day11_fallback_robustness" name="test_phase2_day11_acceptance_criteria" time="0.001"><failure message="AssertionError: assert &lt;FallbackMode.ENHANCED_TRIMMER: 'enhanced_trimmer'&gt; == &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt;&#10; +  where &lt;FallbackMode.ENHANCED_TRIMMER: 'enhanced_trimmer'&gt; = _determine_fallback_mode('\u534f\u8bae\u89e3\u6790\u5931\u8d25')&#10; +    where _determine_fallback_mode = &lt;pktmask.core.processors.tshark_enhanced_mask_processor.TSharkEnhancedMaskProcessor object at 0x11d7b97f0&gt;._determine_fallback_mode&#10; +  and   &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt; = FallbackMode.MASK_STAGE">tests/unit/test_phase2_day11_fallback_robustness.py:363: in test_phase2_day11_acceptance_criteria
    assert processor._determine_fallback_mode("协议解析失败") == FallbackMode.MASK_STAGE
E   AssertionError: assert &lt;FallbackMode.ENHANCED_TRIMMER: 'enhanced_trimmer'&gt; == &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt;
E    +  where &lt;FallbackMode.ENHANCED_TRIMMER: 'enhanced_trimmer'&gt; = _determine_fallback_mode('\u534f\u8bae\u89e3\u6790\u5931\u8d25')
E    +    where _determine_fallback_mode = &lt;pktmask.core.processors.tshark_enhanced_mask_processor.TSharkEnhancedMaskProcessor object at 0x11d7b97f0&gt;._determine_fallback_mode
E    +  and   &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt; = FallbackMode.MASK_STAGE</failure></testcase><testcase classname="tests.unit.test_phase2_pyshark_analyzer.TestPhase2PySharkAnalyzer" name="test_directional_stream_id_generation" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_generate_stream_id'">tests/unit/test_phase2_pyshark_analyzer.py:76: in test_directional_stream_id_generation
    tcp_stream_id = self.analyzer._generate_stream_id(
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_generate_stream_id'</failure></testcase><testcase classname="tests.unit.test_fallback" name="test_phase1_day5_acceptance" time="0.001" /><testcase classname="tests.unit.test_phase2_pyshark_analyzer.TestPhase2PySharkAnalyzer" name="test_error_handling" time="0.001"><failure message="AssertionError: RuntimeError not raised">tests/unit/test_phase2_pyshark_analyzer.py:450: in test_error_handling
    with self.assertRaises(RuntimeError):
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AssertionError: RuntimeError not raised</failure></testcase><testcase classname="tests.unit.test_fallback_robustness.TestFallbackMechanismRobustness" name="test_fallback_configuration_validation" time="0.003" /><testcase classname="tests.unit.test_fallback_robustness.TestFallbackMechanismRobustness" name="test_tshark_unavailable_detection" time="0.003" /><testcase classname="tests.unit.test_fallback_robustness.TestFallbackMechanismRobustness" name="test_enhanced_trimmer_fallback_success" time="0.002" /><testcase classname="tests.unit.test_fallback_robustness.TestFallbackMechanismRobustness" name="test_mask_stage_fallback_success" time="0.002" /><testcase classname="tests.unit.test_phase2_pyshark_analyzer.TestPhase2PySharkAnalyzer" name="test_execute_success" time="0.016"><failure message="AssertionError: False is not true">tests/unit/test_phase2_pyshark_analyzer.py:336: in test_execute_success
    self.assertTrue(result.success)
E   AssertionError: False is not true</failure></testcase><testcase classname="tests.unit.test_fallback_robustness.TestFallbackMechanismRobustness" name="test_fallback_mode_determination_logic" time="0.001"><failure message="AssertionError: 错误上下文'协议解析失败'应该映射到FallbackMode.MASK_STAGE&#10;assert &lt;FallbackMode.ENHANCED_TRIMMER: 'enhanced_trimmer'&gt; == &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt;">tests/unit/test_fallback_robustness.py:163: in test_fallback_mode_determination_logic
    assert mode == expected_mode, f"错误上下文'{error_context}'应该映射到{expected_mode}"
E   AssertionError: 错误上下文'协议解析失败'应该映射到FallbackMode.MASK_STAGE
E   assert &lt;FallbackMode.ENHANCED_TRIMMER: 'enhanced_trimmer'&gt; == &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt;</failure></testcase><testcase classname="tests.integration.test_phase2_day11_integration_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_tshark_timeout_fallback_handling" time="0.003"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/integration/test_phase2_day11_integration_fallback_robustness.py:353: in test_tshark_timeout_fallback_handling
    result = processor.process_file(str(self.test_input_file), str(self.test_output_file))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.unit.test_fallback_robustness.TestFallbackMechanismRobustness" name="test_complete_fallback_workflow_integration" time="0.007"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/unit/test_fallback_robustness.py:183: in test_complete_fallback_workflow_integration
    result = processor.process_file(str(self.test_input_file), str(self.test_output_file))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.unit.test_phase2_pyshark_analyzer.TestPhase2PySharkAnalyzer" name="test_initialization" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_streams'">tests/unit/test_phase2_pyshark_analyzer.py:69: in test_initialization
    self.assertEqual(len(self.analyzer._streams), 0)
                         ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_streams'</failure></testcase><testcase classname="tests.unit.test_phase2_pyshark_analyzer.TestPhase2PySharkAnalyzer" name="test_memory_cleanup" time="0.005"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_cleanup_memory'. Did you mean: '_cleanup_impl'?">tests/unit/test_phase2_pyshark_analyzer.py:440: in test_memory_cleanup
    self.analyzer._cleanup_memory()
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_cleanup_memory'. Did you mean: '_cleanup_impl'?</failure></testcase><testcase classname="tests.integration.test_phase2_day11_integration_fallback_robustness.TestPhase2Day11AcceptanceCriteria" name="test_phase2_day11_acceptance_complete" time="0.037"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/integration/test_phase2_day11_integration_fallback_robustness.py:416: in test_phase2_day11_acceptance_complete
    result = processor.process_file(str(self.test_input_file), str(self.test_output_file))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.unit.test_phase2_pyshark_analyzer.TestPhase2PySharkAnalyzer" name="test_protocol_strategy_framework" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_generate_preserve_all_masks'">tests/unit/test_phase2_pyshark_analyzer.py:359: in test_protocol_strategy_framework
    self.analyzer._generate_preserve_all_masks(
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_generate_preserve_all_masks'</failure></testcase><testcase classname="tests.unit.test_phase2_pyshark_analyzer.TestPhase2PySharkAnalyzer" name="test_sequence_mask_table_generation" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_streams'">tests/unit/test_phase2_pyshark_analyzer.py:231: in test_sequence_mask_table_generation
    self.analyzer._streams["TCP_192.168.1.1:12345_10.0.0.1:443_forward"] = StreamInfo(
    ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_streams'</failure></testcase><testcase classname="tests.unit.test_fallback_robustness.TestFallbackMechanismRobustness" name="test_all_fallback_processors_failure_handling" time="0.046"><failure message="AssertionError: assert '\u90fd\u5931\u8d25' in 'Primary processing pipeline and all fallback processors failed. Original error: primary_pipeline_failed'&#10; +  where 'Primary processing pipeline and all fallback processors failed. Original error: primary_pipeline_failed' = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x11c3e96e0&gt;.error">tests/unit/test_fallback_robustness.py:220: in test_all_fallback_processors_failure_handling
    assert "都失败" in result.error
E   AssertionError: assert '\u90fd\u5931\u8d25' in 'Primary processing pipeline and all fallback processors failed. Original error: primary_pipeline_failed'
E    +  where 'Primary processing pipeline and all fallback processors failed. Original error: primary_pipeline_failed' = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x11c3e96e0&gt;.error</failure></testcase><testcase classname="tests.unit.test_phase2_pyshark_analyzer.TestPhase2PySharkAnalyzer" name="test_sequence_range_calculation" time="0.008"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_update_stream_info'">tests/unit/test_phase2_pyshark_analyzer.py:149: in test_sequence_range_calculation
    self.analyzer._update_stream_info(packet)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_update_stream_info'</failure></testcase><testcase classname="tests.unit.test_phase2_pyshark_analyzer.TestPhase2PySharkAnalyzer" name="test_stream_info_update_with_direction" time="0.008"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_update_stream_info'">tests/unit/test_phase2_pyshark_analyzer.py:106: in test_stream_info_update_with_direction
    self.analyzer._update_stream_info(tcp_analysis)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_update_stream_info'</failure></testcase><testcase classname="tests.unit.test_fallback_robustness.TestFallbackMechanismRobustness" name="test_fallback_disabled_graceful_handling" time="0.013"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/unit/test_fallback_robustness.py:238: in test_fallback_disabled_graceful_handling
    result = processor.process_file(str(self.test_input_file), str(self.test_output_file))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.integration.test_phase2_day11_integration_fallback_robustness" name="test_phase2_day11_verification_complete" time="0.013"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/integration/test_phase2_day11_integration_fallback_robustness.py:477: in test_phase2_day11_verification_complete
    result = processor.process_file(str(test_input), str(test_output))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.unit.test_phase2_pyshark_analyzer.TestPhase2PySharkAnalyzer" name="test_tls_mask_generation" time="0.003"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_generate_tls_masks'">tests/unit/test_phase2_pyshark_analyzer.py:190: in test_tls_mask_generation
    self.analyzer._generate_tls_masks(
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_generate_tls_masks'</failure></testcase><testcase classname="tests.unit.test_fallback_robustness.TestFallbackMechanismRobustness" name="test_resource_cleanup_robustness" time="0.013" /><testcase classname="tests.unit.test_phase2_pyshark_analyzer.TestPhase2PySharkAnalyzer" name="test_tls_reassembly_logic" time="0.025"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_reassemble_tls_stream'">tests/unit/test_phase2_pyshark_analyzer.py:421: in test_tls_reassembly_logic
    reassembled_packets = self.analyzer._reassemble_tls_stream(packets)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_reassemble_tls_stream'</failure></testcase><testcase classname="tests.integration.test_phase2_2_integration.TestPhase22Integration" name="test_configuration_system_integration" time="0.015" /><testcase classname="tests.unit.test_fallback_robustness.TestFallbackMechanismRobustness" name="test_statistics_accuracy_under_fallback" time="0.015" /><testcase classname="tests.unit.test_main_module.TestModuleIntegration" name="test_services_module_ready_for_extension" time="0.003" /><testcase classname="tests.unit.test_fallback_robustness.TestFallbackMechanismRobustness" name="test_error_boundary_validation" time="0.005"><failure message="Failed: 错误FileNotFoundError未被适当处理: 输入文件不存在">tests/unit/test_fallback_robustness.py:315: in test_error_boundary_validation
    result = processor.process_file(str(self.test_input_file), str(self.test_output_file))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:761: in process_file
    self.validate_inputs(input_path, output_path)
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1169: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1173: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1228: in _execute_mock_call
    raise effect
E   FileNotFoundError: 输入文件不存在

During handling of the above exception, another exception occurred:
tests/unit/test_fallback_robustness.py:320: in test_error_boundary_validation
    pytest.fail(f"错误{error.__class__.__name__}未被适当处理: {e}")
E   Failed: 错误FileNotFoundError未被适当处理: 输入文件不存在</failure></testcase><testcase classname="tests.unit.test_main_module.TestModuleIntegration" name="test_module_hierarchy_consistency" time="0.002" /><testcase classname="tests.unit.test_main_module.TestMainModuleExecutionModes" name="test_main_module_as_module" time="0.001" /><testcase classname="tests.unit.test_main_module.TestMainModuleExecutionModes" name="test_main_module_python_m_execution" time="0.003" /><testcase classname="tests.unit.test_main_module.TestMainModuleExecutionModes" name="test_main_module_file_structure" time="0.005" /><testcase classname="tests.unit.test_main_module.TestModuleCoverage" name="test_main_module_execution_branch" time="0.001" /><testcase classname="tests.unit.test_main_module.TestModuleCoverage" name="test_services_module_all_export" time="0.001" /><testcase classname="tests.unit.test_main_module.TestModuleCoverage" name="test_main_module_import_path_coverage" time="0.001" /><testcase classname="tests.unit.test_main_module.TestModuleCoverage" name="test_services_module_namespace_coverage" time="0.001" /><testcase classname="tests.unit.test_multi_tls_record_debug.TestMultiTLSRecordMaskingDebug" name="test_multi_tls_record_boundary_calculation" time="0.001" /><testcase classname="tests.unit.test_multi_tls_record_debug.TestMultiTLSRecordMaskingDebug" name="test_mask_overlap_detection" time="0.001" /><testcase classname="tests.unit.test_multi_tls_record_debug.TestMultiTLSRecordMaskingDebug" name="test_tls23_header_protection" time="0.000" /><testcase classname="tests.unit.test_multi_tls_record_debug.TestMultiTLSRecordMaskingDebug" name="test_length_calculation_consistency" time="0.046" /><testcase classname="tests.unit.test_phase2_pyshark_analyzer.TestPhase2PySharkAnalyzer" name="test_validate_inputs" time="0.002" /><testcase classname="tests.unit.test_phase2_pyshark_analyzer.TestPhase2Integration" name="test_phase1_phase2_integration" time="0.013"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_tcp_stream_manager'">tests/unit/test_phase2_pyshark_analyzer.py:490: in test_phase1_phase2_integration
    self.assertIsInstance(analyzer._tcp_stream_manager, TCPStreamManager)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_tcp_stream_manager'</failure></testcase><testcase classname="tests.integration.test_phase2_day12_core_integration.TestPhase2Day12CoreIntegration" name="test_01_tshark_enhanced_processor_creation" time="0.008"><failure message="AssertionError: assert 'TShark Enhanced Mask Processor' == 'TShark增强掩码处理器'&#10;  &#10;  #x1B[0m#x1B[91m- TShark增强掩码处理器#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ TShark Enhanced Mask Processor#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/integration/test_phase2_day12_core_integration.py:108: in test_01_tshark_enhanced_processor_creation
    assert processor.get_display_name() == "TShark增强掩码处理器"
E   AssertionError: assert 'TShark Enhanced Mask Processor' == 'TShark增强掩码处理器'
E     
E     #x1B[0m#x1B[91m- TShark增强掩码处理器#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ TShark Enhanced Mask Processor#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_multi_tls_record_debug.TestMultiTLSRecordMaskingDebug" name="test_real_world_scenario" time="0.009" /><testcase classname="tests.unit.test_phase3_payload_masker_adapter.TestScapyRewriterPhase3" name="test_initialization_with_sequence_support" time="0.004"><failure message="AssertionError: assert False&#10; +  where False = hasattr(&lt;src.pktmask.core.trim.stages.tcp_payload_masker_adapter.TcpPayloadMaskerAdapter object at 0x11d8ac6e0&gt;, '_stream_manager')&#10; +    where &lt;src.pktmask.core.trim.stages.tcp_payload_masker_adapter.TcpPayloadMaskerAdapter object at 0x11d8ac6e0&gt; = &lt;test_phase3_payload_masker_adapter.TestScapyRewriterPhase3 object at 0x11d1ed6d0&gt;.rewriter">tests/unit/test_phase3_payload_masker_adapter.py:103: in test_initialization_with_sequence_support
    assert hasattr(self.rewriter, '_stream_manager')
E   AssertionError: assert False
E    +  where False = hasattr(&lt;src.pktmask.core.trim.stages.tcp_payload_masker_adapter.TcpPayloadMaskerAdapter object at 0x11d8ac6e0&gt;, '_stream_manager')
E    +    where &lt;src.pktmask.core.trim.stages.tcp_payload_masker_adapter.TcpPayloadMaskerAdapter object at 0x11d8ac6e0&gt; = &lt;test_phase3_payload_masker_adapter.TestScapyRewriterPhase3 object at 0x11d1ed6d0&gt;.rewriter</failure></testcase><testcase classname="tests.unit.test_multi_tls_record_masking.TestMultiTLSRecordMasking" name="test_mask_rule_absolute_offsets" time="0.005" /><testcase classname="tests.unit.test_multi_tls_record_masking.TestMultiTLSRecordMasking" name="test_mixed_tls_versions_multi_records" time="0.002" /><testcase classname="tests.unit.test_multi_tls_record_masking.TestMultiTLSRecordMasking" name="test_multi_tls_records_mask_rule_generation" time="0.009" /><testcase classname="tests.unit.test_multi_tls_record_masking.TestMultiTLSRecordMasking" name="test_overlapping_mask_detection" time="0.005" /><testcase classname="tests.unit.test_multi_tls_record_masking.TestMultiTLSRecordMasking" name="test_single_packet_multi_tls_records_parsing" time="0.005" /><testcase classname="tests.unit.test_multi_tls_record_masking.TestMultiTLSRecordMasking" name="test_three_tls_records_in_packet" time="0.003" /><testcase classname="tests.unit.test_phase3_payload_masker_adapter.TestScapyRewriterPhase3" name="test_validate_inputs_with_sequence_mask_table" time="0.026"><failure message="AttributeError: 'StageContext' object has no attribute 'masking_recipe'">tests/unit/test_phase3_payload_masker_adapter.py:119: in test_validate_inputs_with_sequence_mask_table
    assert self.rewriter.validate_inputs(self.test_context) is True
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/trim/stages/tcp_payload_masker_adapter.py:130: in validate_inputs
    if context.masking_recipe is None:
       ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'StageContext' object has no attribute 'masking_recipe'</failure></testcase><testcase classname="tests.unit.test_phase1_2_multi_stage_executor.TestStageContext" name="test_stage_context_creation" time="0.004" /><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestProcessorRegistryIntegration" name="test_processor_creation" time="0.001"><failure message="AssertionError: assert 'Mask Payloads' == 'Trim Payloads'&#10;  &#10;  #x1B[0m#x1B[91m- Trim Payloads#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ Mask Payloads#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/test_phase4_enhanced_trimmer.py:120: in test_processor_creation
    assert processor.get_display_name() == "Trim Payloads"
E   AssertionError: assert 'Mask Payloads' == 'Trim Payloads'
E     
E     #x1B[0m#x1B[91m- Trim Payloads#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ Mask Payloads#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestProcessorRegistryIntegration" name="test_processor_info_compatibility" time="0.011"><failure message="AssertionError: assert 'Mask Payloads' == 'Trim Payloads'&#10;  &#10;  #x1B[0m#x1B[91m- Trim Payloads#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ Mask Payloads#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/test_phase4_enhanced_trimmer.py:128: in test_processor_info_compatibility
    assert info['display_name'] == 'Trim Payloads'  # 保持兼容
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AssertionError: assert 'Mask Payloads' == 'Trim Payloads'
E     
E     #x1B[0m#x1B[91m- Trim Payloads#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ Mask Payloads#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_phase3_payload_masker_adapter.TestScapyRewriterPhase3" name="test_directional_stream_id_generation" time="0.007"><failure message="AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_generate_directional_stream_id'">tests/unit/test_phase3_payload_masker_adapter.py:144: in test_directional_stream_id_generation
    stream_id_1 = self.rewriter._generate_directional_stream_id(
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_generate_directional_stream_id'</failure></testcase><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestZeroGUIChangeCompatibility" name="test_interface_compatibility" time="0.008" /><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestZeroGUIChangeCompatibility" name="test_stats_interface_compatibility" time="0.001" /><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestSmartProcessingCapabilities" name="test_multi_stage_integration" time="0.004" /><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestSmartProcessingCapabilities" name="test_stage_config_generation" time="0.001"><failure message="AssertionError: assert 'http_strategy_enabled' in {'preserve_ratio': 0.3, 'min_preserve_bytes': 100, 'chunk_size': 1000, 'enable_detailed_logging': False, 'tls_strategy_enabled': True, 'default_strategy_enabled': True, 'auto_protocol_detection': True}">tests/unit/test_phase4_enhanced_trimmer.py:223: in test_stage_config_generation
    assert 'http_strategy_enabled' in pyshark_config
E   AssertionError: assert 'http_strategy_enabled' in {'preserve_ratio': 0.3, 'min_preserve_bytes': 100, 'chunk_size': 1000, 'enable_detailed_logging': False, 'tls_strategy_enabled': True, 'default_strategy_enabled': True, 'auto_protocol_detection': True}</failure></testcase><testcase classname="tests.unit.test_phase3_payload_masker_adapter.TestScapyRewriterPhase3" name="test_packet_direction_determination" time="0.005"><failure message="AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_determine_packet_direction'">tests/unit/test_phase3_payload_masker_adapter.py:163: in test_packet_direction_determination
    direction = self.rewriter._determine_packet_direction(
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_determine_packet_direction'</failure></testcase><testcase classname="tests.unit.test_phase1_tcp_stream.TestTCPConnection" name="test_invalid_port_range" time="0.003" /><testcase classname="tests.unit.test_phase1_tcp_stream.TestTCPConnection" name="test_get_reverse" time="0.000" /><testcase classname="tests.unit.test_phase1_tcp_stream.TestTCPConnection" name="test_to_stream_base" time="0.001" /><testcase classname="tests.unit.test_phase1_tcp_stream.TestTCPConnection" name="test_ipv6_support" time="0.004" /><testcase classname="tests.unit.test_phase1_tcp_stream.TestDirectionalTCPStream" name="test_create_stream" time="0.001" /><testcase classname="tests.unit.test_phase1_tcp_stream.TestDirectionalTCPStream" name="test_stream_id_generation" time="0.000" /><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestSmartProcessingCapabilities" name="test_processing_stats_tracking" time="0.001"><failure message="KeyError: 'http_packets'">tests/unit/test_phase4_enhanced_trimmer.py:237: in test_processing_stats_tracking
    assert stats['http_packets'] == 0
           ^^^^^^^^^^^^^^^^^^^^^
E   KeyError: 'http_packets'</failure></testcase><testcase classname="tests.unit.test_phase3_payload_masker_adapter.TestScapyRewriterPhase3" name="test_udp_stream_id_generation" time="0.003"><failure message="AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_generate_udp_stream_id'">tests/unit/test_phase3_payload_masker_adapter.py:176: in test_udp_stream_id_generation
    stream_id = self.rewriter._generate_udp_stream_id(
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_generate_udp_stream_id'</failure></testcase><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestSmartProcessingCapabilities" name="test_enhanced_stats_generation" time="0.001"><failure message="KeyError: 'http_packets'">tests/unit/test_phase4_enhanced_trimmer.py:265: in test_enhanced_stats_generation
    assert protocol_stats['http_packets'] == 30
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   KeyError: 'http_packets'</failure></testcase><testcase classname="tests.unit.test_phase3_payload_masker_adapter.TestScapyRewriterPhase3" name="test_sequence_based_mask_application" time="0.003"><failure message="AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_apply_sequence_based_masks'">tests/unit/test_phase3_payload_masker_adapter.py:200: in test_sequence_based_mask_application
    modified_payload = self.rewriter._apply_sequence_based_masks(
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_apply_sequence_based_masks'</failure></testcase><testcase classname="tests.unit.test_phase1_tcp_stream.TestDirectionalTCPStream" name="test_initial_seq_management" time="0.004" /><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestErrorHandlingAndRecovery" name="test_initialization_failure_handling" time="0.049" /><testcase classname="tests.unit.test_phase1_tcp_stream.TestDirectionalTCPStream" name="test_sequence_number_conversion" time="0.002" /><testcase classname="tests.unit.test_phase3_payload_masker_adapter.TestScapyRewriterPhase3" name="test_mask_spec_to_range_application" time="0.002"><failure message="AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_apply_mask_spec_to_range'">tests/unit/test_phase3_payload_masker_adapter.py:214: in test_mask_spec_to_range_application
    self.rewriter._apply_mask_spec_to_range(
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_apply_mask_spec_to_range'</failure></testcase><testcase classname="tests.unit.test_phase1_tcp_stream.TestTCPStreamManager" name="test_create_manager" time="0.001" /><testcase classname="tests.unit.test_phase3_payload_masker_adapter.TestScapyRewriterPhase3" name="test_zero_mask_application" time="0.010"><failure message="AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_apply_zero_mask'">tests/unit/test_phase3_payload_masker_adapter.py:247: in test_zero_mask_application
    self.rewriter._apply_zero_mask(payload, 6, 11)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_apply_zero_mask'</failure></testcase><testcase classname="tests.unit.test_phase1_tcp_stream.TestTCPStreamManager" name="test_get_or_create_stream" time="0.009" /><testcase classname="tests.unit.test_phase1_tcp_stream.TestTCPStreamManager" name="test_generate_stream_id" time="0.000" /><testcase classname="tests.unit.test_phase1_tcp_stream.TestDetectPacketDirection" name="test_forward_direction" time="0.001" /><testcase classname="tests.unit.test_phase1_tcp_stream.TestDetectPacketDirection" name="test_reverse_direction" time="0.001" /><testcase classname="tests.unit.test_phase2_day11_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_1_tshark_unavailable_fallback_to_enhanced_trimmer" time="0.009"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/unit/test_phase2_day11_fallback_robustness.py:88: in test_1_tshark_unavailable_fallback_to_enhanced_trimmer
    result = processor.process_file(str(self.test_input_file), str(self.test_output_file))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestErrorHandlingAndRecovery" name="test_process_file_without_initialization" time="0.005" /><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestErrorHandlingAndRecovery" name="test_temp_file_cleanup" time="0.003" /><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestIntegrationWithExistingSystem" name="test_processor_registry_fallback" time="0.001"><failure message="AttributeError: &lt;module 'src.pktmask.core.processors.registry' from '/Users/ricky/Downloads/PktMask/src/pktmask/core/processors/registry.py'&gt; does not have the attribute 'EnhancedTrimmer'">tests/unit/test_phase4_enhanced_trimmer.py:334: in test_processor_registry_fallback
    with patch('src.pktmask.core.processors.registry.EnhancedTrimmer', side_effect=ImportError("Mock import error")):
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'src.pktmask.core.processors.registry' from '/Users/ricky/Downloads/PktMask/src/pktmask/core/processors/registry.py'&gt; does not have the attribute 'EnhancedTrimmer'</failure></testcase><testcase classname="tests.unit.test_phase3_payload_masker_adapter.TestScapyRewriterPhase3" name="test_statistics_tracking" time="0.007"><failure message="AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_generate_processing_stats'">tests/unit/test_phase3_payload_masker_adapter.py:266: in test_statistics_tracking
    stats = self.rewriter._generate_processing_stats()
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_generate_processing_stats'</failure></testcase><testcase classname="tests.unit.test_phase2_day11_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_2_protocol_parse_error_fallback_to_mask_stage" time="0.006"><failure message="AssertionError: assert &lt;FallbackMode.ENHANCED_TRIMMER: 'enhanced_trimmer'&gt; == &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt;&#10; +  where &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt; = FallbackMode.MASK_STAGE">tests/unit/test_phase2_day11_fallback_robustness.py:122: in test_2_protocol_parse_error_fallback_to_mask_stage
    assert fallback_mode == FallbackMode.MASK_STAGE
E   AssertionError: assert &lt;FallbackMode.ENHANCED_TRIMMER: 'enhanced_trimmer'&gt; == &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt;
E    +  where &lt;FallbackMode.MASK_STAGE: 'mask_stage'&gt; = FallbackMode.MASK_STAGE</failure></testcase><testcase classname="tests.unit.test_phase3_payload_masker_adapter.TestScapyRewriterPhase3" name="test_mock_packet_processing" time="0.012"><failure message="AttributeError: 'StageContext' object has no attribute 'masking_recipe'">tests/unit/test_phase3_payload_masker_adapter.py:330: in test_mock_packet_processing
    assert self.rewriter.validate_inputs(context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/trim/stages/tcp_payload_masker_adapter.py:130: in validate_inputs
    if context.masking_recipe is None:
       ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'StageContext' object has no attribute 'masking_recipe'</failure></testcase><testcase classname="tests.unit.test_phase2_day11_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_3_multi_level_fallback_cascade" time="0.021" /><testcase classname="tests.unit.test_phase2_day11_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_4_fallback_statistics_accuracy" time="0.005"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/unit/test_phase2_day11_fallback_robustness.py:185: in test_4_fallback_statistics_accuracy
    result = processor.process_file(str(self.test_input_file), str(self.test_output_file))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.unit.test_phase3_payload_masker_adapter.TestScapyRewriterPhase3" name="test_error_handling" time="0.011"><failure message="AttributeError: 'StageContext' object has no attribute 'masking_recipe'">tests/unit/test_phase3_payload_masker_adapter.py:348: in test_error_handling
    assert self.rewriter.validate_inputs(error_context) is False
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/trim/stages/tcp_payload_masker_adapter.py:130: in validate_inputs
    if context.masking_recipe is None:
       ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'StageContext' object has no attribute 'masking_recipe'</failure></testcase><testcase classname="tests.unit.test_phase3_payload_masker_adapter.TestSequenceMatchingIntegration" name="test_sequence_range_matching" time="0.002" /><testcase classname="tests.unit.test_phase3_payload_masker_adapter.TestSequenceMatchingIntegration" name="test_payload_modification_accuracy" time="0.001"><failure message="AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_apply_sequence_based_masks'">tests/unit/test_phase3_payload_masker_adapter.py:431: in test_payload_modification_accuracy
    modified = self.rewriter._apply_sequence_based_masks(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'TcpPayloadMaskerAdapter' object has no attribute '_apply_sequence_based_masks'</failure></testcase><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestEnhancedTrimmerBasics" name="test_enhanced_trimmer_initialization" time="0.026"><failure message="AttributeError: 'EnhancedTrimConfig' object has no attribute 'http_strategy_enabled'. Did you mean: 'tls_strategy_enabled'?">tests/unit/test_phase4_enhanced_trimmer.py:43: in test_enhanced_trimmer_initialization
    assert trimmer.enhanced_config.http_strategy_enabled is True
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedTrimConfig' object has no attribute 'http_strategy_enabled'. Did you mean: 'tls_strategy_enabled'?</failure></testcase><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestEnhancedTrimmerBasics" name="test_enhanced_config_defaults" time="0.001"><failure message="AttributeError: 'EnhancedTrimConfig' object has no attribute 'http_strategy_enabled'. Did you mean: 'tls_strategy_enabled'?">tests/unit/test_phase4_enhanced_trimmer.py:53: in test_enhanced_config_defaults
    assert config.http_strategy_enabled is True
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedTrimConfig' object has no attribute 'http_strategy_enabled'. Did you mean: 'tls_strategy_enabled'?</failure></testcase><testcase classname="tests.integration.test_phase1_2_comprehensive_integration.TestPhase12ComprehensiveIntegration" name="test_error_handling_and_recovery" time="1.664"><failure message="pktmask.core.trim.exceptions.StageExecutionError: Stage 'TShark预处理器' 执行失败: 输入验证失败 (详情: stage_name=TShark预处理器, stage_index=0, total_stages=1)">tests/integration/test_phase1_2_comprehensive_integration.py:252: in test_error_handling_and_recovery
    result = executor.execute_pipeline(nonexistent_file, self.output_file)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/trim/multi_stage_executor.py:143: in execute_pipeline
    raise StageExecutionError(
E   pktmask.core.trim.exceptions.StageExecutionError: Stage 'TShark预处理器' 执行失败: 输入验证失败 (详情: stage_name=TShark预处理器, stage_index=0, total_stages=1)</failure></testcase><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestEnhancedTrimmerBasics" name="test_display_name_compatibility" time="0.009"><failure message="AssertionError: assert 'Mask Payloads' == 'Trim Payloads'&#10;  &#10;  #x1B[0m#x1B[91m- Trim Payloads#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ Mask Payloads#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/test_phase4_enhanced_trimmer.py:70: in test_display_name_compatibility
    assert trimmer.get_display_name() == "Trim Payloads"
E   AssertionError: assert 'Mask Payloads' == 'Trim Payloads'
E     
E     #x1B[0m#x1B[91m- Trim Payloads#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ Mask Payloads#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestEnhancedTrimmerBasics" name="test_enhanced_description" time="0.003"><failure message="AssertionError: assert 'HTTP/TLS' in '\u667a\u80fd\u534f\u8bae\u611f\u77e5\u8f7d\u8377\u88c1\u5207 - \u652f\u6301TLS\u7b49\u534f\u8bae\u667a\u80fd\u8bc6\u522b\u4e0e\u7cbe\u786e\u88c1\u5207'">tests/unit/test_phase4_enhanced_trimmer.py:79: in test_enhanced_description
    assert "HTTP/TLS" in description
E   AssertionError: assert 'HTTP/TLS' in '\u667a\u80fd\u534f\u8bae\u611f\u77e5\u8f7d\u8377\u88c1\u5207 - \u652f\u6301TLS\u7b49\u534f\u8bae\u667a\u80fd\u8bc6\u522b\u4e0e\u7cbe\u786e\u88c1\u5207'</failure></testcase><testcase classname="tests.unit.test_fallback_robustness.TestComprehensiveRobustnessValidation" name="test_100_percent_robustness_validation" time="1.506"><failure message="AssertionError: 健壮性验证未达到100%要求。实际: 80.0% (8/10)&#10;assert 80.0 == 100.0">tests/unit/test_fallback_robustness.py:358: in test_100_percent_robustness_validation
    assert robustness_percentage == 100.0, (
E   AssertionError: 健壮性验证未达到100%要求。实际: 80.0% (8/10)
E   assert 80.0 == 100.0</failure></testcase><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestIntegrationWithExistingSystem" name="test_enhanced_mode_status_reporting" time="0.002"><failure message="assert False is True&#10; +  where False = is_enhanced_mode_enabled()&#10; +    where is_enhanced_mode_enabled = ProcessorRegistry.is_enhanced_mode_enabled">tests/unit/test_phase4_enhanced_trimmer.py:346: in test_enhanced_mode_status_reporting
    assert ProcessorRegistry.is_enhanced_mode_enabled() is True
E   assert False is True
E    +  where False = is_enhanced_mode_enabled()
E    +    where is_enhanced_mode_enabled = ProcessorRegistry.is_enhanced_mode_enabled</failure></testcase><testcase classname="tests.unit.test_phase2_day11_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_5_resource_cleanup_robustness" time="0.002" /><testcase classname="tests.unit.test_phase6_gui_migration.TestPhase6GUIMigration" name="test_backward_compatibility" time="0.001" /><testcase classname="tests.unit.test_phase6_gui_migration.TestPhase6GUIMigration" name="test_build_pipeline_config" time="0.004"><failure message="AttributeError: &lt;module 'pktmask.gui.managers.pipeline_manager' from '/Users/ricky/Downloads/PktMask/src/pktmask/gui/managers/pipeline_manager.py'&gt; does not have the attribute 'PipelineExecutor'">/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'pktmask.gui.managers.pipeline_manager' from '/Users/ricky/Downloads/PktMask/src/pktmask/gui/managers/pipeline_manager.py'&gt; does not have the attribute 'PipelineExecutor'</failure></testcase><testcase classname="tests.unit.test_phase2_day11_fallback_robustness.TestPhase2Day11FallbackRobustness" name="test_6_fallback_disabled_graceful_handling" time="0.005"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/unit/test_phase2_day11_fallback_robustness.py:227: in test_6_fallback_disabled_graceful_handling
    result = processor.process_file(str(self.test_input_file), str(self.test_output_file))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestProcessorRegistryIntegration" name="test_enhanced_trimmer_registration" time="0.005"><failure message="AssertionError: assert 'MaskingProcessor' == 'EnhancedTrimmer'&#10;  &#10;  #x1B[0m#x1B[91m- EnhancedTrimmer#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ MaskingProcessor#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/test_phase4_enhanced_trimmer.py:105: in test_enhanced_trimmer_registration
    assert trimmer_class.__name__ == 'EnhancedTrimmer'
E   AssertionError: assert 'MaskingProcessor' == 'EnhancedTrimmer'
E     
E     #x1B[0m#x1B[91m- EnhancedTrimmer#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ MaskingProcessor#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_phase4_enhanced_trimmer.TestProcessorRegistryIntegration" name="test_enhanced_mode_detection" time="0.001"><failure message="assert False is True">tests/unit/test_phase4_enhanced_trimmer.py:111: in test_enhanced_mode_detection
    assert is_enhanced is True
E   assert False is True</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_initialize_impl_success" time="0.002"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_streams'">tests/unit/test_pyshark_analyzer.py:202: in test_initialize_impl_success
    assert len(analyzer._streams) == 0
               ^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_streams'</failure></testcase><testcase classname="tests.unit.test_processors.TestDeduplicator" name="test_process_invalid_input" time="0.007" /><testcase classname="tests.unit.test_processors.TestIPAnonymizer" name="test_initialization" time="0.001" /><testcase classname="tests.unit.test_processors.TestIPAnonymizer" name="test_is_initialized_property" time="0.001" /><testcase classname="tests.unit.test_processors.TestIPAnonymizer" name="test_process_success" time="0.005"><failure message="assert False is True&#10; +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x12769dc10&gt;.success">tests/unit/test_processors.py:128: in test_process_success
    assert result.success is True
E   assert False is True
E    +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x12769dc10&gt;.success</failure></testcase><testcase classname="tests.unit.test_processors.TestTrimmer" name="test_initialization" time="0.001" /><testcase classname="tests.unit.test_processors.TestTrimmer" name="test_is_initialized_property" time="0.764" /><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_initialize_impl_no_pyshark" time="0.001"><failure message="Failed: DID NOT RAISE &lt;class 'RuntimeError'&gt;">tests/unit/test_pyshark_analyzer.py:211: in test_initialize_impl_no_pyshark
    with pytest.raises(RuntimeError, match="PyShark未安装"):
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   Failed: DID NOT RAISE &lt;class 'RuntimeError'&gt;</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_validate_inputs_success" time="0.001" /><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_validate_inputs_no_tshark_output" time="0.003" /><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_validate_inputs_nonexistent_file" time="0.001" /><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_validate_inputs_empty_file" time="0.001"><failure message="assert True is False">tests/unit/test_pyshark_analyzer.py:254: in test_validate_inputs_empty_file
    assert result is False
E   assert True is False</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_validate_inputs_not_initialized" time="0.004"><failure message="assert True is False">tests/unit/test_pyshark_analyzer.py:263: in test_validate_inputs_not_initialized
    assert result is False
E   assert True is False</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_open_pcap_file_success" time="0.002"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_open_pcap_file'">tests/unit/test_pyshark_analyzer.py:272: in test_open_pcap_file_success
    result = analyzer._open_pcap_file(sample_pcap)
             ^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_open_pcap_file'</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_open_pcap_file_failure" time="0.002"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_open_pcap_file'">tests/unit/test_pyshark_analyzer.py:290: in test_open_pcap_file_failure
    analyzer._open_pcap_file(sample_pcap)
    ^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_open_pcap_file'</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_generate_stream_id" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_generate_stream_id'">tests/unit/test_pyshark_analyzer.py:297: in test_generate_stream_id
    stream_id1 = analyzer._generate_stream_id("192.168.1.1", "192.168.1.100", 80, 12345, "TCP")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_generate_stream_id'</failure></testcase><testcase classname="tests.unit.test_phase6_gui_migration.TestPhase6GUIMigration" name="test_build_pipeline_config_with_mask" time="0.004"><failure message="AttributeError: &lt;module 'pktmask.gui.managers.pipeline_manager' from '/Users/ricky/Downloads/PktMask/src/pktmask/gui/managers/pipeline_manager.py'&gt; does not have the attribute 'PipelineExecutor'">/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'pktmask.gui.managers.pipeline_manager' from '/Users/ricky/Downloads/PktMask/src/pktmask/gui/managers/pipeline_manager.py'&gt; does not have the attribute 'PipelineExecutor'</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_analyze_tcp_packet" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_tcp_packet'">tests/unit/test_pyshark_analyzer.py:311: in test_analyze_tcp_packet
    result = analyzer._analyze_tcp_packet(packet, 1, 1234567890.0)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_tcp_packet'</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_analyze_udp_packet" time="0.002"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_udp_packet'">tests/unit/test_pyshark_analyzer.py:325: in test_analyze_udp_packet
    result = analyzer._analyze_udp_packet(packet, 2, 1234567891.0)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_udp_packet'</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_analyze_http_layer_request" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_http_layer'">tests/unit/test_pyshark_analyzer.py:341: in test_analyze_http_layer_request
    analyzer._analyze_http_layer(packet.http, analysis)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_http_layer'</failure></testcase><testcase classname="tests.integration.test_phase2_day14_comprehensive_e2e.TestPhase2Day14ComprehensiveE2E" name="test_e2e_tshark_fallback_workflow" time="1.076" /><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_analyze_http_layer_response" time="0.006"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_http_layer'">tests/unit/test_pyshark_analyzer.py:356: in test_analyze_http_layer_response
    analyzer._analyze_http_layer(packet.http, analysis)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_http_layer'</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_analyze_tls_layer_handshake" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_tls_layer'">tests/unit/test_pyshark_analyzer.py:371: in test_analyze_tls_layer_handshake
    analyzer._analyze_tls_layer(packet.tls, analysis)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_tls_layer'</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_analyze_tls_layer_application_data" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_tls_layer'">tests/unit/test_pyshark_analyzer.py:389: in test_analyze_tls_layer_application_data
    analyzer._analyze_tls_layer(packet.tls, analysis)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_tls_layer'</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_check_tool_availability_unavailable" time="0.049"><failure message="AssertionError: assert {} == {'pyshark': False}&#10;  &#10;  Right contains 1 more item:&#10;  #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mpyshark#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[94mFalse#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m&#10;  &#10;  Full diff:&#10;  #x1B[0m#x1B[92m+ {}#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m- {#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m-     'pyshark': False,#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m- }#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/test_pyshark_analyzer.py:819: in test_check_tool_availability_unavailable
    assert availability == {'pyshark': False}
E   AssertionError: assert {} == {'pyshark': False}
E     
E     Right contains 1 more item:
E     #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mpyshark#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[94mFalse#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m
E     
E     Full diff:
E     #x1B[0m#x1B[92m+ {}#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[91m- {#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[91m-     'pyshark': False,#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[91m- }#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_get_description" time="0.001"><failure message="AssertionError: assert '\u534f\u8bae' in '\u589e\u5f3a\u7248PyShark\u5206\u6790\u5668\uff0c\u4f7f\u7528\u6df1\u5ea6TLS\u8bb0\u5f55\u89e3\u6790\u751f\u6210\u7cbe\u786e\u7684\u63a9\u7801\u914d\u65b9'">tests/unit/test_pyshark_analyzer.py:827: in test_get_description
    assert "协议" in description
E   AssertionError: assert '\u534f\u8bae' in '\u589e\u5f3a\u7248PyShark\u5206\u6790\u5668\uff0c\u4f7f\u7528\u6df1\u5ea6TLS\u8bb0\u5f55\u89e3\u6790\u751f\u6210\u7cbe\u786e\u7684\u63a9\u7801\u914d\u65b9'</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_cleanup_memory" time="0.000"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_cleanup_memory'. Did you mean: '_cleanup_impl'?">tests/unit/test_pyshark_analyzer.py:841: in test_cleanup_memory
    analyzer._cleanup_memory()
    ^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_cleanup_memory'. Did you mean: '_cleanup_impl'?</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_execute_success" time="0.684"><failure message="assert False is True&#10; +  where False = &lt;src.pktmask.core.processors.base_processor.ProcessorResult object at 0x11dcd0410&gt;.success">tests/unit/test_pyshark_analyzer.py:861: in test_execute_success
    assert result.success is True
E   assert False is True
E    +  where False = &lt;src.pktmask.core.processors.base_processor.ProcessorResult object at 0x11dcd0410&gt;.success</failure></testcase><testcase classname="tests.unit.test_processors.TestTrimmer" name="test_process_success" time="0.873"><failure message="assert False is True&#10; +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x1276b1020&gt;.success">tests/unit/test_processors.py:181: in test_process_success
    assert result.success is True
E   assert False is True
E    +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x1276b1020&gt;.success</failure></testcase><testcase classname="tests.unit.test_phase6_gui_migration.TestPhase6GUIMigration" name="test_directory_processing_logic" time="0.020"><failure message="AssertionError: &lt;PipelineEvents.PIPELINE_START: 1&gt; not found in ['PIPELINE_START', 'PipelineEvents.PIPELINE_START']">tests/unit/test_phase6_gui_migration.py:150: in test_directory_processing_logic
    self.assertIn(thread.progress_signal.emit.call_args_list[0][0][0],
E   AssertionError: &lt;PipelineEvents.PIPELINE_START: 1&gt; not found in ['PIPELINE_START', 'PipelineEvents.PIPELINE_START']</failure></testcase><testcase classname="tests.unit.test_phase6_gui_migration.TestPhase6GUIMigration" name="test_gui_text_preservation" time="0.007" /><testcase classname="tests.unit.test_phase6_gui_migration.TestPhase6GUIMigration" name="test_new_pipeline_thread_creation" time="0.004" /><testcase classname="tests.unit.test_phase6_gui_migration.TestPhase6GUIMigration" name="test_no_stages_selected" time="0.010"><failure message="AttributeError: &lt;module 'pktmask.gui.managers.pipeline_manager' from '/Users/ricky/Downloads/PktMask/src/pktmask/gui/managers/pipeline_manager.py'&gt; does not have the attribute 'PipelineExecutor'">/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'pktmask.gui.managers.pipeline_manager' from '/Users/ricky/Downloads/PktMask/src/pktmask/gui/managers/pipeline_manager.py'&gt; does not have the attribute 'PipelineExecutor'</failure></testcase><testcase classname="tests.unit.test_fallback_robustness" name="test_phase1_day5_acceptance_criteria" time="0.001" /><testcase classname="tests.integration.test_phase2_day8_integration.TestPhase2Day8Integration" name="test_baseprocessor_inheritance_compliance" time="0.014" /><testcase classname="tests.unit.test_infrastructure_basic.TestInfrastructureModule" name="test_infrastructure_module_exists" time="0.000" /><testcase classname="tests.unit.test_infrastructure_basic.TestInfrastructureModule" name="test_logging_module_exists" time="0.000" /><testcase classname="tests.unit.test_infrastructure_basic.TestInfrastructureModule" name="test_logger_creation" time="0.000" /><testcase classname="tests.unit.test_infrastructure_basic.TestInfrastructureModule" name="test_error_handling_modules_exist" time="0.012" /><testcase classname="tests.integration.test_phase2_day8_integration.TestPhase2Day8Integration" name="test_enhanced_config_integration" time="0.002" /><testcase classname="tests.integration.test_phase2_day8_integration.TestPhase2Day8Integration" name="test_fallback_mechanism_integration" time="0.666"><failure message="RuntimeError: TLS分析失败: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file &quot;/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/phase2_day8_test_qb20bie4/input.pcap&quot; isn't a capture file in a format TShark understands.">src/pktmask/core/processors/tshark_tls_analyzer.py:391: in _execute_tshark_command
    raise RuntimeError(error_msg)
E   RuntimeError: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/phase2_day8_test_qb20bie4/input.pcap" isn't a capture file in a format TShark understands.

The above exception was the direct cause of the following exception:
src/pktmask/core/processors/tshark_tls_analyzer.py:175: in analyze_file
    json_output = self._execute_tshark_command(cmd)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_tls_analyzer.py:402: in _execute_tshark_command
    raise RuntimeError(f"TShark执行异常: {e}") from e
E   RuntimeError: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/phase2_day8_test_qb20bie4/input.pcap" isn't a capture file in a format TShark understands.

The above exception was the direct cause of the following exception:
tests/integration/test_phase2_day8_integration.py:232: in test_fallback_mechanism_integration
    result = processor.process_file(self.input_file, self.output_file)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:775: in process_file
    result = self._process_with_core_pipeline(input_path, output_path)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:854: in _process_with_core_pipeline
    tls_records = self._tshark_analyzer.analyze_file(input_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_tls_analyzer.py:190: in analyze_file
    raise RuntimeError(f"TLS分析失败: {e}") from e
E   RuntimeError: TLS分析失败: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/phase2_day8_test_qb20bie4/input.pcap" isn't a capture file in a format TShark understands.</failure></testcase><testcase classname="tests.unit.test_infrastructure_basic.TestLoggingBasic" name="test_log_performance_function_exists" time="0.000" /><testcase classname="tests.unit.test_infrastructure_basic.TestLoggingBasic" name="test_log_performance_call" time="0.000" /><testcase classname="tests.unit.test_infrastructure_basic.TestDomainAdapters" name="test_domain_adapters_exist" time="0.001" /><testcase classname="tests.unit.test_infrastructure_basic.TestDomainAdapters" name="test_event_adapter_exists" time="0.000" /><testcase classname="tests.unit.test_infrastructure_basic.TestDomainAdapters" name="test_statistics_adapter_exists" time="0.000" /><testcase classname="tests.unit.test_infrastructure_basic.TestUtilsAdvanced" name="test_file_selector_exists" time="0.000" /><testcase classname="tests.unit.test_infrastructure_basic.TestUtilsAdvanced" name="test_file_selector_basic_functionality" time="0.001" /><testcase classname="tests.unit.test_infrastructure_basic.TestUtilsAdvanced" name="test_reporting_utils_exist" time="0.000" /><testcase classname="tests.unit.test_infrastructure_basic.TestUtilsAdvanced" name="test_path_utils_exist" time="0.000" /><testcase classname="tests.unit.test_main_module.TestMainModule" name="test_main_module_exists" time="0.002" /><testcase classname="tests.unit.test_main_module.TestMainModule" name="test_main_module_has_main_import" time="0.001" /><testcase classname="tests.unit.test_main_module.TestMainModule" name="test_main_module_import_structure" time="0.000"><failure message="AssertionError: assert 'PktMask \u4e3b\u7a0b\u5e8f\u5165\u53e3' in '\nPktMask main program entry point\n'&#10; +  where '\nPktMask main program entry point\n' = &lt;module 'pktmask.__main__' from '/Users/ricky/Downloads/PktMask/src/pktmask/__main__.py'&gt;.__doc__&#10; +    where &lt;module 'pktmask.__main__' from '/Users/ricky/Downloads/PktMask/src/pktmask/__main__.py'&gt; = &lt;module 'pktmask' from '/Users/ricky/Downloads/PktMask/src/pktmask/__init__.py'&gt;.__main__">tests/unit/test_main_module.py:35: in test_main_module_import_structure
    assert "PktMask 主程序入口" in pktmask.__main__.__doc__
E   AssertionError: assert 'PktMask \u4e3b\u7a0b\u5e8f\u5165\u53e3' in '\nPktMask main program entry point\n'
E    +  where '\nPktMask main program entry point\n' = &lt;module 'pktmask.__main__' from '/Users/ricky/Downloads/PktMask/src/pktmask/__main__.py'&gt;.__doc__
E    +    where &lt;module 'pktmask.__main__' from '/Users/ricky/Downloads/PktMask/src/pktmask/__main__.py'&gt; = &lt;module 'pktmask' from '/Users/ricky/Downloads/PktMask/src/pktmask/__init__.py'&gt;.__main__</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_execute_validation_failure" time="0.010"><failure message="TypeError: argument of type 'NoneType' is not iterable">tests/unit/test_pyshark_analyzer.py:879: in test_execute_validation_failure
    assert "PyShark分析失败" in result.error
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: argument of type 'NoneType' is not iterable</failure></testcase><testcase classname="tests.integration.test_phase1_2_comprehensive_integration.TestPhase12ComprehensiveIntegration" name="test_configuration_system_integration" time="0.001" /><testcase classname="tests.integration.test_phase1_2_comprehensive_integration.TestPhase12ComprehensiveIntegration" name="test_performance_and_resource_management" time="1.211"><failure message="pktmask.core.trim.exceptions.StageExecutionError: Stage 'EnhancedPySharkAnalyzer' 执行失败: 未知错误 (详情: stage_name=EnhancedPySharkAnalyzer, stage_index=1, total_stages=3)">tests/integration/test_phase1_2_comprehensive_integration.py:341: in test_performance_and_resource_management
    result = executor.execute_pipeline(self.input_file, self.output_file)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/trim/multi_stage_executor.py:143: in execute_pipeline
    raise StageExecutionError(
E   pktmask.core.trim.exceptions.StageExecutionError: Stage 'EnhancedPySharkAnalyzer' 执行失败: 未知错误 (详情: stage_name=EnhancedPySharkAnalyzer, stage_index=1, total_stages=3)</failure></testcase><testcase classname="tests.unit.test_main_module.TestMainModule" name="test_main_module_structure" time="0.001" /><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_execute_analysis_failure" time="0.435"><failure message="TypeError: argument of type 'NoneType' is not iterable">tests/unit/test_pyshark_analyzer.py:892: in test_execute_analysis_failure
    assert "PyShark分析失败" in result.error
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: argument of type 'NoneType' is not iterable</failure></testcase><testcase classname="tests.unit.test_main_module.TestServicesModule" name="test_services_module_exists" time="0.002" /><testcase classname="tests.unit.test_main_module.TestServicesModule" name="test_services_module_has_docstring" time="0.001" /><testcase classname="tests.unit.test_main_module.TestServicesModule" name="test_services_module_has_all_attribute" time="0.002" /><testcase classname="tests.unit.test_main_module.TestServicesModule" name="test_services_module_all_is_empty" time="0.001" /><testcase classname="tests.unit.test_main_module.TestServicesModule" name="test_services_module_import_path" time="0.012" /><testcase classname="tests.unit.test_main_module.TestServicesModule" name="test_services_module_attributes" time="0.000" /><testcase classname="tests.unit.test_main_module.TestModuleIntegration" name="test_main_module_can_import_gui" time="0.000" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplierCoverageGaps" name="test_apply_single_mask_rule_boundary_violations" time="0.001"><failure message="TypeError: ScapyMaskApplier._apply_single_mask_rule() missing 2 required positional arguments: 'packet_number' and 'payload_length'">tests/unit/test_scapy_mask_applier.py:638: in test_apply_single_mask_rule_boundary_violations
    result = applier._apply_single_mask_rule(mock_packet, valid_rule)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: ScapyMaskApplier._apply_single_mask_rule() missing 2 required positional arguments: 'packet_number' and 'payload_length'</failure></testcase><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplierCoverageGaps" name="test_validate_mask_boundaries_detailed_scenarios" time="0.001"><failure message="AttributeError: 'ScapyMaskApplier' object has no attribute '_validate_mask_boundaries'. Did you mean: '_validate_boundaries'?">tests/unit/test_scapy_mask_applier.py:683: in test_validate_mask_boundaries_detailed_scenarios
    is_valid = applier._validate_mask_boundaries(test_rule, payload_length)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ScapyMaskApplier' object has no attribute '_validate_mask_boundaries'. Did you mean: '_validate_boundaries'?</failure></testcase><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplierCoverageGaps" name="test_extract_tcp_payload_edge_cases" time="0.002"><failure message="AssertionError: assert None == b'test_payload'">tests/unit/test_scapy_mask_applier.py:731: in test_extract_tcp_payload_edge_cases
    assert payload == b'test_payload'
E   AssertionError: assert None == b'test_payload'</failure></testcase><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplierCoverageGaps" name="test_update_packet_payload_scenarios" time="0.067"><failure message="AssertionError: assert b'original_payload' == b'modified_payload'&#10;  &#10;  At index 0 diff: #x1B[0m#x1B[33mb#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[33mo#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[33mb#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[33mm#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  &#10;  Full diff:&#10;  #x1B[0m#x1B[91m- (b'modified_payload')#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  ?    - ^ ^ ^^#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ (b'original_payload')#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  ?     ^ ^ ^^^#x1B[90m#x1B[39;49;00m">tests/unit/test_scapy_mask_applier.py:759: in test_update_packet_payload_scenarios
    assert mock_raw_layer.load == new_payload
E   AssertionError: assert b'original_payload' == b'modified_payload'
E     
E     At index 0 diff: #x1B[0m#x1B[33mb#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[33mo#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[33mb#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[33mm#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     
E     Full diff:
E     #x1B[0m#x1B[91m- (b'modified_payload')#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     ?    - ^ ^ ^^#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ (b'original_payload')#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     ?     ^ ^ ^^^#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_processors.TestProcessorRegistry" name="test_list_built_in_processors" time="0.001" /><testcase classname="tests.unit.test_processors.TestProcessorRegistry" name="test_get_processor" time="0.000" /><testcase classname="tests.unit.test_processors.TestProcessorRegistry" name="test_register_processor" time="0.000" /><testcase classname="tests.unit.test_processors.TestProcessorRegistry" name="test_get_nonexistent_processor" time="0.003" /><testcase classname="tests.unit.test_processors.TestProcessorRegistry" name="test_processor_availability_check" time="0.001" /><testcase classname="tests.unit.test_processors.TestProcessorIntegration" name="test_all_processors_can_be_instantiated" time="0.612" /><testcase classname="tests.unit.test_phase6_gui_migration.TestPhase6Integration" name="test_end_to_end_config_flow" time="0.001"><failure message="AttributeError: &lt;module 'pktmask.gui.managers.pipeline_manager' from '/Users/ricky/Downloads/PktMask/src/pktmask/gui/managers/pipeline_manager.py'&gt; does not have the attribute 'PipelineExecutor'">/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1423: in patched
    with self.decoration_helper(patched,
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1405: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1467: in get_original
    raise AttributeError(
E   AttributeError: &lt;module 'pktmask.gui.managers.pipeline_manager' from '/Users/ricky/Downloads/PktMask/src/pktmask/gui/managers/pipeline_manager.py'&gt; does not have the attribute 'PipelineExecutor'</failure></testcase><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplierCoverageGaps" name="test_recalculate_checksums_edge_cases" time="0.002"><failure message="TypeError: ScapyMaskApplier._recalculate_packet_checksums() got an unexpected keyword argument 'recalculate'">tests/unit/test_scapy_mask_applier.py:783: in test_recalculate_checksums_edge_cases
    applier._recalculate_packet_checksums(mock_packet, recalculate=True)
E   TypeError: ScapyMaskApplier._recalculate_packet_checksums() got an unexpected keyword argument 'recalculate'</failure></testcase><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplierCoverageGaps" name="test_write_packets_error_handling" time="0.004"><failure message="assert '\u5199\u5165\u6743\u9650\u88ab\u62d2\u7edd' in &quot;'ScapyMaskApplier' object has no attribute '_write_packets_to_file'&quot;&#10; +  where &quot;'ScapyMaskApplier' object has no attribute '_write_packets_to_file'&quot; = str(AttributeError(&quot;'ScapyMaskApplier' object has no attribute '_write_packets_to_file'&quot;))&#10; +    where AttributeError(&quot;'ScapyMaskApplier' object has no attribute '_write_packets_to_file'&quot;) = &lt;ExceptionInfo AttributeError(&quot;'ScapyMaskApplier' object has no attribute '_write_packets_to_file'&quot;) tblen=1&gt;.value">tests/unit/test_scapy_mask_applier.py:805: in test_write_packets_error_handling
    assert "写入权限被拒绝" in str(exc_info.value)
E   assert '\u5199\u5165\u6743\u9650\u88ab\u62d2\u7edd' in "'ScapyMaskApplier' object has no attribute '_write_packets_to_file'"
E    +  where "'ScapyMaskApplier' object has no attribute '_write_packets_to_file'" = str(AttributeError("'ScapyMaskApplier' object has no attribute '_write_packets_to_file'"))
E    +    where AttributeError("'ScapyMaskApplier' object has no attribute '_write_packets_to_file'") = &lt;ExceptionInfo AttributeError("'ScapyMaskApplier' object has no attribute '_write_packets_to_file'") tblen=1&gt;.value</failure></testcase><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplierCoverageGaps" name="test_statistics_generation_comprehensive" time="0.002"><failure message="AttributeError: 'ScapyMaskApplier' object has no attribute '_stats'">tests/unit/test_scapy_mask_applier.py:813: in test_statistics_generation_comprehensive
    applier._stats.update({
    ^^^^^^^^^^^^^^
E   AttributeError: 'ScapyMaskApplier' object has no attribute '_stats'</failure></testcase><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplierCoverageGaps" name="test_debug_packet_processing" time="0.003" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplierCoverageGaps" name="test_reset_statistics_functionality" time="0.000"><failure message="AttributeError: 'ScapyMaskApplier' object has no attribute '_stats'">tests/unit/test_scapy_mask_applier.py:855: in test_reset_statistics_functionality
    applier._stats['packets_processed'] = 100
    ^^^^^^^^^^^^^^
E   AttributeError: 'ScapyMaskApplier' object has no attribute '_stats'</failure></testcase><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplierCoverageGaps" name="test_get_statistics_current_state" time="0.001"><failure message="AssertionError: assert 'packets_processed' in {'processed_packets': 0, 'modified_packets': 0, 'masked_bytes': 0, 'applied_rules': 0, 'boundary_violations': 0}">tests/unit/test_scapy_mask_applier.py:874: in test_get_statistics_current_state
    assert 'packets_processed' in initial_stats
E   AssertionError: assert 'packets_processed' in {'processed_packets': 0, 'modified_packets': 0, 'masked_bytes': 0, 'applied_rules': 0, 'boundary_violations': 0}</failure></testcase><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplierCoverageGaps" name="test_complex_mask_application_workflow" time="0.001"><failure message="ValueError: too many values to unpack (expected 2)">tests/unit/test_scapy_mask_applier.py:892: in test_complex_mask_application_workflow
    input_file, output_file = sample_pcap_files
    ^^^^^^^^^^^^^^^^^^^^^^^
E   ValueError: too many values to unpack (expected 2)</failure></testcase><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplierErrorScenarios" name="test_file_not_found_error_propagation" time="0.002"><failure message="FileNotFoundError: 输入文件不存在: /var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/pktmask_test_2w2_u65m/nonexistent.pcap">tests/unit/test_scapy_mask_applier.py:915: in test_file_not_found_error_propagation
    result = applier.apply_masks(nonexistent_file, output_file, [])
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/scapy_mask_applier.py:106: in apply_masks
    raise FileNotFoundError(f"输入文件不存在: {input_file}")
E   FileNotFoundError: 输入文件不存在: /var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/pktmask_test_2w2_u65m/nonexistent.pcap</failure></testcase><testcase classname="tests.unit.test_processor_stage_adapter.TestProcessorStageAdapter" name="test_adapter_initialization" time="0.002" /><testcase classname="tests.unit.test_processor_stage_adapter.TestProcessorStageAdapter" name="test_adapter_initialize_method" time="0.001" /><testcase classname="tests.unit.test_processor_stage_adapter.TestProcessorStageAdapter" name="test_adapter_initialize_with_runtime_config" time="0.001" /><testcase classname="tests.unit.test_processor_stage_adapter.TestProcessorStageAdapter" name="test_failed_file_processing" time="0.002" /><testcase classname="tests.unit.test_processor_stage_adapter.TestProcessorStageAdapter" name="test_get_required_tools_with_method" time="0.002" /><testcase classname="tests.unit.test_processor_stage_adapter.TestProcessorStageAdapter" name="test_get_required_tools_without_method" time="0.001" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplierErrorScenarios" name="test_scapy_rdpcap_error_handling" time="0.001"><failure message="ValueError: too many values to unpack (expected 2)">tests/unit/test_scapy_mask_applier.py:923: in test_scapy_rdpcap_error_handling
    input_file, output_file = sample_pcap_files
    ^^^^^^^^^^^^^^^^^^^^^^^
E   ValueError: too many values to unpack (expected 2)</failure></testcase><testcase classname="tests.unit.test_processor_stage_adapter.TestProcessorStageAdapter" name="test_processor_exception_handling" time="0.001" /><testcase classname="tests.unit.test_processor_stage_adapter.TestProcessorStageAdapter" name="test_processor_initialization_failure" time="0.001" /><testcase classname="tests.unit.test_processor_stage_adapter.TestProcessorStageAdapter" name="test_stop_with_method" time="0.002" /><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzerIntegration" name="test_real_pcap_analysis" time="0.001" /><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzerIntegration" name="test_large_pcap_handling" time="0.000"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_max_packets_per_batch'">tests/unit/test_pyshark_analyzer.py:913: in test_large_pcap_handling
    assert analyzer._max_packets_per_batch == 100
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_max_packets_per_batch'</failure></testcase><testcase classname="tests.unit.test_processor_stage_adapter.TestProcessorStageAdapter" name="test_stop_without_method" time="0.003" /><testcase classname="tests.unit.test_processor_stage_adapter.TestProcessorStageAdapter" name="test_successful_file_processing" time="0.001" /><testcase classname="tests.unit.test_processors.TestDeduplicator" name="test_initialization" time="0.001" /><testcase classname="tests.unit.test_processors.TestDeduplicator" name="test_is_initialized_property" time="0.003" /><testcase classname="tests.unit.test_processors.TestDeduplicator" name="test_process_success" time="0.036"><failure message="assert False is True&#10; +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x1290ddd00&gt;.success">tests/unit/test_processors.py:67: in test_process_success
    assert result.success is True
E   assert False is True
E    +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x1290ddd00&gt;.success</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzerIntegration" name="test_memory_optimization_settings" time="0.000"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_max_packets_per_batch'">tests/unit/test_pyshark_analyzer.py:926: in test_memory_optimization_settings
    assert analyzer._max_packets_per_batch == 500
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_max_packets_per_batch'</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzerIntegration" name="test_protocol_configuration_combinations" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_http'">tests/unit/test_pyshark_analyzer.py:941: in test_protocol_configuration_combinations
    assert analyzer._analyze_http is True
           ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_http'</failure></testcase><testcase classname="tests.unit.test_strategy_comprehensive.TestUtilityFunctions" name="test_generate_unique_segment_invalid_input" time="0.000" /><testcase classname="tests.unit.test_strategy_comprehensive.TestUtilityFunctions" name="test_generate_unique_ipv6_segment_basic" time="0.000" /><testcase classname="tests.unit.test_strategy_comprehensive.TestIPv4AddressGeneration" name="test_generate_new_ipv4_address_hierarchical_basic" time="0.000" /><testcase classname="tests.unit.test_strategy_comprehensive.TestIPv4AddressGeneration" name="test_generate_new_ipv4_address_high_frequency_consistency" time="0.002" /><testcase classname="tests.unit.test_strategy_comprehensive.TestIPv4AddressGeneration" name="test_generate_new_ipv4_address_invalid_input" time="0.002" /><testcase classname="tests.unit.test_strategy_comprehensive.TestIPv6AddressGeneration" name="test_generate_new_ipv6_address_hierarchical_basic" time="0.092" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplierErrorScenarios" name="test_mask_rule_validation_with_none_values" time="0.002" /><testcase classname="tests.unit.test_steps_basic.TestStepsBasic" name="test_deduplication_step_properties" time="0.001" /><testcase classname="tests.unit.test_steps_basic.TestStepsBasic" name="test_ip_anonymization_step_properties" time="0.001" /><testcase classname="tests.unit.test_steps_basic.TestStepsBasic" name="test_trimming_step_properties" time="0.002" /><testcase classname="tests.unit.test_steps_basic.TestStepsBasic" name="test_all_steps_have_required_methods" time="0.006" /><testcase classname="tests.unit.test_steps_basic.TestStepsBasic" name="test_deduplication_empty_directory" time="0.001" /><testcase classname="tests.unit.test_strategy_comprehensive.TestAnonymizationStrategyAbstract" name="test_strategy_is_abstract" time="0.000" /><testcase classname="tests.unit.test_strategy_comprehensive.TestAnonymizationStrategyAbstract" name="test_abstract_methods_exist" time="0.001" /><testcase classname="tests.unit.test_strategy_comprehensive.TestUtilityFunctions" name="test_ip_sort_key_ipv4" time="0.001" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplier" name="test_apply_masks_basic_flow" time="0.004" /><testcase classname="tests.unit.test_strategy_comprehensive.TestUtilityFunctions" name="test_ip_sort_key_ipv6" time="0.001" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplier" name="test_apply_single_mask_rule" time="0.002" /><testcase classname="tests.unit.test_strategy_comprehensive.TestUtilityFunctions" name="test_ip_sort_key_invalid" time="0.000" /><testcase classname="tests.unit.test_strategy_comprehensive.TestUtilityFunctions" name="test_safe_hash_deterministic" time="0.000" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplier" name="test_apply_single_mask_rule_boundary_clipping" time="0.002" /><testcase classname="tests.unit.test_strategy_comprehensive.TestUtilityFunctions" name="test_safe_hash_different_inputs" time="0.001" /><testcase classname="tests.unit.test_strategy_comprehensive.TestUtilityFunctions" name="test_generate_unique_segment_basic" time="0.001" /><testcase classname="tests.unit.test_strategy_comprehensive.TestUtilityFunctions" name="test_generate_unique_segment_avoids_conflicts" time="0.001" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplier" name="test_apply_single_mask_rule_keep_all" time="0.001" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplier" name="test_check_dependencies" time="0.001" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplier" name="test_error_handling_file_not_found" time="0.001" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplier" name="test_error_handling_scapy_unavailable" time="0.003" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplier" name="test_extract_tcp_payload" time="0.002" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestMaskingRecipe" name="test_recipe_validation_negative_total_packets" time="0.001"><failure message="TypeError: MaskingRecipe.__init__() got an unexpected keyword argument 'instructions'">tests/unit/test_tcp_payload_masker_phase1_1_data_structures.py:113: in test_recipe_validation_negative_total_packets
    MaskingRecipe(
E   TypeError: MaskingRecipe.__init__() got an unexpected keyword argument 'instructions'</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestMaskingRecipe" name="test_recipe_validation_invalid_instructions" time="0.001"><failure message="TypeError: MaskingRecipe.__init__() got an unexpected keyword argument 'instructions'">tests/unit/test_tcp_payload_masker_phase1_1_data_structures.py:121: in test_recipe_validation_invalid_instructions
    MaskingRecipe(
E   TypeError: MaskingRecipe.__init__() got an unexpected keyword argument 'instructions'</failure></testcase><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplier" name="test_generate_result_statistics" time="0.001" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplier" name="test_initialization" time="0.001" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplier" name="test_mask_rule_validation_integration" time="0.000" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplier" name="test_multiple_rules_same_packet" time="0.001" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplier" name="test_organize_rules_by_packet" time="0.001" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplier" name="test_recalculate_packet_checksums" time="0.001" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplier" name="test_statistics_tracking" time="0.000" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplier" name="test_update_packet_payload" time="0.001" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplier" name="test_validate_mask_boundaries" time="0.001"><failure message="AttributeError: 'ScapyMaskApplier' object has no attribute '_validate_mask_boundaries'. Did you mean: '_validate_boundaries'?">tests/unit/test_scapy_mask_applier.py:139: in test_validate_mask_boundaries
    self.assertTrue(self.applier._validate_mask_boundaries(
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'ScapyMaskApplier' object has no attribute '_validate_mask_boundaries'. Did you mean: '_validate_boundaries'?</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestMaskingRecipe" name="test_recipe_validation_index_out_of_range" time="0.001"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_1_data_structures.py:128: in test_recipe_validation_index_out_of_range
    instruction = PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_strategy_comprehensive.TestHierarchicalAnonymizationStrategy" name="test_strategy_initialization" time="0.000" /><testcase classname="tests.unit.test_strategy_comprehensive.TestHierarchicalAnonymizationStrategy" name="test_strategy_reset" time="0.000" /><testcase classname="tests.unit.test_strategy_comprehensive.TestHierarchicalAnonymizationStrategy" name="test_get_ip_map_empty" time="0.000" /><testcase classname="tests.unit.test_strategy_comprehensive.TestHierarchicalAnonymizationStrategy" name="test_prescan_addresses_with_files" time="0.024" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplierIntegration" name="test_end_to_end_workflow" time="0.001" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplierCoverageGaps" name="test_scapy_import_error_handling" time="0.001"><failure message="assert True is False">tests/unit/test_scapy_mask_applier.py:571: in test_scapy_import_error_handling
    assert result is False
E   assert True is False</failure></testcase><testcase classname="tests.unit.test_strategy_comprehensive.TestHierarchicalAnonymizationStrategy" name="test_create_mapping_basic" time="0.009" /><testcase classname="tests.unit.test_scapy_mask_applier.TestScapyMaskApplierCoverageGaps" name="test_apply_mask_rules_to_packet_exception_handling" time="0.005"><failure message="Exception: 掩码应用失败">tests/unit/test_scapy_mask_applier.py:605: in test_apply_mask_rules_to_packet_exception_handling
    result = applier._apply_mask_rules_to_packet(mock_packet, rules, 1)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/scapy_mask_applier.py:270: in _apply_mask_rules_to_packet
    if self._apply_single_mask_rule(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1169: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1173: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1228: in _execute_mock_call
    raise effect
E   Exception: 掩码应用失败</failure></testcase><testcase classname="tests.unit.test_strategy_comprehensive.TestHierarchicalAnonymizationStrategy" name="test_build_mapping_from_directory" time="0.007" /><testcase classname="tests.unit.test_strategy_comprehensive.TestHierarchicalAnonymizationStrategy" name="test_anonymize_packet_ipv4" time="0.001" /><testcase classname="tests.unit.test_strategy_comprehensive.TestHierarchicalAnonymizationStrategy" name="test_anonymize_packet_no_mapping" time="0.001" /><testcase classname="tests.unit.test_strategy_comprehensive.TestHierarchicalAnonymizationStrategy" name="test_anonymize_packet_non_ip" time="0.001" /><testcase classname="tests.unit.test_strategy_comprehensive.TestStrategyIntegration" name="test_strategy_complete_workflow" time="0.021" /><testcase classname="tests.unit.test_tcp_bidirectional_fix.TestTCPBidirectionalFix" name="test_end_to_end_bidirectional_processing" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_generate_mask_table'">tests/unit/test_tcp_bidirectional_fix.py:215: in test_end_to_end_bidirectional_processing
    mask_table = analyzer._generate_mask_table()
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_generate_mask_table'</failure></testcase><testcase classname="tests.integration.test_phase2_day8_integration.TestPhase2Day8Integration" name="test_input_validation_integration" time="0.002" /><testcase classname="tests.unit.test_tcp_bidirectional_fix.TestTCPBidirectionalFix" name="test_mask_table_separate_sequence_spaces" time="0.005"><failure message="TypeError: PacketAnalysis.__init__() got an unexpected keyword argument 'is_http_request'">tests/unit/test_tcp_bidirectional_fix.py:79: in test_mask_table_separate_sequence_spaces
    PacketAnalysis(
E   TypeError: PacketAnalysis.__init__() got an unexpected keyword argument 'is_http_request'</failure></testcase><testcase classname="tests.integration.test_phase2_day8_integration.TestPhase2Day8Integration" name="test_processor_display_and_description" time="0.001" /><testcase classname="tests.integration.test_phase2_day8_integration.TestPhase2Day8Integration" name="test_statistics_tracking_integration" time="0.001" /><testcase classname="tests.integration.test_phase2_day8_integration.TestPhase2Day8Integration" name="test_three_stage_integration" time="0.666"><failure message="AttributeError: 'dict' object has no attribute 'content_type'">tests/integration/test_phase2_day8_integration.py:149: in test_three_stage_integration
    result = processor.process_file(self.input_file, self.output_file)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:775: in process_file
    result = self._process_with_core_pipeline(input_path, output_path)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:861: in _process_with_core_pipeline
    tls_23_records = [r for r in tls_records if r.content_type == 23]
                                                ^^^^^^^^^^^^^^
E   AttributeError: 'dict' object has no attribute 'content_type'</failure></testcase><testcase classname="tests.unit.test_tcp_bidirectional_fix.TestTCPBidirectionalFix" name="test_pyshark_analyzer_directional_stream_id_generation" time="0.002"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_generate_stream_id'">tests/unit/test_tcp_bidirectional_fix.py:28: in test_pyshark_analyzer_directional_stream_id_generation
    stream_id_forward = self.analyzer._generate_stream_id(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_generate_stream_id'</failure></testcase><testcase classname="tests.unit.test_tcp_bidirectional_fix.TestTCPBidirectionalFix" name="test_scapy_rewriter_directional_lookup" time="0.001" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestPacketMaskInstruction" name="test_valid_instruction_creation" time="0.001"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_1_data_structures.py:25: in test_valid_instruction_creation
    instruction = PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestMaskingRecipe" name="test_recipe_validation_inconsistent_index" time="0.001"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_1_data_structures.py:141: in test_recipe_validation_inconsistent_index
    instruction = PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_processors.TestProcessorIntegration" name="test_processors_have_consistent_interface" time="0.657" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestPacketMaskingResult" name="test_result_methods" time="0.001" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestPacketMaskingResult" name="test_result_zero_processed_packets" time="0.000" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestDataStructureIntegration" name="test_complete_workflow_data_structures" time="0.001"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_1_data_structures.py:314: in test_complete_workflow_data_structures
    instruction1 = PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestPacketMaskInstruction" name="test_instruction_validation_negative_index" time="0.002"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_1_data_structures.py:42: in test_instruction_validation_negative_index
    PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestMaskingRecipe" name="test_recipe_validation_inconsistent_timestamp" time="0.001"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_1_data_structures.py:154: in test_recipe_validation_inconsistent_timestamp
    instruction = PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestPacketMaskInstruction" name="test_instruction_validation_negative_offset" time="0.001"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_1_data_structures.py:52: in test_instruction_validation_negative_offset
    PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestMaskingRecipe" name="test_recipe_methods" time="0.000"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_1_data_structures.py:167: in test_recipe_methods
    instruction = PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestBlindPacketMasker" name="test_initialization" time="0.000"><error message="failed on setup with &quot;TypeError: Cannot instantiate typing.Union&quot;">tests/unit/test_tcp_payload_masker_phase1_2_blind_masker.py:36: in setup_method
    (0, "123.456789"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</error></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestPacketMaskInstruction" name="test_instruction_validation_invalid_timestamp" time="0.001"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_1_data_structures.py:62: in test_instruction_validation_invalid_timestamp
    PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestMaskingStatistics" name="test_statistics_creation" time="0.000" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestMaskingStatistics" name="test_statistics_to_dict" time="0.000" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestPacketMaskingResult" name="test_valid_result_creation" time="0.000" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestPacketMaskingResult" name="test_result_validation_negative_processed" time="0.000" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestPacketMaskingResult" name="test_result_validation_negative_modified" time="0.000" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestPacketMaskingResult" name="test_result_validation_modified_exceeds_processed" time="0.001" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_performance.TestBlindMaskerPerformance" name="test_large_file_performance" time="0.025"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_2_performance.py:99: in test_large_file_performance
    input_file, recipe = self._create_test_file(packet_count, "large")
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_tcp_payload_masker_phase1_2_performance.py:209: in _create_test_file
    instructions[(i, timestamp)] = PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.integration.test_phase1_2_comprehensive_integration.TestPhase12ComprehensiveIntegration" name="test_existing_system_compatibility" time="0.018" /><testcase classname="tests.integration.test_phase1_2_comprehensive_integration.TestPhase12ComprehensiveIntegration" name="test_mask_table_advanced_features" time="0.004" /><testcase classname="tests.integration.test_phase1_2_integration_fixed.TestPhase12IntegrationFixed" name="test_complete_pipeline_integration_with_mocks" time="0.006"><failure message="RuntimeError: Stage 'TShark预处理器' 初始化失败">tests/integration/test_phase1_2_integration_fixed.py:128: in test_complete_pipeline_integration_with_mocks
    executor.register_stage(tshark_stage)
src/pktmask/core/trim/multi_stage_executor.py:93: in register_stage
    raise RuntimeError(f"Stage '{stage.name}' 初始化失败")
E   RuntimeError: Stage 'TShark预处理器' 初始化失败</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestBlindPacketMasker" name="test_process_packet_with_instruction" time="0.000"><error message="failed on setup with &quot;TypeError: Cannot instantiate typing.Union&quot;">tests/unit/test_tcp_payload_masker_phase1_2_blind_masker.py:36: in setup_method
    (0, "123.456789"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</error></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestPacketMaskInstruction" name="test_instruction_default_metadata" time="0.001"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_1_data_structures.py:71: in test_instruction_default_metadata
    instruction = PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.integration.test_phase1_2_integration_fixed.TestPhase12IntegrationFixed" name="test_data_flow_validation_with_mocks" time="0.520"><failure message="assert False&#10; +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x116d8b240&gt;.success">tests/integration/test_phase1_2_integration_fixed.py:228: in test_data_flow_validation_with_mocks
    assert pyshark_result.success
E   assert False
E    +  where False = &lt;pktmask.core.processors.base_processor.ProcessorResult object at 0x116d8b240&gt;.success</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_performance.TestBlindMaskerPerformance" name="test_different_mask_types_performance" time="0.007"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_2_performance.py:126: in test_different_mask_types_performance
    maskafter_time = self._test_mask_type_performance(
tests/unit/test_tcp_payload_masker_phase1_2_performance.py:230: in _test_mask_type_performance
    input_file, _ = self._create_test_file(packet_count, f"mask_{mask_type.lower()}")
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_tcp_payload_masker_phase1_2_performance.py:209: in _create_test_file
    instructions[(i, timestamp)] = PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestBlindPacketMasker" name="test_process_packet_without_instruction" time="0.001"><error message="failed on setup with &quot;TypeError: Cannot instantiate typing.Union&quot;">tests/unit/test_tcp_payload_masker_phase1_2_blind_masker.py:36: in setup_method
    (0, "123.456789"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</error></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_1_data_structures.TestMaskingRecipe" name="test_valid_recipe_creation" time="0.001"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_1_data_structures.py:86: in test_valid_recipe_creation
    instruction1 = PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_init_default_config" time="0.002"><failure message="AssertionError: assert 'EnhancedPySharkAnalyzer' == 'PyShark分析器'&#10;  &#10;  #x1B[0m#x1B[91m- PyShark分析器#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ EnhancedPySharkAnalyzer#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/test_pyshark_analyzer.py:171: in test_init_default_config
    assert analyzer.name == "PyShark分析器"
E   AssertionError: assert 'EnhancedPySharkAnalyzer' == 'PyShark分析器'
E     
E     #x1B[0m#x1B[91m- PyShark分析器#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ EnhancedPySharkAnalyzer#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_init_custom_config" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_http'">tests/unit/test_pyshark_analyzer.py:188: in test_init_custom_config
    assert analyzer._analyze_http is True
           ^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_http'</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_analyze_tls_layer_change_cipher_spec" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_tls_layer'">tests/unit/test_pyshark_analyzer.py:407: in test_analyze_tls_layer_change_cipher_spec
    analyzer._analyze_tls_layer(packet.tls, analysis)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_tls_layer'</failure></testcase><testcase classname="tests.integration.test_phase2_day8_integration.TestPhase2Day8AcceptanceCriteria" name="test_phase2_day8_acceptance" time="0.003" /><testcase classname="tests.integration.test_phase2_day9_processor_adapter_integration.TestPhase2Day9ProcessorAdapterIntegration" name="test_enhanced_processor_creation" time="0.003" /><testcase classname="tests.integration.test_phase2_day9_processor_adapter_integration.TestPhase2Day9ProcessorAdapterIntegration" name="test_interface_compatibility" time="0.002" /><testcase classname="tests.integration.test_phase2_day9_processor_adapter_integration.TestPhase2Day9ProcessorAdapterIntegration" name="test_mode_configuration_compatibility" time="1.117" /><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_analyze_tls_layer_alert" time="0.004"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_tls_layer'">tests/unit/test_pyshark_analyzer.py:423: in test_analyze_tls_layer_alert
    analyzer._analyze_tls_layer(packet.tls, analysis)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_tls_layer'</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_performance.TestBlindMaskerPerformance" name="test_memory_usage_stability" time="0.005"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_2_performance.py:167: in test_memory_usage_stability
    input_file, recipe = self._create_test_file(packet_count, f"memory_test_{i}")
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_tcp_payload_masker_phase1_2_performance.py:209: in _create_test_file
    instructions[(i, timestamp)] = PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_analyze_tls_layer_heartbeat" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_tls_layer'">tests/unit/test_pyshark_analyzer.py:439: in test_analyze_tls_layer_heartbeat
    analyzer._analyze_tls_layer(packet.tls, analysis)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_tls_layer'</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_analyze_tls_layer_unknown_content_type" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_tls_layer'">tests/unit/test_pyshark_analyzer.py:455: in test_analyze_tls_layer_unknown_content_type
    analyzer._analyze_tls_layer(packet.tls, analysis)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_tls_layer'</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_update_stream_info_new_stream" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_update_stream_info'">tests/unit/test_pyshark_analyzer.py:476: in test_update_stream_info_new_stream
    analyzer._update_stream_info(analysis)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_update_stream_info'</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_update_stream_info_existing_stream" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_update_stream_info'">tests/unit/test_pyshark_analyzer.py:503: in test_update_stream_info_existing_stream
    analyzer._update_stream_info(analysis1)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_update_stream_info'</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_analyze_packets" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_packets'">tests/unit/test_pyshark_analyzer.py:535: in test_analyze_packets
    packet_count = analyzer._analyze_packets(mock_cap, progress_callback)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_analyze_packets'</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_3_api.TestMaskPcapWithInstructions" name="test_consistency_verification" time="0.003"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_3_api.py:43: in setUp
    (0, "123456789.123"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_generate_mask_table_http" time="0.002"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_streams'">tests/unit/test_pyshark_analyzer.py:550: in test_generate_mask_table_http
    analyzer._streams[stream_id] = StreamInfo(
    ^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_streams'</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestBlindPacketMasker" name="test_apply_mask_after" time="0.000"><error message="failed on setup with &quot;TypeError: Cannot instantiate typing.Union&quot;">tests/unit/test_tcp_payload_masker_phase1_2_blind_masker.py:36: in setup_method
    (0, "123.456789"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</error></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_generate_mask_table_tls" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_streams'">tests/unit/test_pyshark_analyzer.py:593: in test_generate_mask_table_tls
    analyzer._streams[stream_id] = StreamInfo(
    ^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_streams'</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_generate_mask_table_generic" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_streams'">tests/unit/test_pyshark_analyzer.py:704: in test_generate_mask_table_generic
    analyzer._streams[stream_id] = StreamInfo(
    ^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_streams'</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_generate_statistics" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_streams'">tests/unit/test_pyshark_analyzer.py:741: in test_generate_statistics
    analyzer._streams[stream_id] = StreamInfo(
    ^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_streams'</failure></testcase><testcase classname="tests.integration.test_phase1_2_integration_fixed.TestPhase12IntegrationFixed" name="test_configuration_system_comprehensive" time="0.003" /><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_get_estimated_duration" time="0.006"><failure message="assert 0.5 &gt;= 2.0">tests/unit/test_pyshark_analyzer.py:782: in test_get_estimated_duration
    assert duration &gt;= 2.0  # 最小2秒
    ^^^^^^^^^^^^^^^^^^^^^^
E   assert 0.5 &gt;= 2.0</failure></testcase><testcase classname="tests.integration.test_phase1_2_integration_fixed.TestPhase12IntegrationFixed" name="test_mask_table_generation_and_application" time="0.002" /><testcase classname="tests.integration.test_real_data_validation.TestRealDataValidation" name="test_sample_category_validation[test_case_002_8]" time="0.001"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_real_data_validation.py:319: in validator
    return RealDataValidator()
           ^^^^^^^^^^^^^^^^^^^
tests/integration/test_real_data_validation.py:58: in __init__
    self.trimming = IntelligentTrimmingStep()
                    ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_3_api.TestMaskPcapWithInstructions" name="test_successful_processing" time="0.002"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_3_api.py:43: in setUp
    (0, "123456789.123"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_get_estimated_duration_no_file" time="0.002"><failure message="assert 1.0 == 10.0">tests/unit/test_pyshark_analyzer.py:796: in test_get_estimated_duration_no_file
    assert duration == 10.0  # 默认值
    ^^^^^^^^^^^^^^^^^^^^^^^
E   assert 1.0 == 10.0</failure></testcase><testcase classname="tests.integration.test_real_data_validation.TestRealDataValidation" name="test_comprehensive_real_data_validation" time="0.002"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_real_data_validation.py:319: in validator
    return RealDataValidator()
           ^^^^^^^^^^^^^^^^^^^
tests/integration/test_real_data_validation.py:58: in __init__
    self.trimming = IntelligentTrimmingStep()
                    ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_stage1_pipeline_enhanced_trimmer_integration.TestStage1Integration" name="test_adapter_error_handling" time="0.804" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestBlindPacketMasker" name="test_apply_mask_after_keep_zero" time="0.005"><error message="failed on setup with &quot;TypeError: Cannot instantiate typing.Union&quot;">tests/unit/test_tcp_payload_masker_phase1_2_blind_masker.py:36: in setup_method
    (0, "123.456789"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</error></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_get_required_tools" time="0.130"><failure message="AssertionError: assert [] == ['pyshark']&#10;  &#10;  Right contains one more item: #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33mpyshark#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  &#10;  Full diff:&#10;  #x1B[0m#x1B[92m+ []#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m- [#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m-     'pyshark',#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m- ]#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/test_pyshark_analyzer.py:803: in test_get_required_tools
    assert tools == ['pyshark']
E   AssertionError: assert [] == ['pyshark']
E     
E     Right contains one more item: #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33mpyshark#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     
E     Full diff:
E     #x1B[0m#x1B[92m+ []#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[91m- [#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[91m-     'pyshark',#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[91m- ]#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_3_api.TestMaskPcapWithInstructions" name="test_validation_failure" time="0.001"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_3_api.py:43: in setUp
    (0, "123456789.123"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestBlindPacketMasker" name="test_count_masked_bytes" time="0.001"><error message="failed on setup with &quot;TypeError: Cannot instantiate typing.Union&quot;">tests/unit/test_tcp_payload_masker_phase1_2_blind_masker.py:36: in setup_method
    (0, "123.456789"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</error></testcase><testcase classname="tests.unit.test_pyshark_analyzer.TestPySharkAnalyzer" name="test_check_tool_availability_available" time="0.003"><failure message="AssertionError: assert {} == {'pyshark': True}&#10;  &#10;  Right contains 1 more item:&#10;  #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mpyshark#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[94mTrue#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m&#10;  &#10;  Full diff:&#10;  #x1B[0m#x1B[92m+ {}#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m- {#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m-     'pyshark': True,#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m- }#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/test_pyshark_analyzer.py:811: in test_check_tool_availability_available
    assert availability == {'pyshark': True}
E   AssertionError: assert {} == {'pyshark': True}
E     
E     Right contains 1 more item:
E     #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mpyshark#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[94mTrue#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m
E     
E     Full diff:
E     #x1B[0m#x1B[92m+ {}#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[91m- {#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[91m-     'pyshark': True,#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[91m- }#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestBlindPacketMasker" name="test_apply_mask_after_keep_all" time="0.001"><error message="failed on setup with &quot;TypeError: Cannot instantiate typing.Union&quot;">tests/unit/test_tcp_payload_masker_phase1_2_blind_masker.py:36: in setup_method
    (0, "123.456789"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</error></testcase><testcase classname="tests.unit.test_tcp_sequence_masking_validation_framework.TestPhase4ProtocolStrategies" name="test_tls_strategy" time="0.001"><failure message="TypeError: TLSTrimStrategy.__init__() missing 1 required positional argument: 'config'">tests/unit/test_tcp_sequence_masking_validation_framework.py:274: in test_tls_strategy
    strategy = TLSTrimStrategy()
               ^^^^^^^^^^^^^^^^^
E   TypeError: TLSTrimStrategy.__init__() missing 1 required positional argument: 'config'</failure></testcase><testcase classname="tests.unit.test_tcp_sequence_masking_validation_framework.TestPhase4ProtocolStrategies" name="test_http_strategy" time="0.001"><failure message="TypeError: HTTPMaskStrategy.__init__() missing 1 required positional argument: 'config'">tests/unit/test_tcp_sequence_masking_validation_framework.py:290: in test_http_strategy
    strategy = HTTPMaskStrategy()
               ^^^^^^^^^^^^^^^^^^
E   TypeError: HTTPMaskStrategy.__init__() missing 1 required positional argument: 'config'</failure></testcase><testcase classname="tests.unit.test_tcp_sequence_masking_validation_framework.TestPhase4ProtocolStrategies" name="test_strategy_factory" time="0.001"><failure message="AssertionError: assert (False or False)&#10; +  where False = hasattr(&lt;src.pktmask.core.trim.strategies.factory.StrategyFactory object at 0x12702a710&gt;, 'register')&#10; +  and   False = hasattr(&lt;src.pktmask.core.trim.strategies.factory.StrategyFactory object at 0x12702a710&gt;, 'get_strategy')">tests/unit/test_tcp_sequence_masking_validation_framework.py:304: in test_strategy_factory
    assert hasattr(factory, 'register') or hasattr(factory, 'get_strategy')
E   AssertionError: assert (False or False)
E    +  where False = hasattr(&lt;src.pktmask.core.trim.strategies.factory.StrategyFactory object at 0x12702a710&gt;, 'register')
E    +  and   False = hasattr(&lt;src.pktmask.core.trim.strategies.factory.StrategyFactory object at 0x12702a710&gt;, 'get_strategy')</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_3_api.TestValidateMaskingRecipe" name="test_empty_instructions" time="0.059"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_3_api.py:159: in setUp
    (0, "123456789.123"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tcp_sequence_masking_validation_framework.TestPhase5EndToEndIntegration" name="test_complete_tls_workflow" time="0.002" /><testcase classname="tests.unit.test_tcp_sequence_masking_validation_framework.TestPhase5EndToEndIntegration" name="test_performance_benchmarks" time="0.001" /><testcase classname="tests.unit.test_tcp_sequence_masking_validation_framework.TestPhase5EndToEndIntegration" name="test_backward_compatibility" time="0.000" /><testcase classname="tests.unit.test_tcp_sequence_masking_validation_framework.TestTLSSampleValidation" name="test_tls_sample_file_exists" time="0.003" /><testcase classname="tests.unit.test_tcp_sequence_masking_validation_framework.TestTLSSampleValidation" name="test_expected_packet_numbers" time="0.001" /><testcase classname="tests.unit.test_tcp_sequence_masking_validation_simple.TestTLSSampleValidationSimple" name="test_tls_sample_file_exists" time="0.000" /><testcase classname="tests.unit.test_tcp_sequence_masking_validation_simple.TestTLSSampleValidationSimple" name="test_expected_packet_numbers" time="0.000" /><testcase classname="tests.unit.test_tcp_sequence_masking_validation_simple.TestTLSSampleValidationSimple" name="test_basic_imports" time="0.000" /><testcase classname="tests.unit.test_tcp_sequence_masking_validation_simple.TestTLSSampleValidationSimple" name="test_sequence_mask_table_basic" time="0.000" /><testcase classname="tests.unit.test_tcp_sequence_masking_validation_simple.TestTLSSampleValidationSimple" name="test_tcp_stream_basic" time="0.000" /><testcase classname="tests.unit.test_tcp_sequence_masking_validation_simple.TestTLSSampleValidationSimple" name="test_validation_framework_readiness" time="0.000"><skipped type="pytest.skip" message="关键文件缺失: ['src/pktmask/core/trim/stages/scapy_rewriter.py']">/Users/ricky/Downloads/PktMask/tests/unit/test_tcp_sequence_masking_validation_simple.py:149: 关键文件缺失: ['src/pktmask/core/trim/stages/scapy_rewriter.py']</skipped></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestBlindPacketMasker" name="test_statistics_tracking" time="0.003"><error message="failed on setup with &quot;TypeError: Cannot instantiate typing.Union&quot;">tests/unit/test_tcp_payload_masker_phase1_2_blind_masker.py:36: in setup_method
    (0, "123.456789"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</error></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestPacketProcessor" name="test_initialization" time="0.001" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestPacketProcessor" name="test_process_pcap_file_input_not_exists" time="0.001"><failure message="TypeError: MaskingRecipe.__init__() got an unexpected keyword argument 'instructions'">tests/unit/test_tcp_payload_masker_phase1_2_blind_masker.py:234: in test_process_pcap_file_input_not_exists
    recipe = MaskingRecipe(instructions={}, total_packets=0)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: MaskingRecipe.__init__() got an unexpected keyword argument 'instructions'</failure></testcase><testcase classname="tests.unit.test_tcp_sequence_masking_validation_simple.TestTLSSampleValidationSimple" name="test_performance_baseline" time="0.000" /><testcase classname="tests.unit.test_tls23_marker_cli" name="test_parse_args_and_env_check" time="0.007"><failure message="TypeError: _mock_tshark_version.&lt;locals&gt;._run() missing 2 required positional arguments: 'text' and 'capture_output'">tests/unit/test_tls23_marker_cli.py:64: in test_parse_args_and_env_check
    tls23.main(argv)
src/pktmask/tools/tls23_marker.py:590: in main
    subprocess.run(editcap_cmd, check=True)
E   TypeError: _mock_tshark_version.&lt;locals&gt;._run() missing 2 required positional arguments: 'text' and 'capture_output'</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestPacketProcessor" name="test_reconstruct_packet" time="0.013" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestBlindPacketMasker" name="test_apply_mask_range" time="0.001"><error message="failed on setup with &quot;TypeError: Cannot instantiate typing.Union&quot;">tests/unit/test_tcp_payload_masker_phase1_2_blind_masker.py:36: in setup_method
    (0, "123.456789"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</error></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestPacketProcessor" name="test_fix_checksums" time="0.009" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestPacketProcessor" name="test_write_and_verify_packets" time="0.007" /><testcase classname="tests.unit.test_tls23_marker_cli" name="test_version_too_low" time="0.005" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestPacketProcessor" name="test_verify_output_file_invalid" time="0.001" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestPacketProcessor" name="test_process_packets_with_errors" time="0.004"><failure message="TypeError: MaskingRecipe.__init__() got an unexpected keyword argument 'instructions'">tests/unit/test_tcp_payload_masker_phase1_2_blind_masker.py:307: in test_process_packets_with_errors
    recipe = MaskingRecipe(instructions={}, total_packets=0)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: MaskingRecipe.__init__() got an unexpected keyword argument 'instructions'</failure></testcase><testcase classname="tests.unit.test_tls23_marker_phase3" name="test_phase3_supplements_missing_header" time="0.003"><failure message="TypeError: _mock_subprocess_for_phase3.&lt;locals&gt;._run() missing 2 required positional arguments: 'text' and 'capture_output'">tests/unit/test_tls23_marker_phase3.py:91: in test_phase3_supplements_missing_header
    tls23.main(argv)
src/pktmask/tools/tls23_marker.py:590: in main
    subprocess.run(editcap_cmd, check=True)
E   TypeError: _mock_subprocess_for_phase3.&lt;locals&gt;._run() missing 2 required positional arguments: 'text' and 'capture_output'</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestIntegration" name="test_end_to_end_masking" time="0.008"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_2_blind_masker.py:353: in test_end_to_end_masking
    (0, "123.456789"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tls23_marker_phase4" name="test_phase4_annotation" time="0.002" /><testcase classname="tests.unit.test_tls_13_opaque_type_fix.TestTLS13OpaqueTypeFix" name="test_empty_or_missing_fields" time="0.001" /><testcase classname="tests.unit.test_tls_13_opaque_type_fix.TestTLS13OpaqueTypeFix" name="test_logging_field_source_info" time="0.003"><failure message="AssertionError: debug('TLS记录0使用opaque_type (TLS 1.3): 23') call not found&#10;&#10;pytest introspection follows:&#10;&#10;Args:&#10;assert ('TLS记录0使用opaque_type[0] (TLS 1.3): 23',) == ('TLS记录0使用opaque_type (TLS 1.3): 23',)&#10;  &#10;  At index 0 diff: #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33mTLS记录0使用opaque_type[0] (TLS 1.3): 23#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33mTLS记录0使用opaque_type (TLS 1.3): 23#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  &#10;  Full diff:&#10;  #x1B[0m#x1B[90m #x1B[39;49;00m (#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m-     'TLS记录0使用opaque_type (TLS 1.3): 23',#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+     'TLS记录0使用opaque_type[0] (TLS 1.3): 23',#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  ?                         +++#x1B[90m#x1B[39;49;00m&#10;  #x1B[90m #x1B[39;49;00m )#x1B[90m#x1B[39;49;00m">/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1050: in assert_any_call
    raise AssertionError(
E   AssertionError: debug('TLS记录0使用opaque_type (TLS 1.3): 23') call not found

During handling of the above exception, another exception occurred:
tests/unit/test_tls_13_opaque_type_fix.py:197: in test_logging_field_source_info
    mock_debug.assert_any_call("TLS记录0使用opaque_type (TLS 1.3): 23")
E   AssertionError: debug('TLS记录0使用opaque_type (TLS 1.3): 23') call not found
E   
E   pytest introspection follows:
E   
E   Args:
E   assert ('TLS记录0使用opaque_type[0] (TLS 1.3): 23',) == ('TLS记录0使用opaque_type (TLS 1.3): 23',)
E     
E     At index 0 diff: #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33mTLS记录0使用opaque_type[0] (TLS 1.3): 23#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33mTLS记录0使用opaque_type (TLS 1.3): 23#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     
E     Full diff:
E     #x1B[0m#x1B[90m #x1B[39;49;00m (#x1B[90m#x1B[39;49;00m
E     #x1B[91m-     'TLS记录0使用opaque_type (TLS 1.3): 23',#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[92m+     'TLS记录0使用opaque_type[0] (TLS 1.3): 23',#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     ?                         +++#x1B[90m#x1B[39;49;00m
E     #x1B[90m #x1B[39;49;00m )#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_3_api.TestValidateMaskingRecipe" name="test_invalid_total_packets" time="0.002"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_3_api.py:159: in setUp
    (0, "123456789.123"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestBlindPacketMasker" name="test_apply_keep_all" time="0.001"><error message="failed on setup with &quot;TypeError: Cannot instantiate typing.Union&quot;">tests/unit/test_tcp_payload_masker_phase1_2_blind_masker.py:36: in setup_method
    (0, "123.456789"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</error></testcase><testcase classname="tests.unit.test_tls_13_opaque_type_fix.TestTLS13OpaqueTypeFix" name="test_mixed_tls_versions_in_stream" time="0.003" /><testcase classname="tests.unit.test_tls_13_opaque_type_fix.TestTLS13OpaqueTypeFix" name="test_tls_12_content_type_parsing" time="0.060" /><testcase classname="tests.unit.test_tls_13_opaque_type_fix.TestTLS13OpaqueTypeFix" name="test_tls_13_opaque_type_parsing" time="0.001" /><testcase classname="tests.unit.test_tls_13_opaque_type_fix.TestTLS13OpaqueTypeFix" name="test_tls_13_priority_over_content_type" time="0.001"><failure message="AssertionError: 22 != 23">tests/unit/test_tls_13_opaque_type_fix.py:100: in test_tls_13_priority_over_content_type
    self.assertEqual(record.content_type, 23)  # 应该是opaque_type的值23，而不是content_type的值22
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AssertionError: 22 != 23</failure></testcase><testcase classname="tests.unit.test_tls_13_opaque_type_fix.TestTLS13OpaqueTypeFix" name="test_tshark_command_includes_both_fields" time="0.001" /><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGenerator" name="test_init_default_config" time="0.000" /><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGenerator" name="test_init_custom_config" time="0.001" /><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGenerator" name="test_generate_rules_empty_input" time="0.001" /><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGenerator" name="test_generate_rules_single_record" time="0.002"><failure message="AssertionError: assert 100 == 95&#10; +  where 100 = MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=0, tls_record_length=105, mask_offset=5, mask_length=100, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23).mask_length">tests/unit/test_tls_mask_rule_generator.py:97: in test_generate_rules_single_record
    assert rule.mask_length == 95  # 100 - 5
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AssertionError: assert 100 == 95
E    +  where 100 = MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=0, tls_record_length=105, mask_offset=5, mask_length=100, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23).mask_length</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_performance.TestBlindMaskerPerformance" name="test_small_file_performance" time="0.007"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_2_performance.py:45: in test_small_file_performance
    input_file, recipe = self._create_test_file(packet_count, "small")
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_tcp_payload_masker_phase1_2_performance.py:209: in _create_test_file
    instructions[(i, timestamp)] = PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tls_models.TestMaskAction" name="test_action_values" time="0.001" /><testcase classname="tests.unit.test_tls_models.TestMaskAction" name="test_action_count" time="0.000" /><testcase classname="tests.unit.test_tls_models.TestTLSRecordInfo" name="test_valid_tls_record_creation" time="0.001" /><testcase classname="tests.unit.test_tls_models.TestTLSRecordInfo" name="test_invalid_content_type" time="0.002" /><testcase classname="tests.unit.test_tls_models.TestTLSRecordInfo" name="test_negative_length" time="0.001" /><testcase classname="tests.unit.test_tls_models.TestTLSRecordInfo" name="test_negative_offset" time="0.001" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_3_api.TestValidateMaskingRecipe" name="test_nonexistent_file" time="0.001"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_3_api.py:159: in setUp
    (0, "123456789.123"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tls_models.TestTLSRecordInfo" name="test_packet_not_in_spans" time="0.001" /><testcase classname="tests.unit.test_tls_models.TestTLSRecordInfo" name="test_content_type_names" time="0.001" /><testcase classname="tests.unit.test_tls_models.TestTLSRecordInfo" name="test_processing_strategies" time="0.001" /><testcase classname="tests.unit.test_tls_models.TestTLSRecordInfo" name="test_cross_packet_detection" time="0.001" /><testcase classname="tests.integration.test_phase2_day9_processor_adapter_integration.TestPhase2Day9ProcessorAdapterIntegration" name="test_processor_adapter_mode_error_handling" time="0.005" /><testcase classname="tests.unit.test_tls_models.TestTLSRecordInfo" name="test_version_strings" time="0.001" /><testcase classname="tests.integration.test_phase2_day9_processor_adapter_integration.TestPhase2Day9ProcessorAdapterIntegration" name="test_processor_adapter_mode_file_processing" time="0.002" /><testcase classname="tests.unit.test_tls_models.TestMaskRule" name="test_valid_mask_rule_creation" time="0.001" /><testcase classname="tests.integration.test_phase2_day9_processor_adapter_integration.TestPhase2Day9ProcessorAdapterIntegration" name="test_processor_adapter_mode_initialization" time="0.001" /><testcase classname="tests.unit.test_tls_models.TestMaskRule" name="test_negative_values_validation" time="0.003"><failure message="Failed: DID NOT RAISE &lt;class 'ValueError'&gt;">tests/unit/test_tls_models.py:287: in test_negative_values_validation
    with pytest.raises(ValueError, match="掩码长度不能为负数"):
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   Failed: DID NOT RAISE &lt;class 'ValueError'&gt;</failure></testcase><testcase classname="tests.integration.test_phase2_day9_processor_adapter_integration.TestPhase2Day9ProcessorAdapterIntegration" name="test_processor_adapter_mode_initialization_fallback" time="0.002" /><testcase classname="tests.integration.test_phase3_day15_enhanced_validation.TestPhase3Day15EnhancedValidation" name="test_enhanced_marker_tool_integration" time="0.002" /><testcase classname="tests.integration.test_phase3_day15_enhanced_validation.TestPhase3Day15EnhancedValidation" name="test_validate_boundary_safety" time="0.003" /><testcase classname="tests.integration.test_phase3_day15_enhanced_validation.TestPhase3Day15EnhancedValidation" name="test_validate_complete_preservation" time="0.003" /><testcase classname="tests.unit.test_tls_models.TestMaskRule" name="test_boundary_validation" time="0.001" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_3_api.TestPrivateHelperFunctions" name="test_validate_instructions" time="0.001"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_3_api.py:288: in test_validate_instructions
    (0, "123456789.123"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tls_models.TestMaskRule" name="test_invalid_tls_record_type" time="0.074" /><testcase classname="tests.integration.test_stage1_pipeline_enhanced_trimmer_integration.TestStage1Integration" name="test_adapter_in_pipeline_context" time="0.730"><failure message="AssertionError: False is not true">tests/integration/test_stage1_pipeline_enhanced_trimmer_integration.py:122: in test_adapter_in_pipeline_context
    self.assertTrue(result.success)
E   AssertionError: False is not true</failure></testcase><testcase classname="tests.unit.test_tls_models.TestMaskRule" name="test_absolute_positions" time="0.000" /><testcase classname="tests.unit.test_tls_models.TestMaskRule" name="test_is_mask_operation" time="0.001" /><testcase classname="tests.unit.test_tls_models.TestMaskRule" name="test_description_generation" time="0.001" /><testcase classname="tests.unit.test_tls_models.TestTLSAnalysisResult" name="test_analysis_result_creation" time="0.000" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_blind_masker.TestBlindPacketMasker" name="test_apply_mask_instruction_invalid_offset" time="0.001"><error message="failed on setup with &quot;TypeError: Cannot instantiate typing.Union&quot;">tests/unit/test_tcp_payload_masker_phase1_2_blind_masker.py:36: in setup_method
    (0, "123.456789"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</error></testcase><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGenerator" name="test_generate_rules_multiple_records_same_packet" time="0.004"><failure message="AssertionError: assert 100 == 95&#10; +  where 100 = MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=55, tls_record_length=105, mask_offset=5, mask_length=100, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23).mask_length">tests/unit/test_tls_mask_rule_generator.py:141: in test_generate_rules_multiple_records_same_packet
    assert app_data_rule.mask_length == 95
E   AssertionError: assert 100 == 95
E    +  where 100 = MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=55, tls_record_length=105, mask_offset=5, mask_length=100, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23).mask_length</failure></testcase><testcase classname="tests.unit.test_tls_models.TestTLSAnalysisResult" name="test_tls_record_types_statistics" time="0.001" /><testcase classname="tests.unit.test_tls_models.TestTLSAnalysisResult" name="test_cross_packet_ratio" time="0.004" /><testcase classname="tests.unit.test_tls_models.TestTLSAnalysisResult" name="test_empty_records_ratio" time="0.001" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_3_api.TestIntegrationScenarios" name="test_complete_workflow_mock" time="0.001"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_3_api.py:335: in test_complete_workflow_mock
    (0, "123456789.123"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tls_models.TestTLSAnalysisResult" name="test_summary_generation" time="0.000" /><testcase classname="tests.unit.test_tls_models.TestUtilityFunctions" name="test_create_mask_rule_for_keep_all_record" time="0.002" /><testcase classname="tests.unit.test_tls_models.TestUtilityFunctions" name="test_create_mask_rule_for_application_data_complete" time="0.001"><failure message="AssertionError: assert 100 == 95&#10; +  where 100 = MaskRule(packet_number=1, tcp_stream_id='test_stream', tls_record_offset=0, tls_record_length=105, mask_offset=5, mask_length=100, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23).mask_length">tests/unit/test_tls_models.py:545: in test_create_mask_rule_for_application_data_complete
    assert rule.mask_length == 95  # 100 - 5
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AssertionError: assert 100 == 95
E    +  where 100 = MaskRule(packet_number=1, tcp_stream_id='test_stream', tls_record_offset=0, tls_record_length=105, mask_offset=5, mask_length=100, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23).mask_length</failure></testcase><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGenerator" name="test_generate_rules_different_tls_types" time="0.003"><failure message="AssertionError: assert 100 == 95&#10; +  where 100 = MaskRule(packet_number=4, tcp_stream_id='TCP_4', tls_record_offset=0, tls_record_length=105, mask_offset=5, mask_length=100, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23).mask_length">tests/unit/test_tls_mask_rule_generator.py:174: in test_generate_rules_different_tls_types
    assert rule.mask_length == expected_mask_length
E   AssertionError: assert 100 == 95
E    +  where 100 = MaskRule(packet_number=4, tcp_stream_id='TCP_4', tls_record_offset=0, tls_record_length=105, mask_offset=5, mask_length=100, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23).mask_length</failure></testcase><testcase classname="tests.unit.test_tls_models.TestUtilityFunctions" name="test_create_mask_rule_for_application_data_incomplete" time="0.002"><failure message="AssertionError: assert 'TLS-23 不完整记录或纯头部：完全保留' == 'TLS-23 不完整记录或无消息体：完全保留'&#10;  &#10;  #x1B[0m#x1B[91m- TLS-23 不完整记录或无消息体：完全保留#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  ?              ^^^^#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ TLS-23 不完整记录或纯头部：完全保留#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  ?              ^^^#x1B[90m#x1B[39;49;00m">tests/unit/test_tls_models.py:568: in test_create_mask_rule_for_application_data_incomplete
    assert "TLS-23 不完整记录或纯头部：完全保留" == rule.reason
E   AssertionError: assert 'TLS-23 不完整记录或纯头部：完全保留' == 'TLS-23 不完整记录或无消息体：完全保留'
E     
E     #x1B[0m#x1B[91m- TLS-23 不完整记录或无消息体：完全保留#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     ?              ^^^^#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ TLS-23 不完整记录或纯头部：完全保留#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     ?              ^^^#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_2_performance.TestBlindMaskerPerformance" name="test_medium_file_performance" time="0.002"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_2_performance.py:72: in test_medium_file_performance
    input_file, recipe = self._create_test_file(packet_count, "medium")
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_tcp_payload_masker_phase1_2_performance.py:209: in _create_test_file
    instructions[(i, timestamp)] = PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tls_models.TestUtilityFunctions" name="test_create_mask_rule_for_application_data_header_only" time="0.001"><failure message="AssertionError: assert &lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt; == &lt;MaskAction.KEEP_ALL: 'keep_all'&gt;&#10; +  where &lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt; = MaskRule(packet_number=1, tcp_stream_id='test_stream', tls_record_offset=0, tls_record_length=10, mask_offset=5, mask_length=5, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23).action&#10; +  and   &lt;MaskAction.KEEP_ALL: 'keep_all'&gt; = MaskAction.KEEP_ALL">tests/unit/test_tls_models.py:585: in test_create_mask_rule_for_application_data_header_only
    assert rule.action == MaskAction.KEEP_ALL
E   AssertionError: assert &lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt; == &lt;MaskAction.KEEP_ALL: 'keep_all'&gt;
E    +  where &lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt; = MaskRule(packet_number=1, tcp_stream_id='test_stream', tls_record_offset=0, tls_record_length=10, mask_offset=5, mask_length=5, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23).action
E    +  and   &lt;MaskAction.KEEP_ALL: 'keep_all'&gt; = MaskAction.KEEP_ALL</failure></testcase><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorGrouping" name="test_group_records_by_packet" time="0.001" /><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorCrossPacket" name="test_cross_packet_detection_enabled" time="0.003"><failure message="AssertionError: assert 2 == 1&#10; +  where 2 = len([MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=0, tls_record_length=1005, mask_offset=5, mask_length=1000, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u91cd\u7ec4\u5305\u63a9\u7801\uff1a\u4fdd\u75595\u5b57\u8282\u5934\u90e8\uff0c\u63a9\u78011000\u5b57\u8282\u8f7d\u8377 (\u8de8\u5305[1, 2])', tls_record_type=23), MaskRule(packet_number=2, tcp_stream_id='TCP_1', tls_record_offset=0, tls_record_length=0, mask_offset=0, mask_length=-1, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u4e2d\u95f4\u6bb5\u63a9\u7801\uff1a\u63a9\u7801\u6574\u4e2a\u8f7d\u8377 (\u5206\u6bb52/2, \u91cd\u7ec4\u5230\u53051)', tls_record_type=23)])">tests/unit/test_tls_mask_rule_generator.py:227: in test_cross_packet_detection_enabled
    assert len(rules) == 1
E   AssertionError: assert 2 == 1
E    +  where 2 = len([MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=0, tls_record_length=1005, mask_offset=5, mask_length=1000, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u91cd\u7ec4\u5305\u63a9\u7801\uff1a\u4fdd\u75595\u5b57\u8282\u5934\u90e8\uff0c\u63a9\u78011000\u5b57\u8282\u8f7d\u8377 (\u8de8\u5305[1, 2])', tls_record_type=23), MaskRule(packet_number=2, tcp_stream_id='TCP_1', tls_record_offset=0, tls_record_length=0, mask_offset=0, mask_length=-1, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u4e2d\u95f4\u6bb5\u63a9\u7801\uff1a\u63a9\u7801\u6574\u4e2a\u8f7d\u8377 (\u5206\u6bb52/2, \u91cd\u7ec4\u5230\u53051)', tls_record_type=23)])</failure></testcase><testcase classname="tests.unit.test_tls_models.TestUtilityFunctions" name="test_validate_tls_record_boundary_valid" time="0.001" /><testcase classname="tests.unit.test_tls_models.TestUtilityFunctions" name="test_validate_tls_record_boundary_invalid" time="0.001" /><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorCrossPacket" name="test_cross_packet_detection_disabled" time="0.002"><failure message="AssertionError: assert 2 == 1&#10; +  where 2 = len([MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=0, tls_record_length=105, mask_offset=5, mask_length=100, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u91cd\u7ec4\u5305\u63a9\u7801\uff1a\u4fdd\u75595\u5b57\u8282\u5934\u90e8\uff0c\u63a9\u7801100\u5b57\u8282\u8f7d\u8377 (\u8de8\u5305[1, 2])', tls_record_type=23), MaskRule(packet_number=2, tcp_stream_id='TCP_1', tls_record_offset=0, tls_record_length=0, mask_offset=0, mask_length=-1, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u4e2d\u95f4\u6bb5\u63a9\u7801\uff1a\u63a9\u7801\u6574\u4e2a\u8f7d\u8377 (\u5206\u6bb52/2, \u91cd\u7ec4\u5230\u53051)', tls_record_type=23)])">tests/unit/test_tls_mask_rule_generator.py:253: in test_cross_packet_detection_disabled
    assert len(rules) == 1
E   AssertionError: assert 2 == 1
E    +  where 2 = len([MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=0, tls_record_length=105, mask_offset=5, mask_length=100, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u91cd\u7ec4\u5305\u63a9\u7801\uff1a\u4fdd\u75595\u5b57\u8282\u5934\u90e8\uff0c\u63a9\u7801100\u5b57\u8282\u8f7d\u8377 (\u8de8\u5305[1, 2])', tls_record_type=23), MaskRule(packet_number=2, tcp_stream_id='TCP_1', tls_record_offset=0, tls_record_length=0, mask_offset=0, mask_length=-1, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u4e2d\u95f4\u6bb5\u63a9\u7801\uff1a\u63a9\u7801\u6574\u4e2a\u8f7d\u8377 (\u5206\u6bb52/2, \u91cd\u7ec4\u5230\u53051)', tls_record_type=23)])</failure></testcase><testcase classname="tests.unit.test_tls_models.TestUtilityFunctions" name="test_get_tls_processing_strategy" time="0.003" /><testcase classname="tests.unit.test_tls_reassembly_fix.TestTLSReassemblyFix" name="test_generate_masks_with_reassembly" time="0.002"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_generate_tls_masks'">tests/unit/test_tls_reassembly_fix.py:127: in test_generate_masks_with_reassembly
    self.analyzer._generate_tls_masks(mask_table, stream_id, packets)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_generate_tls_masks'</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_3_api.TestValidateMaskingRecipe" name="test_valid_recipe_without_file" time="0.001"><failure message="TypeError: Cannot instantiate typing.Union">tests/unit/test_tcp_payload_masker_phase1_3_api.py:159: in setUp
    (0, "123456789.123"): PacketMaskInstruction(
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:1317: in __call__
    result = self.__origin__(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/typing.py:560: in __call__
    raise TypeError(f"Cannot instantiate {self!r}")
E   TypeError: Cannot instantiate typing.Union</failure></testcase><testcase classname="tests.unit.test_tls_reassembly_fix.TestTLSReassemblyFix" name="test_multiple_preceding_packets" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_reassemble_tls_stream'">tests/unit/test_tls_reassembly_fix.py:247: in test_multiple_preceding_packets
    enhanced_packets = self.analyzer._reassemble_tls_stream(packets)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_reassemble_tls_stream'</failure></testcase><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorCrossPacket" name="test_detect_cross_packet_in_stream" time="0.001" /><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorRuleOptimization" name="test_optimization_enabled" time="0.002" /><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorRuleOptimization" name="test_optimization_disabled" time="0.000" /><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorRuleOptimization" name="test_can_merge_rules_different_actions" time="0.000" /><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorRuleOptimization" name="test_can_merge_rules_different_packets" time="0.000" /><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorRuleOptimization" name="test_can_merge_rules_non_adjacent" time="0.000" /><testcase classname="tests.unit.test_tls_reassembly_fix.TestTLSReassemblyFix" name="test_non_contiguous_packets_not_reassembled" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_reassemble_tls_stream'">tests/unit/test_tls_reassembly_fix.py:190: in test_non_contiguous_packets_not_reassembled
    enhanced_packets = self.analyzer._reassemble_tls_stream(packets)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_reassemble_tls_stream'</failure></testcase><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorRuleOptimization" name="test_merge_rules_calculation" time="0.000" /><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorBoundaryHandling" name="test_boundary_validation_enabled" time="0.002"><failure message="AssertionError: assert 1 == 0&#10; +  where 1 = len([MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=10, tls_record_length=105, mask_offset=5, mask_length=100, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23)])">tests/unit/test_tls_mask_rule_generator.py:399: in test_boundary_validation_enabled
    assert len(rules) == 0
E   AssertionError: assert 1 == 0
E    +  where 1 = len([MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=10, tls_record_length=105, mask_offset=5, mask_length=100, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23)])</failure></testcase><testcase classname="tests.unit.test_tls_reassembly_fix.TestTLSReassemblyFix" name="test_tls_handshake_across_tcp_segments" time="0.001"><failure message="AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_reassemble_tls_stream'">tests/unit/test_tls_reassembly_fix.py:64: in test_tls_handshake_across_tcp_segments
    enhanced_packets = self.analyzer._reassemble_tls_stream(packets)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'EnhancedPySharkAnalyzer' object has no attribute '_reassemble_tls_stream'</failure></testcase><testcase classname="tests.unit.test_tls_strategy.TestTLSTrimStrategy" name="test_strategy_properties" time="0.001" /><testcase classname="tests.unit.test_tls_strategy.TestTLSTrimStrategy" name="test_can_handle_valid_tls" time="0.001" /><testcase classname="tests.unit.test_tls_strategy.TestTLSTrimStrategy" name="test_empty_payload_analysis" time="0.002" /><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorBoundaryHandling" name="test_boundary_validation_disabled" time="0.001" /><testcase classname="tests.unit.test_tls_strategy.TestTLSTrimStrategy" name="test_client_hello_analysis" time="0.001" /><testcase classname="tests.unit.test_tcp_sequence_masking_validation_framework.TestPhase1DataStructures" name="test_tcp_stream_id_generation" time="0.004"><failure message="AssertionError: assert 'TCP_192.168.1.100:12345_10.0.0.1:443_reverse' == 'TCP_10.0.0.1:443_192.168.1.100:12345_reverse'&#10;  &#10;  #x1B[0m#x1B[91m- TCP_10.0.0.1:443_192.168.1.100:12345_reverse#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ TCP_192.168.1.100:12345_10.0.0.1:443_reverse#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/test_tcp_sequence_masking_validation_framework.py:70: in test_tcp_stream_id_generation
    assert reverse_stream.stream_id == expected_reverse_id
E   AssertionError: assert 'TCP_192.168.1.100:12345_10.0.0.1:443_reverse' == 'TCP_10.0.0.1:443_192.168.1.100:12345_reverse'
E     
E     #x1B[0m#x1B[91m- TCP_10.0.0.1:443_192.168.1.100:12345_reverse#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ TCP_192.168.1.100:12345_10.0.0.1:443_reverse#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorBoundaryHandling" name="test_incomplete_record_handling" time="0.005"><failure message="AssertionError: assert 2 == 1&#10; +  where 2 = len([MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=0, tls_record_length=105, mask_offset=5, mask_length=100, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u91cd\u7ec4\u5305\u63a9\u7801\uff1a\u4fdd\u75595\u5b57\u8282\u5934\u90e8\uff0c\u63a9\u7801100\u5b57\u8282\u8f7d\u8377 (\u8de8\u5305[1, 2])', tls_record_type=23), MaskRule(packet_number=2, tcp_stream_id='TCP_1', tls_record_offset=0, tls_record_length=0, mask_offset=0, mask_length=-1, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u4e2d\u95f4\u6bb5\u63a9\u7801\uff1a\u63a9\u7801\u6574\u4e2a\u8f7d\u8377 (\u5206\u6bb52/2, \u91cd\u7ec4\u5230\u53051)', tls_record_type=23)])">tests/unit/test_tls_mask_rule_generator.py:439: in test_incomplete_record_handling
    assert len(rules) == 1
E   AssertionError: assert 2 == 1
E    +  where 2 = len([MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=0, tls_record_length=105, mask_offset=5, mask_length=100, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u91cd\u7ec4\u5305\u63a9\u7801\uff1a\u4fdd\u75595\u5b57\u8282\u5934\u90e8\uff0c\u63a9\u7801100\u5b57\u8282\u8f7d\u8377 (\u8de8\u5305[1, 2])', tls_record_type=23), MaskRule(packet_number=2, tcp_stream_id='TCP_1', tls_record_offset=0, tls_record_length=0, mask_offset=0, mask_length=-1, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u8de8\u5305\u4e2d\u95f4\u6bb5\u63a9\u7801\uff1a\u63a9\u7801\u6574\u4e2a\u8f7d\u8377 (\u5206\u6bb52/2, \u91cd\u7ec4\u5230\u53051)', tls_record_type=23)])</failure></testcase><testcase classname="tests.unit.test_tls_strategy.TestTLSTrimStrategy" name="test_tls_version_string_conversion" time="0.001" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorFallback" name="test_fallback_config_initialization" time="0.013" /><testcase classname="tests.unit.test_tcp_sequence_masking_validation_framework.TestPhase1DataStructures" name="test_mask_table_operations" time="0.001" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorFallback" name="test_tshark_unavailable_fallback" time="0.505"><failure message="assert {}&#10; +  where {} = &lt;src.pktmask.core.processors.tshark_enhanced_mask_processor.TSharkEnhancedMaskProcessor object at 0x12702bd90&gt;._fallback_processors">tests/unit/test_tshark_enhanced_mask_processor_fallback.py:66: in test_tshark_unavailable_fallback
    assert processor._fallback_processors  # 应该有降级处理器
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   assert {}
E    +  where {} = &lt;src.pktmask.core.processors.tshark_enhanced_mask_processor.TSharkEnhancedMaskProcessor object at 0x12702bd90&gt;._fallback_processors</failure></testcase><testcase classname="tests.unit.test_tcp_sequence_masking_validation_framework.TestPhase1DataStructures" name="test_tcp_stream_manager" time="0.001"><failure message="TypeError: TCPStreamManager.get_or_create_stream() missing 3 required positional arguments: 'dst_ip', 'dst_port', and 'direction'">tests/unit/test_tcp_sequence_masking_validation_framework.py:116: in test_tcp_stream_manager
    forward_stream = manager.get_or_create_stream(connection, ConnectionDirection.FORWARD)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: TCPStreamManager.get_or_create_stream() missing 3 required positional arguments: 'dst_ip', 'dst_port', and 'direction'</failure></testcase><testcase classname="tests.unit.test_tcp_sequence_masking_validation_framework.TestPhase2PySharkAnalyzer" name="test_tls_sample_analysis" time="0.001"><failure message="TypeError: StageContext.__init__() got an unexpected keyword argument 'mask_table_file'">tests/unit/test_tcp_sequence_masking_validation_framework.py:142: in test_tls_sample_analysis
    context = StageContext(
E   TypeError: StageContext.__init__() got an unexpected keyword argument 'mask_table_file'</failure></testcase><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorFallback" name="test_tshark_available_core_components_success" time="0.019" /><testcase classname="tests.unit.test_tcp_sequence_masking_validation_framework.TestPhase2PySharkAnalyzer" name="test_tls_record_parsing" time="0.001"><failure message="TypeError: BaseStage.initialize() takes 1 positional argument but 2 were given">tests/unit/test_tcp_sequence_masking_validation_framework.py:188: in test_tls_record_parsing
    analyzer.initialize({})
E   TypeError: BaseStage.initialize() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorBoundaryHandling" name="test_max_rules_per_packet_limit" time="0.003"><failure message="AssertionError: assert 3 == 2&#10; +  where 3 = len([MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=0, tls_record_length=55, mask_offset=0, mask_length=0, action=&lt;MaskAction.KEEP_ALL: 'keep_all'&gt;, reason='TLS-22 \u534f\u8bae\u5b8c\u5168\u4fdd\u7559\u7b56\u7565', tls_record_type=22), MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=55, tls_record_length=105, mask_offset=5, mask_length=100, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23), MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=160, tls_record_length=25, mask_offset=0, mask_length=0, action=&lt;MaskAction.KEEP_ALL: 'keep_all'&gt;, reason='TLS-21 \u534f\u8bae\u5b8c\u5168\u4fdd\u7559\u7b56\u7565', tls_record_type=21)])">tests/unit/test_tls_mask_rule_generator.py:463: in test_max_rules_per_packet_limit
    assert len(rules) == 2
E   AssertionError: assert 3 == 2
E    +  where 3 = len([MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=0, tls_record_length=55, mask_offset=0, mask_length=0, action=&lt;MaskAction.KEEP_ALL: 'keep_all'&gt;, reason='TLS-22 \u534f\u8bae\u5b8c\u5168\u4fdd\u7559\u7b56\u7565', tls_record_type=22), MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=55, tls_record_length=105, mask_offset=5, mask_length=100, action=&lt;MaskAction.MASK_PAYLOAD: 'mask_payload'&gt;, reason='TLS-23 \u667a\u80fd\u63a9\u7801\uff1a\u4fdd\u7559\u5934\u90e8\uff0c\u63a9\u7801\u8f7d\u8377', tls_record_type=23), MaskRule(packet_number=1, tcp_stream_id='TCP_1', tls_record_offset=160, tls_record_length=25, mask_offset=0, mask_length=0, action=&lt;MaskAction.KEEP_ALL: 'keep_all'&gt;, reason='TLS-21 \u534f\u8bae\u5b8c\u5168\u4fdd\u7559\u7b56\u7565', tls_record_type=21)])</failure></testcase><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorFallback" name="test_core_components_initialization_failure_fallback" time="0.008"><failure message="Exception: Component not available">tests/unit/test_tshark_enhanced_mask_processor_fallback.py:89: in test_core_components_initialization_failure_fallback
    processor._initialize_impl()
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:552: in _initialize_impl
    self._initialize_core_components()
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1169: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1173: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1228: in _execute_mock_call
    raise effect
E   Exception: Component not available</failure></testcase><testcase classname="tests.unit.test_tcp_sequence_masking_validation_framework.TestPhase2PySharkAnalyzer" name="test_sequence_number_calculation" time="0.000" /><testcase classname="tests.unit.test_tcp_sequence_masking_validation_framework.TestPhase3ScapyRewriter" name="test_sequence_matching_accuracy" time="0.000" /><testcase classname="tests.unit.test_tcp_sequence_masking_validation_framework.TestPhase3ScapyRewriter" name="test_tls_sample_masking_preparation" time="0.001"><failure message="TypeError: BaseStage.initialize() takes 1 positional argument but 2 were given">tests/unit/test_tcp_sequence_masking_validation_framework.py:248: in test_tls_sample_masking_preparation
    rewriter.initialize({})
E   TypeError: BaseStage.initialize() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.test_tcp_sequence_masking_validation_framework.TestPhase3ScapyRewriter" name="test_mask_application_logic" time="0.001" /><testcase classname="tests.unit.test_tcp_payload_masker_phase1_3_api.TestCreateMaskingRecipeFromDict" name="test_invalid_key_format" time="0.001"><failure message="TypeError: create_masking_recipe_from_dict() takes 1 positional argument but 2 were given">tests/unit/test_tcp_payload_masker_phase1_3_api.py:254: in test_invalid_key_format
    create_masking_recipe_from_dict(instructions_dict, 1)
E   TypeError: create_masking_recipe_from_dict() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorStatistics" name="test_statistics_collection" time="0.003"><failure message="assert 0 == 3">tests/unit/test_tls_mask_rule_generator.py:484: in test_statistics_collection
    assert stats['generated_rules_count'] == 3
E   assert 0 == 3</failure></testcase><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestFallbackRobustnessValidation" name="test_100_percent_robustness_scenarios" time="0.501"><failure message="Exception">tests/unit/test_tshark_enhanced_mask_processor_fallback.py:320: in test_100_percent_robustness_scenarios
    processor2._initialize_impl()
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:552: in _initialize_impl
    self._initialize_core_components()
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1169: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1173: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1228: in _execute_mock_call
    raise effect
E   Exception</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_3_api.TestCreateMaskingRecipeFromDict" name="test_mask_range_creation" time="0.001"><failure message="TypeError: create_masking_recipe_from_dict() takes 1 positional argument but 2 were given">tests/unit/test_tcp_payload_masker_phase1_3_api.py:273: in test_mask_range_creation
    recipe = create_masking_recipe_from_dict(instructions_dict, 1)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: create_masking_recipe_from_dict() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_3_api.TestCreateMaskingRecipeFromDict" name="test_valid_dict_creation" time="0.001"><failure message="TypeError: create_masking_recipe_from_dict() takes 1 positional argument but 2 were given">tests/unit/test_tcp_payload_masker_phase1_3_api.py:229: in test_valid_dict_creation
    recipe = create_masking_recipe_from_dict(instructions_dict, 1)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: create_masking_recipe_from_dict() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorStatistics" name="test_statistics_reset" time="0.002"><failure message="assert 0 == 1">tests/unit/test_tls_mask_rule_generator.py:505: in test_statistics_reset
    assert stats['generated_rules_count'] == 1
E   assert 0 == 1</failure></testcase><testcase classname="tests.unit.test_tcp_payload_masker_phase1_3_api.TestPrivateHelperFunctions" name="test_rebuild_mask_spec" time="0.002"><failure message="NameError: name '_rebuild_mask_spec' is not defined">tests/unit/test_tcp_payload_masker_phase1_3_api.py:313: in test_rebuild_mask_spec
    mask_spec = _rebuild_mask_spec(mask_after_data)
                ^^^^^^^^^^^^^^^^^^
E   NameError: name '_rebuild_mask_spec' is not defined</failure></testcase><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorCoverageGaps" name="test_fallback_mode_determination_logic" time="0.001" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorCoverageGaps" name="test_fallback_execution_with_different_modes" time="0.001"><failure message="assert False is True&#10; +  where False = &lt;src.pktmask.core.processors.base_processor.ProcessorResult object at 0x10fcf6210&gt;.success">tests/unit/test_tshark_enhanced_mask_processor_fallback.py:460: in test_fallback_execution_with_different_modes
    assert result.success is True
E   assert False is True
E    +  where False = &lt;src.pktmask.core.processors.base_processor.ProcessorResult object at 0x10fcf6210&gt;.success</failure></testcase><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorCoverageGaps" name="test_statistics_tracking_methods" time="0.002" /><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorErrorHandling" name="test_generate_rules_exception_handling" time="0.004" /><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorErrorHandling" name="test_individual_record_error_handling" time="0.008" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorCoverageGaps" name="test_enhanced_stats_generation" time="0.002" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorCoverageGaps" name="test_cleanup_and_destructor" time="0.002" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorCoverageGaps" name="test_process_file_error_scenarios" time="0.006"><failure message="FileNotFoundError: 输入文件不存在: nonexistent.pcap">tests/unit/test_tshark_enhanced_mask_processor_fallback.py:521: in test_process_file_error_scenarios
    result = processor.process_file("nonexistent.pcap", "output.pcap")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:761: in process_file
    self.validate_inputs(input_path, output_path)
src/pktmask/core/processors/base_processor.py:92: in validate_inputs
    raise FileNotFoundError(f"输入文件不存在: {input_path}")
E   FileNotFoundError: 输入文件不存在: nonexistent.pcap</failure></testcase><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorIntegration" name="test_complete_workflow" time="0.008"><failure message="assert 0 == 6">tests/unit/test_tls_mask_rule_generator.py:608: in test_complete_workflow
    assert stats['generated_rules_count'] == 6
E   assert 0 == 6</failure></testcase><testcase classname="tests.unit.test_tls_mask_rule_generator.TestTLSMaskRuleGeneratorIntegration" name="test_performance_with_large_dataset" time="0.006"><failure message="assert 0 == 100">tests/unit/test_tls_mask_rule_generator.py:646: in test_performance_with_large_dataset
    assert stats['generated_rules_count'] == 100
E   assert 0 == 100</failure></testcase><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorCoverageGaps" name="test_display_name_and_description" time="0.001"><failure message="AssertionError: assert '\u589e\u5f3a' in 'TShark Enhanced Mask Processor'">tests/unit/test_tshark_enhanced_mask_processor_fallback.py:532: in test_display_name_and_description
    assert "增强" in display_name
E   AssertionError: assert '\u589e\u5f3a' in 'TShark Enhanced Mask Processor'</failure></testcase><testcase classname="tests.unit.test_tls_models.TestTLSProcessingStrategy" name="test_strategy_values" time="0.000" /><testcase classname="tests.unit.test_tls_models.TestTLSProcessingStrategy" name="test_strategy_count" time="0.002" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_find_tshark_executable_in_config_paths" time="0.001" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_find_tshark_executable_not_found" time="0.001" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedConfigEdgeCases" name="test_fallback_config_edge_cases" time="0.001" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_get_tshark_version_success" time="0.001" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_get_tshark_version_failure" time="0.002" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedConfigEdgeCases" name="test_enhanced_config_edge_cases" time="0.001" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_verify_tshark_capabilities_success" time="0.002" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_init_default_config" time="0.002" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_verify_tshark_capabilities_failure" time="0.003" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_init_custom_config" time="0.001" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_init_with_custom_paths_config" time="0.000" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_init_with_default_paths" time="0.001" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_initialization_success" time="0.003" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_initialization_no_tshark" time="0.001" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_find_tshark_executable_in_path" time="0.001" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_validate_inputs_success" time="0.004" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_validate_inputs_no_input_file" time="0.003" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_find_tshark_executable_custom_path" time="0.005" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_build_tshark_command_basic" time="0.001"><failure message="AssertionError: assert ['/usr/bin/tshark', '-r', '/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpu6089bas/input.pcap', '-w', '/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpu6089bas/output.pcap', '-o', 'tcp.desegment_tcp_streams:TRUE', '-o', 'tcp.reassemble_out_of_order:TRUE', '-o', 'ip.defragment:TRUE', '-o', 'ipv6.defragment:TRUE', '-q'] == ['/usr/bin/tshark', '-r', '/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpu6089bas/input.pcap', '-w', '/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpu6089bas/output.pcap', '-o', 'tcp.desegment_tcp_streams:TRUE', '-o', 'tcp.reassemble_out_of_order:TRUE', '-o', 'ip.defragment:TRUE', '-o', 'ipv6.defragment:TRUE', '-C', '1024', '-q']&#10;  &#10;  At index 13 diff: #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33m-q#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33m-C#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  Right contains 2 more items, first extra item: #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33m1024#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  &#10;  Full diff:&#10;  #x1B[0m#x1B[90m #x1B[39;49;00m [#x1B[90m#x1B[39;49;00m&#10;  #x1B[90m #x1B[39;49;00m     '/usr/bin/tshark',#x1B[90m#x1B[39;49;00m&#10;  #x1B[90m #x1B[39;49;00m     '-r',#x1B[90m#x1B[39;49;00m&#10;  #x1B[90m #x1B[39;49;00m     '/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpu6089bas/input.pcap',#x1B[90m#x1B[39;49;00m&#10;  #x1B[90m #x1B[39;49;00m     '-w',#x1B[90m#x1B[39;49;00m&#10;  #x1B[90m #x1B[39;49;00m     '/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpu6089bas/output.pcap',#x1B[90m#x1B[39;49;00m&#10;  #x1B[90m #x1B[39;49;00m     '-o',#x1B[90m#x1B[39;49;00m&#10;  #x1B[90m #x1B[39;49;00m     'tcp.desegment_tcp_streams:TRUE',#x1B[90m#x1B[39;49;00m&#10;  #x1B[90m #x1B[39;49;00m     '-o',#x1B[90m#x1B[39;49;00m&#10;  #x1B[90m #x1B[39;49;00m     'tcp.reassemble_out_of_order:TRUE',#x1B[90m#x1B[39;49;00m&#10;  #x1B[90m #x1B[39;49;00m     '-o',#x1B[90m#x1B[39;49;00m&#10;  #x1B[90m #x1B[39;49;00m     'ip.defragment:TRUE',#x1B[90m#x1B[39;49;00m&#10;  #x1B[90m #x1B[39;49;00m     '-o',#x1B[90m#x1B[39;49;00m&#10;  #x1B[90m #x1B[39;49;00m     'ipv6.defragment:TRUE',#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m-     '-C',#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[91m-     '1024',#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[90m #x1B[39;49;00m     '-q',#x1B[90m#x1B[39;49;00m&#10;  #x1B[90m #x1B[39;49;00m ]#x1B[90m#x1B[39;49;00m">tests/unit/test_tshark_preprocessor.py:330: in test_build_tshark_command_basic
    assert cmd == expected_cmd
E   AssertionError: assert ['/usr/bin/tshark', '-r', '/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpu6089bas/input.pcap', '-w', '/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpu6089bas/output.pcap', '-o', 'tcp.desegment_tcp_streams:TRUE', '-o', 'tcp.reassemble_out_of_order:TRUE', '-o', 'ip.defragment:TRUE', '-o', 'ipv6.defragment:TRUE', '-q'] == ['/usr/bin/tshark', '-r', '/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpu6089bas/input.pcap', '-w', '/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpu6089bas/output.pcap', '-o', 'tcp.desegment_tcp_streams:TRUE', '-o', 'tcp.reassemble_out_of_order:TRUE', '-o', 'ip.defragment:TRUE', '-o', 'ipv6.defragment:TRUE', '-C', '1024', '-q']
E     
E     At index 13 diff: #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33m-q#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33m-C#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     Right contains 2 more items, first extra item: #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33m1024#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     
E     Full diff:
E     #x1B[0m#x1B[90m #x1B[39;49;00m [#x1B[90m#x1B[39;49;00m
E     #x1B[90m #x1B[39;49;00m     '/usr/bin/tshark',#x1B[90m#x1B[39;49;00m
E     #x1B[90m #x1B[39;49;00m     '-r',#x1B[90m#x1B[39;49;00m
E     #x1B[90m #x1B[39;49;00m     '/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpu6089bas/input.pcap',#x1B[90m#x1B[39;49;00m
E     #x1B[90m #x1B[39;49;00m     '-w',#x1B[90m#x1B[39;49;00m
E     #x1B[90m #x1B[39;49;00m     '/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpu6089bas/output.pcap',#x1B[90m#x1B[39;49;00m
E     #x1B[90m #x1B[39;49;00m     '-o',#x1B[90m#x1B[39;49;00m
E     #x1B[90m #x1B[39;49;00m     'tcp.desegment_tcp_streams:TRUE',#x1B[90m#x1B[39;49;00m
E     #x1B[90m #x1B[39;49;00m     '-o',#x1B[90m#x1B[39;49;00m
E     #x1B[90m #x1B[39;49;00m     'tcp.reassemble_out_of_order:TRUE',#x1B[90m#x1B[39;49;00m
E     #x1B[90m #x1B[39;49;00m     '-o',#x1B[90m#x1B[39;49;00m
E     #x1B[90m #x1B[39;49;00m     'ip.defragment:TRUE',#x1B[90m#x1B[39;49;00m
E     #x1B[90m #x1B[39;49;00m     '-o',#x1B[90m#x1B[39;49;00m
E     #x1B[90m #x1B[39;49;00m     'ipv6.defragment:TRUE',#x1B[90m#x1B[39;49;00m
E     #x1B[91m-     '-C',#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[91m-     '1024',#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[90m #x1B[39;49;00m     '-q',#x1B[90m#x1B[39;49;00m
E     #x1B[90m #x1B[39;49;00m ]#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_validate_inputs_empty_input_file" time="0.002" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_validate_inputs_not_initialized" time="0.001" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_verify_output_empty_file" time="0.001" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_execute_tshark_success" time="0.001" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_execute_tshark_failure" time="0.003"><failure message="assert True is False&#10; +  where True = &lt;src.pktmask.core.processors.base_processor.ProcessorResult object at 0x129a05980&gt;.success">tests/unit/test_tshark_preprocessor.py:611: in test_execute_tshark_failure
    assert result.success is False
E   assert True is False
E    +  where True = &lt;src.pktmask.core.processors.base_processor.ProcessorResult object at 0x129a05980&gt;.success</failure></testcase><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_build_tshark_command_disabled_features" time="0.002" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_create_temp_file" time="0.007" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_execute_tshark_timeout" time="0.002" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_get_estimated_duration" time="0.004" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_parse_tshark_output_basic" time="0.006" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_get_estimated_duration_with_reassembly" time="0.002" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_get_estimated_duration_nonexistent_file" time="0.001" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_get_required_tools" time="0.000" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_check_tool_availability_available" time="0.001" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_verify_output_success" time="0.002" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_check_tool_availability_unavailable" time="0.001" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_get_description" time="0.001" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_verify_output_no_file" time="0.001" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_execute_full_pipeline_success" time="0.005"><failure message="AssertionError: assert 'TShark\u9884\u5904\u7406\u5b8c\u6210' in 'TShark\u9884\u5904\u7406\u5df2\u5c4f\u853d\uff0c\u76f4\u63a5\u4f7f\u7528\u539f\u59cb\u6587\u4ef6'">tests/unit/test_tshark_preprocessor.py:577: in test_execute_full_pipeline_success
    assert "TShark预处理完成" in result.data['message']
E   AssertionError: assert 'TShark\u9884\u5904\u7406\u5b8c\u6210' in 'TShark\u9884\u5904\u7406\u5df2\u5c4f\u853d\uff0c\u76f4\u63a5\u4f7f\u7528\u539f\u59cb\u6587\u4ef6'</failure></testcase><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_execute_validation_failure" time="0.007"><failure message="assert True is False&#10; +  where True = &lt;src.pktmask.core.processors.base_processor.ProcessorResult object at 0x11c68cc30&gt;.success">tests/unit/test_tshark_preprocessor.py:589: in test_execute_validation_failure
    assert result.success is False
E   assert True is False
E    +  where True = &lt;src.pktmask.core.processors.base_processor.ProcessorResult object at 0x11c68cc30&gt;.success</failure></testcase><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorFallback" name="test_enhanced_trimmer_fallback_initialization" time="0.003" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorFallback" name="test_mask_stage_fallback_initialization" time="0.005" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorFallback" name="test_fallback_mode_determination" time="0.002" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorFallback" name="test_enhanced_trimmer_fallback_execution" time="0.003" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorFallback" name="test_mask_stage_fallback_execution" time="0.003"><failure message="assert False is True&#10; +  where False = &lt;src.pktmask.core.processors.base_processor.ProcessorResult object at 0x11d790050&gt;.success">tests/unit/test_tshark_enhanced_mask_processor_fallback.py:173: in test_mask_stage_fallback_execution
    assert result.success is True
E   assert False is True
E    +  where False = &lt;src.pktmask.core.processors.base_processor.ProcessorResult object at 0x11d790050&gt;.success</failure></testcase><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_initialization_default_config" time="0.002" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_initialization_custom_config" time="0.001" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_find_tshark_executable_from_path" time="0.002" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessor" name="test_update_stats" time="0.001" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_get_tshark_version_failure" time="0.001" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessorIntegration" name="test_real_tshark_execution" time="0.623" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_validate_tshark_version_success" time="0.004" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_find_tshark_executable_not_found" time="0.009" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_get_tshark_version_success" time="0.003" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_validate_tshark_version_too_old" time="0.002" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_validate_tshark_version_none" time="0.002" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_verify_tshark_capabilities_no_tls" time="0.002" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_verify_tshark_capabilities_success" time="0.003" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_verify_tshark_capabilities_failure" time="0.001" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_check_dependencies_success" time="0.002" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_build_tshark_command_with_options" time="0.008" /><testcase classname="tests.integration.test_stage1_pipeline_enhanced_trimmer_integration.TestStage1Integration" name="test_config_parameter_passing" time="0.566" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_check_dependencies_failure" time="0.001" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorFallback" name="test_fallback_processing_with_all_failures" time="0.004" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_execute_tshark_command_success" time="0.002" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_build_tshark_command_basic" time="0.006" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_execute_tshark_command_empty_output" time="0.001" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_extract_field_int_success" time="0.000" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_extract_field_int_hex" time="0.000" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorFallback" name="test_complete_fallback_workflow" time="0.002" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_extract_field_int_default" time="0.001" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorFallback" name="test_fallback_disabled_behavior" time="0.001"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗">tests/unit/test_tshark_enhanced_mask_processor_fallback.py:220: in test_fallback_disabled_behavior
    result = processor.process_file("input.pcap", "output.pcap")
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✗, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_extract_field_str_success" time="0.001" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_execute_tshark_command_failure" time="0.002" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_execute_tshark_command_timeout" time="0.009" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_extract_field_str_default" time="0.001" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_parse_packet_tls_records_multiple_records" time="0.001" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_parse_packet_tls_records_unsupported_type" time="0.001" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_parse_tshark_output_success" time="0.002" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_extract_field_list_success" time="0.001" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_extract_field_list_single_value" time="0.001" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_parse_tshark_output_invalid_json" time="0.002" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_extract_field_list_empty" time="0.004" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_detect_cross_packet_records" time="0.001" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_get_analysis_result" time="0.004" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_parse_packet_tls_records_single_record" time="0.001" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerIntegration" name="test_real_tshark_integration" time="0.668" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_analyze_file_dependency_failure" time="0.012" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorFallback" name="test_statistics_tracking" time="0.002" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzer" name="test_analyze_file_missing_file" time="0.001" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorFallback" name="test_resource_cleanup_with_fallback" time="0.004" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerCoverageGaps" name="test_tshark_executable_finding_path_search" time="0.003" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorFallback" name="test_error_recovery_retry_mechanism" time="0.003"><failure message="Exception: 第一次失败">tests/unit/test_tshark_enhanced_mask_processor_fallback.py:269: in test_error_recovery_retry_mechanism
    result = processor._execute_fallback_processor(
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:980: in _execute_fallback_processor
    return processor.process_file(input_path, output_path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1169: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1173: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1232: in _execute_mock_call
    raise result
E   Exception: 第一次失败</failure></testcase><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerCoverageGaps" name="test_tshark_version_parsing_edge_cases" time="0.006" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerCoverageGaps" name="test_verify_tshark_capabilities_tcp_missing" time="0.006" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerCoverageGaps" name="test_verify_tshark_capabilities_protocol_check_failure" time="0.001" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerCoverageGaps" name="test_execute_tshark_command_timeout_scenario" time="0.001" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerCoverageGaps" name="test_execute_tshark_command_general_exception" time="0.003" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerCoverageGaps" name="test_parse_packet_tls_records_unsupported_types" time="0.001" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerCoverageGaps" name="test_parse_packet_tls_records_version_parsing_errors" time="0.000" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerCoverageGaps" name="test_parse_packet_tls_records_content_type_parsing_errors" time="0.001" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerCoverageGaps" name="test_extract_field_methods_edge_cases" time="0.000" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerCoverageGaps" name="test_detect_cross_packet_records_advanced_scenarios" time="0.004" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerCoverageGaps" name="test_get_analysis_result_comprehensive" time="0.001"><failure message="AttributeError: 'TestTSharkTLSAnalyzerCoverageGaps' object has no attribute 'config'">tests/unit/test_tshark_tls_analyzer.py:893: in test_get_analysis_result_comprehensive
    analyzer = TSharkTLSAnalyzer(self.config)
                                 ^^^^^^^^^^^
E   AttributeError: 'TestTSharkTLSAnalyzerCoverageGaps' object has no attribute 'config'</failure></testcase><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerPerformanceScenarios" name="test_large_dataset_handling" time="0.003" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerPerformanceScenarios" name="test_verbose_logging_scenarios" time="0.000" /><testcase classname="tests.unit.test_utils.TestFileOps" name="test_file_ops_module_exists" time="0.000" /><testcase classname="tests.unit.test_utils.TestFileOps" name="test_file_ops_has_common_functions" time="0.001" /><testcase classname="tests.unit.test_utils.TestFileOps" name="test_ensure_directory_exists" time="0.000" /><testcase classname="tests.unit.test_utils.TestFileOps" name="test_get_file_size" time="0.001" /><testcase classname="tests.unit.test_utils.TestFileOps" name="test_copy_file" time="0.002" /><testcase classname="tests.unit.test_utils.TestStringOps" name="test_string_ops_module_exists" time="0.001" /><testcase classname="tests.unit.test_utils.TestStringOps" name="test_string_ops_has_common_functions" time="0.001" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorCoverageGaps" name="test_initialization_with_custom_temp_dir" time="0.001" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorCoverageGaps" name="test_tshark_availability_check_timeout_scenarios" time="0.002"><failure message="NameError: name 'subprocess' is not defined. Did you forget to import 'subprocess'?">tests/unit/test_tshark_enhanced_mask_processor_fallback.py:357: in test_tshark_availability_check_timeout_scenarios
    with patch('subprocess.run', side_effect=subprocess.TimeoutExpired('tshark', 5)):
                                             ^^^^^^^^^^
E   NameError: name 'subprocess' is not defined. Did you forget to import 'subprocess'?</failure></testcase><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorCoverageGaps" name="test_core_components_initialization_import_errors" time="0.003"><failure message="AssertionError: Regex pattern did not match.&#10; Regex: '核心组件不可用'&#10; Input: 'Core components unavailable: 模块不可用'">src/pktmask/core/processors/tshark_enhanced_mask_processor.py:634: in _initialize_core_components
    self._tshark_analyzer = TSharkTLSAnalyzer(self._create_analyzer_config())
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1169: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1173: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1228: in _execute_mock_call
    raise effect
E   ImportError: 模块不可用

During handling of the above exception, another exception occurred:
tests/unit/test_tshark_enhanced_mask_processor_fallback.py:379: in test_core_components_initialization_import_errors
    processor._initialize_core_components()
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:651: in _initialize_core_components
    raise RuntimeError(f"Core components unavailable: {e}")
E   RuntimeError: Core components unavailable: 模块不可用

During handling of the above exception, another exception occurred:
tests/unit/test_tshark_enhanced_mask_processor_fallback.py:378: in test_core_components_initialization_import_errors
    with pytest.raises(RuntimeError, match="核心组件不可用"):
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AssertionError: Regex pattern did not match.
E    Regex: '核心组件不可用'
E    Input: 'Core components unavailable: 模块不可用'</failure></testcase><testcase classname="tests.unit.test_utils.TestStringOps" name="test_sanitize_filename" time="0.001" /><testcase classname="tests.unit.test_utils.TestStringOps" name="test_format_bytes" time="0.001" /><testcase classname="tests.unit.test_utils.TestStringOps" name="test_truncate_string" time="0.001" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorFallback" name="test_comprehensive_robustness_validation" time="0.004"><failure message="Exception">tests/unit/test_tshark_enhanced_mask_processor_fallback.py:298: in test_comprehensive_robustness_validation
    processor._initialize_impl()
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:552: in _initialize_impl
    self._initialize_core_components()
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1169: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1173: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1228: in _execute_mock_call
    raise effect
E   Exception</failure></testcase><testcase classname="tests.unit.test_utils.TestMathOps" name="test_math_ops_module_exists" time="0.001" /><testcase classname="tests.unit.test_utils.TestMathOps" name="test_clamp_value" time="0.002" /><testcase classname="tests.unit.test_utils.TestTimeUtils" name="test_time_module_exists" time="0.000" /><testcase classname="tests.unit.test_utils.TestTimeUtils" name="test_time_has_common_functions" time="0.000" /><testcase classname="tests.unit.test_utils.TestTimeUtils" name="test_format_duration" time="0.000" /><testcase classname="tests.unit.test_utils.TestTimeUtils" name="test_get_timestamp" time="0.001" /><testcase classname="tests.unit.test_utils.TestTimeUtils" name="test_format_timestamp" time="0.001" /><testcase classname="tests.unit.test_utils.TestUtilsIntegration" name="test_all_utils_modules_importable" time="0.000" /><testcase classname="tests.unit.test_utils.TestUtilsIntegration" name="test_utils_functions_return_expected_types" time="0.002" /><testcase classname="tests.unit.test_utils.TestUtilsIntegration" name="test_utils_handle_edge_cases" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_ensure_directory_creates_new_directory" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_ensure_directory_existing_directory" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_ensure_directory_nested_path" time="0.008" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_ensure_directory_file_exists_raises_error" time="0.006" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_ensure_directory_no_create" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_safe_join" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_safe_join_with_empty_components" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_get_file_extension" time="0.002" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_get_file_base_name" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_get_file_size" time="0.003" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_get_file_size_non_existent_file" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_is_supported_file" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_find_files_by_extension" time="0.002" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_find_files_by_extension_recursive" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_find_pcap_files" time="0.002" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_copy_file_safely" time="0.002" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_copy_file_safely_no_overwrite" time="0.005" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorCoverageGaps" name="test_enhanced_trimmer_fallback_initialization_errors" time="0.003" /><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorCoverageGaps" name="test_mask_stage_fallback_initialization_errors" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_copy_file_safely_with_overwrite" time="0.002" /><testcase classname="tests.integration.test_stage1_pipeline_enhanced_trimmer_integration.TestStage1Integration" name="test_multiple_stages_with_adapter" time="0.537"><failure message="AssertionError: False is not true">tests/integration/test_stage1_pipeline_enhanced_trimmer_integration.py:216: in test_multiple_stages_with_adapter
    self.assertTrue(stage_names[2].startswith("Adapter_EnhancedTrimmer"))
E   AssertionError: False is not true</failure></testcase><testcase classname="tests.unit.test_tshark_enhanced_mask_processor_fallback.TestTSharkEnhancedMaskProcessorCoverageGaps" name="test_configuration_creation_methods" time="0.003" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_delete_file_safely" time="0.002" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_delete_file_safely_non_existent" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_generate_output_filename" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestFileOpsComprehensive" name="test_get_directory_size" time="0.003" /><testcase classname="tests.unit.test_utils_comprehensive.TestStringOpsComprehensive" name="test_create_separator" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestStringOpsComprehensive" name="test_format_ip_mapping" time="0.000" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessorIntegration" name="test_large_file_handling" time="0.004" /><testcase classname="tests.unit.test_utils_comprehensive.TestStringOpsComprehensive" name="test_format_step_summary" time="0.002" /><testcase classname="tests.unit.test_utils_comprehensive.TestStringOpsComprehensive" name="test_format_deduplication_summary" time="0.000" /><testcase classname="tests.unit.test_tshark_preprocessor.TestTSharkPreprocessorIntegration" name="test_memory_limit_configuration" time="0.001"><failure message="AssertionError: assert '-C' in [None, '-r', 'input.pcap', '-w', 'output.pcap', '-o', 'tcp.desegment_tcp_streams:TRUE', '-o', 'tcp.reassemble_out_of_order:TRUE', '-o', 'ip.defragment:TRUE', '-o', 'ipv6.defragment:TRUE', '-q']">tests/unit/test_tshark_preprocessor.py:716: in test_memory_limit_configuration
    assert '-C' in cmd
E   AssertionError: assert '-C' in [None, '-r', 'input.pcap', '-w', 'output.pcap', '-o', 'tcp.desegment_tcp_streams:TRUE', '-o', 'tcp.reassemble_out_of_order:TRUE', '-o', 'ip.defragment:TRUE', '-o', 'ipv6.defragment:TRUE', '-q']</failure></testcase><testcase classname="tests.unit.test_utils_comprehensive.TestStringOpsComprehensive" name="test_format_ip_mapping_list" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestStringOpsComprehensive" name="test_format_trimming_summary" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestStringOpsComprehensive" name="test_format_ip_mapping_list_no_numbers" time="0.002" /><testcase classname="tests.unit.test_utils_comprehensive.TestStringOpsComprehensive" name="test_format_section_header" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestStringOpsComprehensive" name="test_format_summary_section" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestStringOpsComprehensive" name="test_format_file_status" time="0.002" /><testcase classname="tests.unit.test_utils_comprehensive.TestStringOpsComprehensive" name="test_truncate_string" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestStringOpsComprehensive" name="test_format_ip_mapping_list_with_limit" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestStringOpsComprehensive" name="test_pad_string" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestStringOpsComprehensive" name="test_clean_filename" time="0.000" /><testcase classname="tests.unit.test_utils_comprehensive.TestStringOpsComprehensive" name="test_format_key_value_pairs" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestStringOpsComprehensive" name="test_format_progress_text" time="0.000" /><testcase classname="tests.unit.test_utils_comprehensive.TestStringOpsComprehensive" name="test_join_with_separator" time="0.003" /><testcase classname="tests.unit.test_utils_comprehensive.TestMathOpsComprehensive" name="test_calculate_speed" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestMathOpsComprehensive" name="test_calculate_rate" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestMathOpsComprehensive" name="test_calculate_percentage" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestMathOpsComprehensive" name="test_format_number" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestMathOpsComprehensive" name="test_safe_divide" time="0.003" /><testcase classname="tests.unit.test_utils_comprehensive.TestMathOpsComprehensive" name="test_format_size_bytes" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestMathOpsComprehensive" name="test_calculate_statistics" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestMathOpsComprehensive" name="test_clamp" time="0.000" /><testcase classname="tests.unit.test_utils_comprehensive.TestMathOpsComprehensive" name="test_format_processing_summary" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestMathOpsComprehensive" name="test_moving_average" time="0.002" /><testcase classname="tests.unit.test_utils_comprehensive.TestMathOpsComprehensive" name="test_calculate_growth_rate" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestMathOpsComprehensive" name="test_normalize_value" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestTimeOpsComprehensive" name="test_format_timestamp" time="0.000" /><testcase classname="tests.unit.test_utils_comprehensive.TestTimeOpsComprehensive" name="test_format_duration" time="0.002" /><testcase classname="tests.unit.test_utils_comprehensive.TestTimeOpsComprehensive" name="test_get_timestamp" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestUtilsIntegrationComprehensive" name="test_file_and_string_ops_integration" time="0.001" /><testcase classname="tests.unit.test_utils_comprehensive.TestUtilsIntegrationComprehensive" name="test_math_and_string_ops_integration" time="0.002" /><testcase classname="tests.unit.test_utils_comprehensive.TestTimeOpsComprehensive" name="test_sleep_with_callback" time="0.002" /><testcase classname="tests.unit.test_utils_comprehensive.TestUtilsIntegrationComprehensive" name="test_all_utils_modules_work_together" time="0.008" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerCoverageGaps" name="test_platform_specific_path_detection" time="0.000" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerCoverageGaps" name="test_tshark_executable_finding_configured_paths" time="0.002"><failure message="AssertionError: assert '/usr/local/bin/tshark' == '/custom/tshark'&#10;  &#10;  #x1B[0m#x1B[91m- /custom/tshark#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ /usr/local/bin/tshark#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">tests/unit/test_tshark_tls_analyzer.py:649: in test_tshark_executable_finding_configured_paths
    assert result == '/custom/tshark'
E   AssertionError: assert '/usr/local/bin/tshark' == '/custom/tshark'
E     
E     #x1B[0m#x1B[91m- /custom/tshark#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     #x1B[92m+ /usr/local/bin/tshark#x1B[39;49;00m#x1B[90m#x1B[39;49;00m</failure></testcase><testcase classname="tests.unit.test_utils.TestMathOps" name="test_math_ops_has_common_functions" time="0.001" /><testcase classname="tests.unit.test_utils.TestMathOps" name="test_calculate_percentage" time="0.001" /><testcase classname="tests.unit.test_utils.TestMathOps" name="test_round_to_nearest" time="0.001" /><testcase classname="tests.unit.test_tshark_tls_analyzer.TestTSharkTLSAnalyzerCoverageGaps" name="test_tshark_executable_finding_custom_path" time="0.003" /><testcase classname="tests.integration.test_stage1_pipeline_enhanced_trimmer_integration.TestStage1Integration" name="test_pipeline_executor_basic_construction" time="0.001" /><testcase classname="tests.integration.test_stage1_pipeline_enhanced_trimmer_integration.TestStage1Integration" name="test_pipeline_executor_with_mask_config" time="0.411"><failure message="AssertionError: False is not true">tests/integration/test_stage1_pipeline_enhanced_trimmer_integration.py:80: in test_pipeline_executor_with_mask_config
    self.assertTrue(stage.name.startswith("Adapter_EnhancedTrimmer"))
E   AssertionError: False is not true</failure></testcase><testcase classname="tests.integration.test_tls23_marker_phase5_integration" name="test_validate_tls23_frames_main" time="0.006" /><testcase classname="tests.integration.test_tls23_maskstage_e2e_integration" name="test_maskstage_e2e_validation_pipeline_mode" time="41.913"><skipped type="pytest.xfail" message="TShark 依赖问题，跳过测试" /></testcase><testcase classname="tests.integration.test_phase3_day19_performance_benchmark.TestPhase3Day19PerformanceBenchmark" name="test_small_file_processing_performance" time="0.011"><failure message="RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✓, 规则生成器: ✗, Scapy应用器: ✗">tests/integration/test_phase3_day19_performance_benchmark.py:184: in test_small_file_processing_performance
    result, memory_used = self.benchmark.measure_memory_usage(
tests/integration/test_phase3_day19_performance_benchmark.py:68: in measure_memory_usage
    result = func(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:765: in process_file
    raise RuntimeError(
E   RuntimeError: 核心组件不可用！强制协议适配模式要求所有核心组件必须可用。TShark分析器: ✓, 规则生成器: ✗, Scapy应用器: ✗</failure></testcase><testcase classname="tests.integration.test_phase3_day19_performance_benchmark.TestPhase3Day19PerformanceBenchmark" name="test_protocol_recognition_latency" time="0.001" /><testcase classname="tests.integration.test_phase3_day19_performance_benchmark.TestPhase3Day19PerformanceBenchmark" name="test_comprehensive_performance_report" time="0.002"><failure message="AssertionError: 综合性能评分不达标: 5.0/100&#10;assert 5.0 &gt;= 85.0">tests/integration/test_phase3_day19_performance_benchmark.py:284: in test_comprehensive_performance_report
    assert performance_score &gt;= 85.0, f"综合性能评分不达标: {performance_score:.1f}/100"
E   AssertionError: 综合性能评分不达标: 5.0/100
E   assert 5.0 &gt;= 85.0</failure></testcase><testcase classname="tests.integration.test_phase3_day20_regression_report.TestPhase3Day20RegressionReport" name="test_compatibility_regression_check" time="0.138" /><testcase classname="tests.integration.test_phase3_day20_regression_report.TestPhase3Day20RegressionReport" name="test_generate_comprehensive_regression_report" time="0.001" /><testcase classname="tests.integration.test_phase3_day20_regression_report.TestPhase3Day20RegressionReport" name="test_integration_tests_regression_analysis" time="5.257" /><testcase classname="tests.integration.test_phase3_day20_regression_report.TestPhase3Day20RegressionReport" name="test_unit_tests_regression_analysis" time="2.648" /><testcase classname="tests.integration.test_phase3_day21_boundary_conditions.TestBoundaryConditions" name="test_empty_file_handling" time="0.766" /><testcase classname="tests.integration.test_phase3_day21_boundary_conditions.TestBoundaryConditions" name="test_corrupted_file_handling" time="0.756"><failure message="Exception: TShark无法解析损坏的文件">tests/integration/test_phase3_day21_boundary_conditions.py:134: in test_corrupted_file_handling
    result = processor.process_file(corrupted_file, output_file)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:775: in process_file
    result = self._process_with_core_pipeline(input_path, output_path)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1169: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1173: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1228: in _execute_mock_call
    raise effect
E   Exception: TShark无法解析损坏的文件</failure></testcase><testcase classname="tests.integration.test_phase3_day21_boundary_conditions.TestBoundaryConditions" name="test_extremely_large_file_simulation" time="0.942"><failure message="RuntimeError: TLS分析失败: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file &quot;/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpxnbeg8ss/large_file.pcap&quot; isn't a capture file in a format TShark understands.">src/pktmask/core/processors/tshark_tls_analyzer.py:391: in _execute_tshark_command
    raise RuntimeError(error_msg)
E   RuntimeError: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpxnbeg8ss/large_file.pcap" isn't a capture file in a format TShark understands.

The above exception was the direct cause of the following exception:
src/pktmask/core/processors/tshark_tls_analyzer.py:175: in analyze_file
    json_output = self._execute_tshark_command(cmd)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_tls_analyzer.py:402: in _execute_tshark_command
    raise RuntimeError(f"TShark执行异常: {e}") from e
E   RuntimeError: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpxnbeg8ss/large_file.pcap" isn't a capture file in a format TShark understands.

The above exception was the direct cause of the following exception:
tests/integration/test_phase3_day21_boundary_conditions.py:167: in test_extremely_large_file_simulation
    result = processor.process_file(large_file, output_file)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:775: in process_file
    result = self._process_with_core_pipeline(input_path, output_path)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:854: in _process_with_core_pipeline
    tls_records = self._tshark_analyzer.analyze_file(input_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_tls_analyzer.py:190: in analyze_file
    raise RuntimeError(f"TLS分析失败: {e}") from e
E   RuntimeError: TLS分析失败: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpxnbeg8ss/large_file.pcap" isn't a capture file in a format TShark understands.</failure></testcase><testcase classname="tests.integration.test_phase3_day21_boundary_conditions.TestBoundaryConditions" name="test_permission_denied_handling" time="0.860"><failure message="PermissionError: 权限拒绝: 无法写入输出文件">tests/integration/test_phase3_day21_boundary_conditions.py:190: in test_permission_denied_handling
    result = processor.process_file(test_file, readonly_output)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:775: in process_file
    result = self._process_with_core_pipeline(input_path, output_path)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1169: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1173: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1228: in _execute_mock_call
    raise effect
E   PermissionError: 权限拒绝: 无法写入输出文件</failure></testcase><testcase classname="tests.integration.test_phase3_day21_boundary_conditions.TestBoundaryConditions" name="test_invalid_tls_records_handling" time="0.799"><failure message="ValueError: 不支持的TLS内容类型: 999">tests/integration/test_phase3_day21_boundary_conditions.py:205: in test_invalid_tls_records_handling
    invalid_record = TLSRecordInfo(
&lt;string&gt;:11: in __init__
    ???
src/pktmask/core/trim/models/tls_models.py:43: in __post_init__
    raise ValueError(f"不支持的TLS内容类型: {self.content_type}")
E   ValueError: 不支持的TLS内容类型: 999</failure></testcase><testcase classname="tests.integration.test_phase3_day21_boundary_conditions.TestBoundaryConditions" name="test_configuration_boundary_conditions" time="0.589"><failure message="RuntimeError: TLS分析失败: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file &quot;/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpqw1vk79a/test_config.pcap&quot; isn't a capture file in a format TShark understands.">src/pktmask/core/processors/tshark_tls_analyzer.py:391: in _execute_tshark_command
    raise RuntimeError(error_msg)
E   RuntimeError: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpqw1vk79a/test_config.pcap" isn't a capture file in a format TShark understands.

The above exception was the direct cause of the following exception:
src/pktmask/core/processors/tshark_tls_analyzer.py:175: in analyze_file
    json_output = self._execute_tshark_command(cmd)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_tls_analyzer.py:402: in _execute_tshark_command
    raise RuntimeError(f"TShark执行异常: {e}") from e
E   RuntimeError: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpqw1vk79a/test_config.pcap" isn't a capture file in a format TShark understands.

The above exception was the direct cause of the following exception:
tests/integration/test_phase3_day21_boundary_conditions.py:292: in test_configuration_boundary_conditions
    result = processor.process_file(test_file, output_file)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:775: in process_file
    result = self._process_with_core_pipeline(input_path, output_path)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:854: in _process_with_core_pipeline
    tls_records = self._tshark_analyzer.analyze_file(input_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_tls_analyzer.py:190: in analyze_file
    raise RuntimeError(f"TLS分析失败: {e}") from e
E   RuntimeError: TLS分析失败: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpqw1vk79a/test_config.pcap" isn't a capture file in a format TShark understands.</failure></testcase><testcase classname="tests.integration.test_phase3_day21_boundary_conditions.TestBoundaryConditions" name="test_tshark_process_failure_handling" time="1.068"><failure message="RuntimeError: TLS分析失败: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file &quot;/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpk89uhdic/test_tshark_fail.pcap&quot; isn't a capture file in a format TShark understands.">src/pktmask/core/processors/tshark_tls_analyzer.py:391: in _execute_tshark_command
    raise RuntimeError(error_msg)
E   RuntimeError: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpk89uhdic/test_tshark_fail.pcap" isn't a capture file in a format TShark understands.

The above exception was the direct cause of the following exception:
src/pktmask/core/processors/tshark_tls_analyzer.py:175: in analyze_file
    json_output = self._execute_tshark_command(cmd)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_tls_analyzer.py:402: in _execute_tshark_command
    raise RuntimeError(f"TShark执行异常: {e}") from e
E   RuntimeError: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpk89uhdic/test_tshark_fail.pcap" isn't a capture file in a format TShark understands.

The above exception was the direct cause of the following exception:
tests/integration/test_phase3_day21_boundary_conditions.py:329: in test_tshark_process_failure_handling
    result = processor.process_file(test_file, output_file)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:775: in process_file
    result = self._process_with_core_pipeline(input_path, output_path)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:854: in _process_with_core_pipeline
    tls_records = self._tshark_analyzer.analyze_file(input_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_tls_analyzer.py:190: in analyze_file
    raise RuntimeError(f"TLS分析失败: {e}") from e
E   RuntimeError: TLS分析失败: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpk89uhdic/test_tshark_fail.pcap" isn't a capture file in a format TShark understands.</failure></testcase><testcase classname="tests.integration.test_phase3_day21_boundary_conditions.TestBoundaryConditions" name="test_disk_space_insufficient_simulation" time="0.937"><failure message="RuntimeError: TLS分析失败: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file &quot;/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmptn13h693/test_disk.pcap&quot; isn't a capture file in a format TShark understands.">src/pktmask/core/processors/tshark_tls_analyzer.py:391: in _execute_tshark_command
    raise RuntimeError(error_msg)
E   RuntimeError: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmptn13h693/test_disk.pcap" isn't a capture file in a format TShark understands.

The above exception was the direct cause of the following exception:
src/pktmask/core/processors/tshark_tls_analyzer.py:175: in analyze_file
    json_output = self._execute_tshark_command(cmd)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_tls_analyzer.py:402: in _execute_tshark_command
    raise RuntimeError(f"TShark执行异常: {e}") from e
E   RuntimeError: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmptn13h693/test_disk.pcap" isn't a capture file in a format TShark understands.

The above exception was the direct cause of the following exception:
tests/integration/test_phase3_day21_boundary_conditions.py:360: in test_disk_space_insufficient_simulation
    result = processor.process_file(test_file, output_file)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:775: in process_file
    result = self._process_with_core_pipeline(input_path, output_path)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:854: in _process_with_core_pipeline
    tls_records = self._tshark_analyzer.analyze_file(input_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_tls_analyzer.py:190: in analyze_file
    raise RuntimeError(f"TLS分析失败: {e}") from e
E   RuntimeError: TLS分析失败: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmptn13h693/test_disk.pcap" isn't a capture file in a format TShark understands.</failure></testcase><testcase classname="tests.integration.test_phase3_day21_boundary_conditions.TestBoundaryConditions" name="test_concurrent_access_simulation" time="0.926"><failure message="RuntimeError: TLS分析失败: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file &quot;/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpytpf1vb2/test_concurrent.pcap&quot; isn't a capture file in a format TShark understands.">src/pktmask/core/processors/tshark_tls_analyzer.py:391: in _execute_tshark_command
    raise RuntimeError(error_msg)
E   RuntimeError: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpytpf1vb2/test_concurrent.pcap" isn't a capture file in a format TShark understands.

The above exception was the direct cause of the following exception:
src/pktmask/core/processors/tshark_tls_analyzer.py:175: in analyze_file
    json_output = self._execute_tshark_command(cmd)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_tls_analyzer.py:402: in _execute_tshark_command
    raise RuntimeError(f"TShark执行异常: {e}") from e
E   RuntimeError: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpytpf1vb2/test_concurrent.pcap" isn't a capture file in a format TShark understands.

The above exception was the direct cause of the following exception:
tests/integration/test_phase3_day21_boundary_conditions.py:389: in test_concurrent_access_simulation
    result = processor.process_file(test_file, output_file)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:775: in process_file
    result = self._process_with_core_pipeline(input_path, output_path)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:854: in _process_with_core_pipeline
    tls_records = self._tshark_analyzer.analyze_file(input_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_tls_analyzer.py:190: in analyze_file
    raise RuntimeError(f"TLS分析失败: {e}") from e
E   RuntimeError: TLS分析失败: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmpytpf1vb2/test_concurrent.pcap" isn't a capture file in a format TShark understands.</failure></testcase><testcase classname="tests.integration.test_phase3_day21_boundary_conditions.TestBoundaryConditions" name="test_malformed_packet_data_handling" time="0.888"><failure message="RuntimeError: TLS分析失败: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file &quot;/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmp8vz09ziz/malformed.pcap&quot; isn't a capture file in a format TShark understands.">src/pktmask/core/processors/tshark_tls_analyzer.py:391: in _execute_tshark_command
    raise RuntimeError(error_msg)
E   RuntimeError: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmp8vz09ziz/malformed.pcap" isn't a capture file in a format TShark understands.

The above exception was the direct cause of the following exception:
src/pktmask/core/processors/tshark_tls_analyzer.py:175: in analyze_file
    json_output = self._execute_tshark_command(cmd)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_tls_analyzer.py:402: in _execute_tshark_command
    raise RuntimeError(f"TShark执行异常: {e}") from e
E   RuntimeError: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmp8vz09ziz/malformed.pcap" isn't a capture file in a format TShark understands.

The above exception was the direct cause of the following exception:
tests/integration/test_phase3_day21_boundary_conditions.py:439: in test_malformed_packet_data_handling
    result = processor.process_file(test_file, output_file)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:775: in process_file
    result = self._process_with_core_pipeline(input_path, output_path)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_enhanced_mask_processor.py:854: in _process_with_core_pipeline
    tls_records = self._tshark_analyzer.analyze_file(input_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/processors/tshark_tls_analyzer.py:190: in analyze_file
    raise RuntimeError(f"TLS分析失败: {e}") from e
E   RuntimeError: TLS分析失败: TShark执行异常: TShark执行失败 (退出码: 3): tshark: The file "/var/folders/wz/ql3l9vh10z3c4kt7h9c1ydvh0000gn/T/tmp8vz09ziz/malformed.pcap" isn't a capture file in a format TShark understands.</failure></testcase><testcase classname="tests.integration.test_phase3_day21_boundary_conditions.TestBoundaryConditionsAcceptance" name="test_phase3_day21_acceptance_criteria" time="2.229"><failure message="AssertionError: 核心边界条件测试成功率: 33.33333333333333% (要求: ≥66.7%)&#10;assert 33.33333333333333 &gt;= 66.7">tests/integration/test_phase3_day21_boundary_conditions.py:503: in test_phase3_day21_acceptance_criteria
    assert success_rate &gt;= 66.7, f"核心边界条件测试成功率: {success_rate}% (要求: ≥66.7%)"
E   AssertionError: 核心边界条件测试成功率: 33.33333333333333% (要求: ≥66.7%)
E   assert 33.33333333333333 &gt;= 66.7</failure></testcase><testcase classname="tests.integration.test_phase4_3_enhanced_reporting.TestEnhancedReporting" name="test_is_enhanced_trimming_detection" time="0.001"><failure message="AssertionError: assert False is True&#10; +  where False = _is_enhanced_trimming({'total_packets': 500, 'protocol_stats': {'tls_packets': 100}})&#10; +    where _is_enhanced_trimming = &lt;pktmask.gui.managers.report_manager.ReportManager object at 0x11d0caba0&gt;._is_enhanced_trimming&#10; +      where &lt;pktmask.gui.managers.report_manager.ReportManager object at 0x11d0caba0&gt; = &lt;test_phase4_3_enhanced_reporting.TestEnhancedReporting object at 0x11bc45310&gt;.report_manager">tests/integration/test_phase4_3_enhanced_reporting.py:90: in test_is_enhanced_trimming_detection
    assert self.report_manager._is_enhanced_trimming(partial_enhanced_data) is True
E   AssertionError: assert False is True
E    +  where False = _is_enhanced_trimming({'total_packets': 500, 'protocol_stats': {'tls_packets': 100}})
E    +    where _is_enhanced_trimming = &lt;pktmask.gui.managers.report_manager.ReportManager object at 0x11d0caba0&gt;._is_enhanced_trimming
E    +      where &lt;pktmask.gui.managers.report_manager.ReportManager object at 0x11d0caba0&gt; = &lt;test_phase4_3_enhanced_reporting.TestEnhancedReporting object at 0x11bc45310&gt;.report_manager</failure></testcase><testcase classname="tests.integration.test_phase4_3_enhanced_reporting.TestEnhancedReporting" name="test_generate_enhanced_trimming_report_line" time="0.001"><failure message="AssertionError: assert 'Trimmed:  300' in '  \u2702\ufe0f  Payload Trimming   | Enhanced Mode | Total: 1000 | Masked:  300 | Rate:  30.0%'">tests/integration/test_phase4_3_enhanced_reporting.py:110: in test_generate_enhanced_trimming_report_line
    assert "Trimmed:  300" in line
E   AssertionError: assert 'Trimmed:  300' in '  \u2702\ufe0f  Payload Trimming   | Enhanced Mode | Total: 1000 | Masked:  300 | Rate:  30.0%'</failure></testcase><testcase classname="tests.integration.test_phase4_3_enhanced_reporting.TestEnhancedReporting" name="test_generate_enhanced_trimming_report_for_file" time="0.001"><failure message="assert None is not None">tests/integration/test_phase4_3_enhanced_reporting.py:141: in test_generate_enhanced_trimming_report_for_file
    assert report is not None
E   assert None is not None</failure></testcase><testcase classname="tests.integration.test_phase4_3_enhanced_reporting.TestEnhancedReporting" name="test_generate_enhanced_trimming_total_report" time="0.001"><failure message="assert None is not None">tests/integration/test_phase4_3_enhanced_reporting.py:189: in test_generate_enhanced_trimming_total_report
    assert report is not None
E   assert None is not None</failure></testcase><testcase classname="tests.integration.test_phase4_3_enhanced_reporting.TestEnhancedReporting" name="test_enhanced_reporting_integration_in_file_complete_report" time="0.001"><failure message="TypeError: argument of type 'Mock' is not iterable">tests/integration/test_phase4_3_enhanced_reporting.py:234: in test_enhanced_reporting_integration_in_file_complete_report
    self.report_manager.generate_file_complete_report(filename)
src/pktmask/gui/managers/report_manager.py:349: in generate_file_complete_report
    if hasattr(self.main_window, '_current_file_ips') and original_filename in self.main_window._current_file_ips:
                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: argument of type 'Mock' is not iterable</failure></testcase><testcase classname="tests.integration.test_phase4_3_enhanced_reporting.TestEnhancedReporting" name="test_enhanced_reporting_integration_in_processing_finished_report" time="0.002"><failure message="AssertionError: assert 'ENHANCED TRIMMING INTELLIGENCE REPORT' in '\n======================================================================\n\U0001f389 PROCESSING COMPLETED!\n======================================================================\n\U0001f3af All 2 files have been successfully processed.\n\U0001f4c8 Files Processed: 2\n\U0001f4ca Total Packets Processed: 1500\n\u23f1\ufe0f Time Elapsed: 00:02:30\n\U0001f527 Applied Processing Steps: Payload Masking\n\U0001f4c1 Output Location: output\n\U0001f4dd All processed files saved to output directory.\n======================================================================\n'">tests/integration/test_phase4_3_enhanced_reporting.py:293: in test_enhanced_reporting_integration_in_processing_finished_report
    assert "ENHANCED TRIMMING INTELLIGENCE REPORT" in report_content
E   AssertionError: assert 'ENHANCED TRIMMING INTELLIGENCE REPORT' in '\n======================================================================\n\U0001f389 PROCESSING COMPLETED!\n======================================================================\n\U0001f3af All 2 files have been successfully processed.\n\U0001f4c8 Files Processed: 2\n\U0001f4ca Total Packets Processed: 1500\n\u23f1\ufe0f Time Elapsed: 00:02:30\n\U0001f527 Applied Processing Steps: Payload Masking\n\U0001f4c1 Output Location: output\n\U0001f4dd All processed files saved to output directory.\n======================================================================\n'</failure></testcase><testcase classname="tests.integration.test_phase4_3_enhanced_reporting.TestEnhancedReporting" name="test_mixed_trimming_modes_reporting" time="0.001"><failure message="assert None is not None">tests/integration/test_phase4_3_enhanced_reporting.py:328: in test_mixed_trimming_modes_reporting
    assert report is not None
E   assert None is not None</failure></testcase><testcase classname="tests.integration.test_phase4_3_enhanced_reporting.TestEnhancedReporting" name="test_no_enhanced_trimming_files" time="0.001" /><testcase classname="tests.integration.test_phase4_integration.TestPhase4Integration" name="test_plain_packet_integration" time="0.001"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_phase4_integration.py:30: in integration_components
    'trimmer': IntelligentTrimmingStep()
               ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_phase4_integration.TestPhase4Integration" name="test_vlan_packet_integration" time="0.001"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_phase4_integration.py:30: in integration_components
    'trimmer': IntelligentTrimmingStep()
               ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_phase4_integration.TestPhase4Integration" name="test_mixed_encapsulation_batch_processing" time="0.000"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_phase4_integration.py:30: in integration_components
    'trimmer': IntelligentTrimmingStep()
               ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_phase4_integration.TestPhase4Integration" name="test_error_handling_and_recovery" time="0.000"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_phase4_integration.py:30: in integration_components
    'trimmer': IntelligentTrimmingStep()
               ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_phase4_integration.TestPhase4Integration" name="test_performance_benchmarks" time="0.001"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_phase4_integration.py:30: in integration_components
    'trimmer': IntelligentTrimmingStep()
               ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_phase4_integration.TestPhase4Integration" name="test_memory_usage_optimization" time="0.000"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_phase4_integration.py:30: in integration_components
    'trimmer': IntelligentTrimmingStep()
               ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_phase4_integration.TestPhase4Integration" name="test_caching_effectiveness" time="0.001"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_phase4_integration.py:30: in integration_components
    'trimmer': IntelligentTrimmingStep()
               ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_tls23_maskstage_e2e_integration" name="test_maskstage_e2e_validation_direct_mode" time="39.356"><skipped type="pytest.xfail" message="TShark 依赖问题，跳过测试" /></testcase><testcase classname="tests.integration.test_pipeline.TestPipelineIntegration" name="test_pipeline_initialization" time="0.001"><error message="failed on setup with &quot;AttributeError: 'AppConfig' object has no attribute 'get'&quot;">tests/integration/test_pipeline.py:21: in pipeline
    return Pipeline(test_config)
           ^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:43: in __init__
    self.stages: List[StageBase] = self._build_pipeline(self._config)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:155: in _build_pipeline
    dedup_cfg = config.get("dedup", {})
                ^^^^^^^^^^
E   AttributeError: 'AppConfig' object has no attribute 'get'</error></testcase><testcase classname="tests.integration.test_pipeline.TestPipelineIntegration" name="test_pipeline_with_empty_processor_list" time="0.000"><error message="failed on setup with &quot;AttributeError: 'AppConfig' object has no attribute 'get'&quot;">tests/integration/test_pipeline.py:21: in pipeline
    return Pipeline(test_config)
           ^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:43: in __init__
    self.stages: List[StageBase] = self._build_pipeline(self._config)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:155: in _build_pipeline
    dedup_cfg = config.get("dedup", {})
                ^^^^^^^^^^
E   AttributeError: 'AppConfig' object has no attribute 'get'</error></testcase><testcase classname="tests.integration.test_pipeline.TestPipelineIntegration" name="test_pipeline_with_single_processor" time="0.000"><error message="failed on setup with &quot;AttributeError: 'AppConfig' object has no attribute 'get'&quot;">tests/integration/test_pipeline.py:21: in pipeline
    return Pipeline(test_config)
           ^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:43: in __init__
    self.stages: List[StageBase] = self._build_pipeline(self._config)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:155: in _build_pipeline
    dedup_cfg = config.get("dedup", {})
                ^^^^^^^^^^
E   AttributeError: 'AppConfig' object has no attribute 'get'</error></testcase><testcase classname="tests.integration.test_pipeline.TestPipelineIntegration" name="test_pipeline_with_multiple_processors" time="0.000"><error message="failed on setup with &quot;AttributeError: 'AppConfig' object has no attribute 'get'&quot;">tests/integration/test_pipeline.py:21: in pipeline
    return Pipeline(test_config)
           ^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:43: in __init__
    self.stages: List[StageBase] = self._build_pipeline(self._config)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:155: in _build_pipeline
    dedup_cfg = config.get("dedup", {})
                ^^^^^^^^^^
E   AttributeError: 'AppConfig' object has no attribute 'get'</error></testcase><testcase classname="tests.integration.test_pipeline.TestPipelineIntegration" name="test_pipeline_error_handling" time="0.000"><error message="failed on setup with &quot;AttributeError: 'AppConfig' object has no attribute 'get'&quot;">tests/integration/test_pipeline.py:21: in pipeline
    return Pipeline(test_config)
           ^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:43: in __init__
    self.stages: List[StageBase] = self._build_pipeline(self._config)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:155: in _build_pipeline
    dedup_cfg = config.get("dedup", {})
                ^^^^^^^^^^
E   AttributeError: 'AppConfig' object has no attribute 'get'</error></testcase><testcase classname="tests.integration.test_pipeline.TestProcessorFactory" name="test_factory_function_exists" time="0.000" /><testcase classname="tests.integration.test_pipeline.TestProcessorFactory" name="test_factory_can_create_steps" time="0.000"><failure message="NotImplementedError: Legacy Steps系统已移除。请使用ProcessorRegistry.get_processor()代替。">tests/integration/test_pipeline.py:126: in test_factory_can_create_steps
    step = get_step_instance(step_name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/factory.py:26: in get_step_instance
    raise NotImplementedError(
E   NotImplementedError: Legacy Steps系统已移除。请使用ProcessorRegistry.get_processor()代替。</failure></testcase><testcase classname="tests.integration.test_pipeline.TestProcessorFactory" name="test_factory_handles_unknown_step" time="0.001"><failure message="NotImplementedError: Legacy Steps系统已移除。请使用ProcessorRegistry.get_processor()代替。">tests/integration/test_pipeline.py:137: in test_factory_handles_unknown_step
    get_step_instance("unknown_step")
src/pktmask/core/factory.py:26: in get_step_instance
    raise NotImplementedError(
E   NotImplementedError: Legacy Steps系统已移除。请使用ProcessorRegistry.get_processor()代替。</failure></testcase><testcase classname="tests.integration.test_pipeline.TestPipelineConfigIntegration" name="test_pipeline_respects_config_settings" time="0.001"><failure message="AttributeError: 'AppConfig' object has no attribute 'get'">tests/integration/test_pipeline.py:151: in test_pipeline_respects_config_settings
    pipeline = Pipeline(config)
               ^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:43: in __init__
    self.stages: List[StageBase] = self._build_pipeline(self._config)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:155: in _build_pipeline
    dedup_cfg = config.get("dedup", {})
                ^^^^^^^^^^
E   AttributeError: 'AppConfig' object has no attribute 'get'</failure></testcase><testcase classname="tests.integration.test_pipeline.TestPipelineConfigIntegration" name="test_pipeline_with_invalid_config" time="0.000" /><testcase classname="tests.integration.test_pipeline.TestPipelineConfigIntegration" name="test_pipeline_config_validation" time="0.000"><failure message="AttributeError: 'AppConfig' object has no attribute 'get'">tests/integration/test_pipeline.py:171: in test_pipeline_config_validation
    pipeline = Pipeline(test_config)
               ^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:43: in __init__
    self.stages: List[StageBase] = self._build_pipeline(self._config)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:155: in _build_pipeline
    dedup_cfg = config.get("dedup", {})
                ^^^^^^^^^^
E   AttributeError: 'AppConfig' object has no attribute 'get'</failure></testcase><testcase classname="tests.integration.test_pipeline.TestPipelinePerformance" name="test_pipeline_handles_large_processor_chain" time="0.001"><failure message="AttributeError: 'AppConfig' object has no attribute 'get'">tests/integration/test_pipeline.py:193: in test_pipeline_handles_large_processor_chain
    pipeline = Pipeline(test_config)
               ^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:43: in __init__
    self.stages: List[StageBase] = self._build_pipeline(self._config)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:155: in _build_pipeline
    dedup_cfg = config.get("dedup", {})
                ^^^^^^^^^^
E   AttributeError: 'AppConfig' object has no attribute 'get'</failure></testcase><testcase classname="tests.integration.test_pipeline.TestPipelinePerformance" name="test_pipeline_memory_usage" time="0.001"><failure message="AttributeError: 'AppConfig' object has no attribute 'get'">tests/integration/test_pipeline.py:217: in test_pipeline_memory_usage
    pipeline = Pipeline(test_config)
               ^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:43: in __init__
    self.stages: List[StageBase] = self._build_pipeline(self._config)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/pktmask/core/pipeline/executor.py:155: in _build_pipeline
    dedup_cfg = config.get("dedup", {})
                ^^^^^^^^^^
E   AttributeError: 'AppConfig' object has no attribute 'get'</failure></testcase><testcase classname="tests.integration.test_real_data_validation.TestRealDataValidation" name="test_all_sample_directories_covered" time="0.001"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_real_data_validation.py:319: in validator
    return RealDataValidator()
           ^^^^^^^^^^^^^^^^^^^
tests/integration/test_real_data_validation.py:58: in __init__
    self.trimming = IntelligentTrimmingStep()
                    ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_real_data_validation.TestRealDataValidation" name="test_sample_category_validation[plain_ip]" time="0.000"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_real_data_validation.py:319: in validator
    return RealDataValidator()
           ^^^^^^^^^^^^^^^^^^^
tests/integration/test_real_data_validation.py:58: in __init__
    self.trimming = IntelligentTrimmingStep()
                    ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_real_data_validation.TestRealDataValidation" name="test_sample_category_validation[plain_ip_tls70]" time="0.000"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_real_data_validation.py:319: in validator
    return RealDataValidator()
           ^^^^^^^^^^^^^^^^^^^
tests/integration/test_real_data_validation.py:58: in __init__
    self.trimming = IntelligentTrimmingStep()
                    ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_real_data_validation.TestRealDataValidation" name="test_sample_category_validation[single_vlan]" time="0.000"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_real_data_validation.py:319: in validator
    return RealDataValidator()
           ^^^^^^^^^^^^^^^^^^^
tests/integration/test_real_data_validation.py:58: in __init__
    self.trimming = IntelligentTrimmingStep()
                    ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_real_data_validation.TestRealDataValidation" name="test_sample_category_validation[double_vlan]" time="0.000"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_real_data_validation.py:319: in validator
    return RealDataValidator()
           ^^^^^^^^^^^^^^^^^^^
tests/integration/test_real_data_validation.py:58: in __init__
    self.trimming = IntelligentTrimmingStep()
                    ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_real_data_validation.TestRealDataValidation" name="test_sample_category_validation[double_vlan_tls]" time="0.000"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_real_data_validation.py:319: in validator
    return RealDataValidator()
           ^^^^^^^^^^^^^^^^^^^
tests/integration/test_real_data_validation.py:58: in __init__
    self.trimming = IntelligentTrimmingStep()
                    ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_real_data_validation.TestRealDataValidation" name="test_sample_category_validation[mpls]" time="0.000"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_real_data_validation.py:319: in validator
    return RealDataValidator()
           ^^^^^^^^^^^^^^^^^^^
tests/integration/test_real_data_validation.py:58: in __init__
    self.trimming = IntelligentTrimmingStep()
                    ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_real_data_validation.TestRealDataValidation" name="test_sample_category_validation[gre_tunnel]" time="0.000"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_real_data_validation.py:319: in validator
    return RealDataValidator()
           ^^^^^^^^^^^^^^^^^^^
tests/integration/test_real_data_validation.py:58: in __init__
    self.trimming = IntelligentTrimmingStep()
                    ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_real_data_validation.TestRealDataValidation" name="test_sample_category_validation[vxlan]" time="0.000"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_real_data_validation.py:319: in validator
    return RealDataValidator()
           ^^^^^^^^^^^^^^^^^^^
tests/integration/test_real_data_validation.py:58: in __init__
    self.trimming = IntelligentTrimmingStep()
                    ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_real_data_validation.TestRealDataValidation" name="test_sample_category_validation[vxlan_custom]" time="0.000"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_real_data_validation.py:319: in validator
    return RealDataValidator()
           ^^^^^^^^^^^^^^^^^^^
tests/integration/test_real_data_validation.py:58: in __init__
    self.trimming = IntelligentTrimmingStep()
                    ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_real_data_validation.TestRealDataValidation" name="test_sample_category_validation[vxlan_vlan_composite]" time="0.000"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_real_data_validation.py:319: in validator
    return RealDataValidator()
           ^^^^^^^^^^^^^^^^^^^
tests/integration/test_real_data_validation.py:58: in __init__
    self.trimming = IntelligentTrimmingStep()
                    ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_real_data_validation.TestRealDataValidation" name="test_sample_category_validation[vlan_gre_composite]" time="0.000"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_real_data_validation.py:319: in validator
    return RealDataValidator()
           ^^^^^^^^^^^^^^^^^^^
tests/integration/test_real_data_validation.py:58: in __init__
    self.trimming = IntelligentTrimmingStep()
                    ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_real_data_validation.TestRealDataValidation" name="test_sample_category_validation[large_ip_set]" time="0.000"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_real_data_validation.py:319: in validator
    return RealDataValidator()
           ^^^^^^^^^^^^^^^^^^^
tests/integration/test_real_data_validation.py:58: in __init__
    self.trimming = IntelligentTrimmingStep()
                    ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_real_data_validation.TestRealDataValidation" name="test_sample_category_validation[test_case_001]" time="0.000"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_real_data_validation.py:319: in validator
    return RealDataValidator()
           ^^^^^^^^^^^^^^^^^^^
tests/integration/test_real_data_validation.py:58: in __init__
    self.trimming = IntelligentTrimmingStep()
                    ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_real_data_validation.TestRealDataValidation" name="test_sample_category_validation[test_case_002_5]" time="0.001"><error message="failed on setup with &quot;NameError: name 'IntelligentTrimmingStep' is not defined&quot;">tests/integration/test_real_data_validation.py:319: in validator
    return RealDataValidator()
           ^^^^^^^^^^^^^^^^^^^
tests/integration/test_real_data_validation.py:58: in __init__
    self.trimming = IntelligentTrimmingStep()
                    ^^^^^^^^^^^^^^^^^^^^^^^
E   NameError: name 'IntelligentTrimmingStep' is not defined</error></testcase><testcase classname="tests.integration.test_tls23_maskstage_e2e_integration" name="test_maskstage_vs_enhanced_trimmer_comparison" time="90.241"><skipped type="pytest.xfail" message="两个验证器都因依赖问题失败，跳过对比测试" /></testcase><testcase classname="tests.integration.test_tls23_maskstage_e2e_integration" name="test_maskstage_validator_output_format" time="56.654"><failure message="AssertionError: assert 'test_metadata' in {'overall_pass_rate': 66.67, 'maskstage_mode': 'pipeline', 'files': [{'status': 'pass', 'records_before': 64, 'records_after': 64, 'input_tls23_pkts': 64, 'masked_zero_pkts': 64, 'output_tls23_pkts': 64, 'masked_records': 64, 'unmasked_records': 0, 'masked_ok_frames': [1, 2, 30, 32, 71, 73, 74, 108, 110, 142, 144, 180, 182, 218, 220, 221, 256, 258, 259, 283, 285, 286, 316, 318, 345, 347, 348, 415, 418, 421, 422, 424, 425, 460, 462, 463, 490, 492, 493, 521, 523, 524, 571, 573, 602, 606, 607, 639, 641, 671, 673, 712, 714, 742, 744, 745, 779, 781, 782, 820, 822, 850, 852, 853], 'failed_frames': [], 'failed_frame_details': [], 'success_frame_details': [{'frame': 1, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [308], 'zero_bytes': 308, 'num_records': 1, 'protocol_types': None}, {'frame': 2, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 30, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 32, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [552], 'zero_bytes': 552, 'num_records': 1, 'protocol_types': None}, {'frame': 71, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 73, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [545], 'zero_bytes': 545, 'num_records': 1, 'protocol_types': None}, {'frame': 74, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [31], 'zero_bytes': 31, 'num_records': 1, 'protocol_types': None}, {'frame': 108, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 110, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [552], 'zero_bytes': 552, 'num_records': 1, 'protocol_types': None}, {'frame': 142, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 144, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 180, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 182, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [552], 'zero_bytes': 552, 'num_records': 1, 'protocol_types': None}, {'frame': 218, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 220, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [545], 'zero_bytes': 545, 'num_records': 1, 'protocol_types': None}, {'frame': 221, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [31], 'zero_bytes': 31, 'num_records': 1, 'protocol_types': None}, {'frame': 256, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 258, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [308], 'zero_bytes': 308, 'num_records': 1, 'protocol_types': None}, {'frame': 259, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 283, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 285, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [547], 'zero_bytes': 547, 'num_records': 1, 'protocol_types': None}, {'frame': 286, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [29], 'zero_bytes': 29, 'num_records': 1, 'protocol_types': None}, {'frame': 316, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [786], 'zero_bytes': 786, 'num_records': 1, 'protocol_types': None}, {'frame': 318, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [787], 'zero_bytes': 787, 'num_records': 1, 'protocol_types': None}, {'frame': 345, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [787], 'zero_bytes': 787, 'num_records': 1, 'protocol_types': None}, {'frame': 347, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [770], 'zero_bytes': 770, 'num_records': 1, 'protocol_types': None}, {'frame': 348, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [29], 'zero_bytes': 29, 'num_records': 1, 'protocol_types': None}, {'frame': 415, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 418, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 421, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [547], 'zero_bytes': 547, 'num_records': 1, 'protocol_types': None}, {'frame': 422, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [29], 'zero_bytes': 29, 'num_records': 1, 'protocol_types': None}, {'frame': 424, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [545], 'zero_bytes': 545, 'num_records': 1, 'protocol_types': None}, {'frame': 425, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [31], 'zero_bytes': 31, 'num_records': 1, 'protocol_types': None}, {'frame': 460, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 462, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [308], 'zero_bytes': 308, 'num_records': 1, 'protocol_types': None}, {'frame': 463, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 490, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [787], 'zero_bytes': 787, 'num_records': 1, 'protocol_types': None}, {'frame': 492, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [770], 'zero_bytes': 770, 'num_records': 1, 'protocol_types': None}, {'frame': 493, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [29], 'zero_bytes': 29, 'num_records': 1, 'protocol_types': None}, {'frame': 521, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [782], 'zero_bytes': 782, 'num_records': 1, 'protocol_types': None}, {'frame': 523, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [770], 'zero_bytes': 770, 'num_records': 1, 'protocol_types': None}, {'frame': 524, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [29], 'zero_bytes': 29, 'num_records': 1, 'protocol_types': None}, {'frame': 571, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [791], 'zero_bytes': 791, 'num_records': 1, 'protocol_types': None}, {'frame': 573, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [789], 'zero_bytes': 789, 'num_records': 1, 'protocol_types': None}, {'frame': 602, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [797], 'zero_bytes': 797, 'num_records': 1, 'protocol_types': None}, {'frame': 606, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [307], 'zero_bytes': 307, 'num_records': 1, 'protocol_types': None}, {'frame': 607, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [446], 'zero_bytes': 446, 'num_records': 1, 'protocol_types': None}, {'frame': 639, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [791], 'zero_bytes': 791, 'num_records': 1, 'protocol_types': None}, {'frame': 641, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [785], 'zero_bytes': 785, 'num_records': 1, 'protocol_types': None}, {'frame': 671, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [786], 'zero_bytes': 786, 'num_records': 1, 'protocol_types': None}, {'frame': 673, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [789], 'zero_bytes': 789, 'num_records': 1, 'protocol_types': None}, {'frame': 712, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [786], 'zero_bytes': 786, 'num_records': 1, 'protocol_types': None}, {'frame': 714, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [789], 'zero_bytes': 789, 'num_records': 1, 'protocol_types': None}, {'frame': 742, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 744, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [308], 'zero_bytes': 308, 'num_records': 1, 'protocol_types': None}, {'frame': 745, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 779, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 781, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [545], 'zero_bytes': 545, 'num_records': 1, 'protocol_types': None}, {'frame': 782, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [31], 'zero_bytes': 31, 'num_records': 1, 'protocol_types': None}, {'frame': 820, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 822, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [551], 'zero_bytes': 551, 'num_records': 1, 'protocol_types': None}, {'frame': 850, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 852, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [308], 'zero_bytes': 308, 'num_records': 1, 'protocol_types': None}, {'frame': 853, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}], 'file': 'tls_1_2_double_vlan.pcap', 'maskstage_mode': 'pipeline'}, {'status': 'fail', 'records_before': 12, 'records_after': 11, 'input_tls23_pkts': 12, 'masked_zero_pkts': 2, 'output_tls23_pkts': 11, 'masked_records': 2, 'unmasked_records': 9, 'masked_ok_frames': [11, 98], 'failed_frames': [25, 34, 43, 52, 61, 70, 79, 88, 97], 'failed_frame_details': [{'frame': 25, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 938, 'num_records': 1, 'payload_preview': None}, {'frame': 34, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 941, 'num_records': 1, 'payload_preview': None}, {'frame': 43, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 947, 'num_records': 1, 'payload_preview': None}, {'frame': 52, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 939, 'num_records': 1, 'payload_preview': None}, {'frame': 61, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 933, 'num_records': 1, 'payload_preview': None}, {'frame': 70, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 947, 'num_records': 1, 'payload_preview': None}, {'frame': 79, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 935, 'num_records': 1, 'payload_preview': None}, {'frame': 88, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 950, 'num_records': 1, 'payload_preview': None}, {'frame': 97, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 920, 'num_records': 1, 'payload_preview': None}], 'success_frame_details': [{'frame': 11, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [969], 'zero_bytes': 969, 'num_records': 1, 'protocol_types': None}, {'frame': 98, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [863], 'zero_bytes': 863, 'num_records': 1, 'protocol_types': None}], 'file': 'ssl_3.pcapng', 'maskstage_mode': 'pipeline'}, {'status': 'pass', 'records_before': 5, 'records_after': 5, 'input_tls23_pkts': 5, 'masked_zero_pkts': 5, 'output_tls23_pkts': 5, 'masked_records': 5, 'unmasked_records': 0, 'masked_ok_frames': [22, 24, 26, 28, 32], 'failed_frames': [], 'failed_frame_details': [], 'success_frame_details': [{'frame': 22, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [80], 'zero_bytes': 80, 'num_records': 1, 'protocol_types': None}, {'frame': 24, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [352], 'zero_bytes': 352, 'num_records': 1, 'protocol_types': None}, {'frame': 26, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [96], 'zero_bytes': 96, 'num_records': 1, 'protocol_types': None}, {'frame': 28, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [192], 'zero_bytes': 192, 'num_records': 1, 'protocol_types': None}, {'frame': 32, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [272], 'zero_bytes': 272, 'num_records': 1, 'protocol_types': None}], 'file': 'tls_1_2_smtp_mix.pcapng', 'maskstage_mode': 'pipeline'}, {'status': 'pass', 'records_before': 2, 'records_after': 2, 'input_tls23_pkts': 2, 'masked_zero_pkts': 2, 'output_tls23_pkts': 2, 'masked_records': 2, 'unmasked_records': 0, 'masked_ok_frames': [14, 15], 'failed_frames': [], 'failed_frame_details': [], 'success_frame_details': [{'frame': 14, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [169, 26], 'zero_bytes': 195, 'num_records': 2, 'protocol_types': None}, {'frame': 15, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [106], 'zero_bytes': 106, 'num_records': 1, 'protocol_types': None}], 'file': 'tls_1_2_plainip.pcap', 'maskstage_mode': 'pipeline'}, {'status': 'fail', 'records_before': 47, 'records_after': 32, 'input_tls23_pkts': 47, 'masked_zero_pkts': 25, 'output_tls23_pkts': 32, 'masked_records': 25, 'unmasked_records': 7, 'masked_ok_frames': [51, 63, 73, 80, 85, 86, 88, 90, 91, 93, 94, 100, 104, 107, 109, 111, 113, 115, 117, 154, 156, 157, 159, 162, 164], 'failed_frames': [21, 122, 125, 128, 131, 143, 146], 'failed_frame_details': [{'frame': 21, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1543], 'zero_bytes': 118, 'num_records': 1, 'payload_preview': None}, {'frame': 122, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [2068], 'zero_bytes': 649, 'num_records': 1, 'payload_preview': None}, {'frame': 125, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [2068], 'zero_bytes': 650, 'num_records': 1, 'payload_preview': None}, {'frame': 128, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [2068], 'zero_bytes': 647, 'num_records': 1, 'payload_preview': None}, {'frame': 131, 'path': 'eth:ethertype:ip:tcp:tls:tls', 'lengths': [2068], 'zero_bytes': 654, 'num_records': 1, 'payload_preview': None}, {'frame': 143, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [2068], 'zero_bytes': 649, 'num_records': 1, 'payload_preview': None}, {'frame': 146, 'path': 'eth:ethertype:ip:tcp:tls:tls', 'lengths': [2068], 'zero_bytes': 648, 'num_records': 1, 'payload_preview': None}], 'success_frame_details': [{'frame': 51, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [955], 'zero_bytes': 955, 'num_records': 1, 'protocol_types': None}, {'frame': 63, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1096], 'zero_bytes': 1096, 'num_records': 1, 'protocol_types': None}, {'frame': 73, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1391], 'zero_bytes': 1391, 'num_records': 1, 'protocol_types': None}, {'frame': 80, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [235], 'zero_bytes': 235, 'num_records': 1, 'protocol_types': None}, {'frame': 85, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [939], 'zero_bytes': 939, 'num_records': 1, 'protocol_types': None}, {'frame': 86, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [145], 'zero_bytes': 145, 'num_records': 1, 'protocol_types': None}, {'frame': 88, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1019], 'zero_bytes': 1019, 'num_records': 1, 'protocol_types': None}, {'frame': 90, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [313, 224], 'zero_bytes': 537, 'num_records': 2, 'protocol_types': None}, {'frame': 91, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1020], 'zero_bytes': 1020, 'num_records': 1, 'protocol_types': None}, {'frame': 93, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [313, 207], 'zero_bytes': 520, 'num_records': 2, 'protocol_types': None}, {'frame': 94, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1021], 'zero_bytes': 1021, 'num_records': 1, 'protocol_types': None}, {'frame': 100, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [313, 198], 'zero_bytes': 511, 'num_records': 2, 'protocol_types': None}, {'frame': 104, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1022], 'zero_bytes': 1022, 'num_records': 1, 'protocol_types': None}, {'frame': 107, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [313, 186], 'zero_bytes': 499, 'num_records': 2, 'protocol_types': None}, {'frame': 109, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1023], 'zero_bytes': 1023, 'num_records': 1, 'protocol_types': None}, {'frame': 111, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [313, 204], 'zero_bytes': 517, 'num_records': 2, 'protocol_types': None}, {'frame': 113, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1024], 'zero_bytes': 1024, 'num_records': 1, 'protocol_types': None}, {'frame': 115, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [291, 202], 'zero_bytes': 493, 'num_records': 2, 'protocol_types': None}, {'frame': 117, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1312], 'zero_bytes': 1312, 'num_records': 1, 'protocol_types': None}, {'frame': 154, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1059], 'zero_bytes': 1059, 'num_records': 1, 'protocol_types': None}, {'frame': 156, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [235], 'zero_bytes': 235, 'num_records': 1, 'protocol_types': None}, {'frame': 157, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [939], 'zero_bytes': 939, 'num_records': 1, 'protocol_types': None}, {'frame': 159, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [145], 'zero_bytes': 145, 'num_records': 1, 'protocol_types': None}, {'frame': 162, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1412], 'zero_bytes': 1412, 'num_records': 1, 'protocol_types': None}, {'frame': 164, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [307, 263], 'zero_bytes': 570, 'num_records': 2, 'protocol_types': None}], 'file': 'tls_1_0_multi_segment_google-https.pcap', 'maskstage_mode': 'pipeline'}, {'status': 'fail', 'records_before': 607, 'records_after': 556, 'input_tls23_pkts': 607, 'masked_zero_pkts': 473, 'output_tls23_pkts': 556, 'masked_records': 473, 'unmasked_records': 83, 'masked_ok_frames': [12, 13, 16, 17, 18, 21, 33, 34, 36, 37, 38, 39, 41, 45, 46, 48, 50, 63, 64, 65, 66, 67, 68, 70, 72, 73, 75, 77, 90, 91, 92, 93, 94, 95, 96, 98, 102, 103, 105, 107, 120, 121, 122, 123, 124, 125, 127, 130, 131, 132, 135, 148, 149, 150, 151, 152, 153, 155, 159, 160, 162, 164, 177, 178, 179, 180, 181, 182, 184, 188, 189, 191, 193, 206, 207, 208, 210, 211, 212, 215, 227, 229, 230, 231, 232, 233, 235, 239, 240, 242, 244, 257, 258, 259, 260, 261, 262, 264, 268, 269, 271, 273, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 300, 313, 315, 316, 317, 318, 319, 322, 323, 324, 327, 340, 341, 342, 343, 344, 345, 349, 350, 352, 354, 367, 369, 370, 372, 374, 386, 387, 388, 389, 390, 391, 393, 398, 399, 401, 403, 416, 419, 420, 422, 424, 436, 437, 438, 439, 440, 441, 443, 448, 449, 450, 453, 466, 467, 468, 469, 470, 471, 473, 476, 477, 479, 481, 494, 495, 496, 497, 498, 499, 501, 504, 505, 507, 509, 522, 523, 524, 525, 526, 527, 529, 533, 534, 536, 538, 551, 552, 553, 554, 555, 556, 558, 561, 562, 564, 566, 579, 580, 581, 582, 583, 584, 586, 589, 590, 591, 594, 607, 609, 610, 611, 614, 626, 628, 630, 631, 632, 633, 635, 638, 639, 641, 643, 656, 657, 658, 659, 660, 661, 663, 667, 668, 669, 672, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 699, 712, 713, 714, 715, 716, 717, 719, 722, 723, 725, 727, 740, 741, 742, 743, 744, 745, 747, 749, 751, 752, 754, 756, 769, 770, 771, 772, 773, 774, 776, 780, 781, 783, 785, 798, 799, 800, 801, 802, 803, 806, 808, 809, 811, 813, 826, 827, 828, 829, 847, 848, 856, 858, 871, 872, 873, 874, 876, 878, 880, 881, 883, 884, 886, 888, 895, 897, 898, 899, 900, 903, 904, 1143, 1173, 1174, 1176, 1177, 1178, 1181, 1193, 1194, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1208, 1211, 1212, 1214, 1216, 1217, 1219, 1220, 1223, 1224, 1225, 1228, 1238, 1239, 1326, 1327, 1329, 1331, 1332, 1341, 1419, 1550, 1566, 1580, 1596, 1683, 1700, 1715, 1728, 1744, 1757, 1770, 1783, 1798, 1812, 1825, 1862, 1864, 1865, 1867, 1869, 1870, 1872, 1874, 1875, 1882, 1883, 1884, 1885, 1886, 1914, 1915, 1916, 1918, 1920, 1932, 1934, 1935, 1936, 1937, 1938, 1940, 1944, 1945, 1946, 1949, 1962, 1963, 1964, 1965, 1966, 1967, 1969, 1972, 1973, 1975, 1977, 1990, 1991, 1992, 1993, 1994, 1995, 1997, 2001, 2002, 2003, 2006, 2019, 2020, 2021, 2022, 2023, 2024, 2026, 2029, 2030, 2032, 2034, 2047, 2048, 2049, 2050, 2051, 2052, 2054, 2057, 2058, 2060, 2062, 2075, 2076, 2077, 2078, 2079, 2080, 2082, 2084, 2085, 2086, 2089, 2098, 2099, 2100, 2101, 2106], 'failed_frames': [807, 841, 845, 853, 857, 859, 893, 917, 1157, 1167, 1231, 1234, 1236, 1244, 1247, 1259, 1261, 1263, 1275, 1283, 1285, 1295, 1309, 1311, 1323, 1339, 1344, 1347, 1358, 1360, 1369, 1371, 1381, 1384, 1391, 1393, 1402, 1404, 1418, 1435, 1446, 1467, 1469, 1473, 1485, 1491, 1495, 1502, 1516, 1521, 1534, 1537, 1549, 1565, 1579, 1594, 1608, 1614, 1625, 1627, 1643, 1646, 1654, 1666, 1668, 1682, 1699, 1714, 1727, 1742, 1756, 1769, 1782, 1796, 1810, 1824, 1838, 1880, 1894, 1896, 1898, 1901, 1911], 'failed_frame_details': [{'frame': 807, 'path': 'eth:ethertype:vlan:ethertype:ip:icmp:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 8, 'num_records': 1, 'payload_preview': None}, {'frame': 841, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [8219], 'zero_bytes': 949, 'num_records': 1, 'payload_preview': None}, {'frame': 845, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2768], 'zero_bytes': 1311, 'num_records': 1, 'payload_preview': None}, {'frame': 853, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2196], 'zero_bytes': 739, 'num_records': 1, 'payload_preview': None}, {'frame': 857, 'path': 'eth:ethertype:vlan:ethertype:ip:icmp:ip:tcp:tls', 'lengths': [148], 'zero_bytes': 8, 'num_records': 1, 'payload_preview': None}, {'frame': 859, 'path': 'eth:ethertype:vlan:ethertype:ip:icmp:ip:tcp:tls', 'lengths': [144], 'zero_bytes': 7, 'num_records': 1, 'payload_preview': None}, {'frame': 893, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [4697], 'zero_bytes': 327, 'num_records': 1, 'payload_preview': None}, {'frame': 917, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls:tls', 'lengths': [13173], 'zero_bytes': 1308, 'num_records': 1, 'payload_preview': None}, {'frame': 1157, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 1290, 'num_records': 1, 'payload_preview': None}, {'frame': 1167, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [11416], 'zero_bytes': 1231, 'num_records': 1, 'payload_preview': None}, {'frame': 1231, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 41, 'num_records': 1, 'payload_preview': None}, {'frame': 1234, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2953], 'zero_bytes': 46, 'num_records': 1, 'payload_preview': None}, {'frame': 1236, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2681], 'zero_bytes': 1225, 'num_records': 1, 'payload_preview': None}, {'frame': 1244, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2726], 'zero_bytes': 1272, 'num_records': 1, 'payload_preview': None}, {'frame': 1247, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2172], 'zero_bytes': 719, 'num_records': 1, 'payload_preview': None}, {'frame': 1259, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [13173], 'zero_bytes': 96, 'num_records': 1, 'payload_preview': None}, {'frame': 1261, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 43, 'num_records': 1, 'payload_preview': None}, {'frame': 1263, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 40, 'num_records': 1, 'payload_preview': None}, {'frame': 1275, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 406, 'num_records': 1, 'payload_preview': None}, {'frame': 1283, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [8793], 'zero_bytes': 74, 'num_records': 1, 'payload_preview': None}, {'frame': 1285, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 47, 'num_records': 1, 'payload_preview': None}, {'frame': 1295, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [13173], 'zero_bytes': 86, 'num_records': 1, 'payload_preview': None}, {'frame': 1309, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16093], 'zero_bytes': 137, 'num_records': 1, 'payload_preview': None}, {'frame': 1311, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 38, 'num_records': 1, 'payload_preview': None}, {'frame': 1323, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [14631], 'zero_bytes': 466, 'num_records': 1, 'payload_preview': None}, {'frame': 1339, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [4544], 'zero_bytes': 181, 'num_records': 1, 'payload_preview': None}, {'frame': 1344, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 42, 'num_records': 1, 'payload_preview': None}, {'frame': 1347, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2953], 'zero_bytes': 41, 'num_records': 1, 'payload_preview': None}, {'frame': 1358, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [14633], 'zero_bytes': 95, 'num_records': 1, 'payload_preview': None}, {'frame': 1360, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 42, 'num_records': 1, 'payload_preview': None}, {'frame': 1369, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [11713], 'zero_bytes': 90, 'num_records': 1, 'payload_preview': None}, {'frame': 1371, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 49, 'num_records': 1, 'payload_preview': None}, {'frame': 1381, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [13191], 'zero_bytes': 127, 'num_records': 1, 'payload_preview': None}, {'frame': 1384, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2953], 'zero_bytes': 49, 'num_records': 1, 'payload_preview': None}, {'frame': 1391, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [8793], 'zero_bytes': 70, 'num_records': 1, 'payload_preview': None}, {'frame': 1393, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 46, 'num_records': 1, 'payload_preview': None}, {'frame': 1402, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [8820], 'zero_bytes': 410, 'num_records': 1, 'payload_preview': None}, {'frame': 1404, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 37, 'num_records': 1, 'payload_preview': None}, {'frame': 1418, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 833, 'num_records': 1, 'payload_preview': None}, {'frame': 1435, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 875, 'num_records': 1, 'payload_preview': None}, {'frame': 1446, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [12311], 'zero_bytes': 682, 'num_records': 1, 'payload_preview': None}, {'frame': 1467, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [13173], 'zero_bytes': 92, 'num_records': 1, 'payload_preview': None}, {'frame': 1469, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 47, 'num_records': 1, 'payload_preview': None}, {'frame': 1473, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [4413], 'zero_bytes': 48, 'num_records': 1, 'payload_preview': None}, {'frame': 1485, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 410, 'num_records': 1, 'payload_preview': None}, {'frame': 1491, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [5873], 'zero_bytes': 63, 'num_records': 1, 'payload_preview': None}, {'frame': 1495, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [4422], 'zero_bytes': 71, 'num_records': 1, 'payload_preview': None}, {'frame': 1502, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [8793], 'zero_bytes': 68, 'num_records': 1, 'payload_preview': None}, {'frame': 1516, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 427, 'num_records': 1, 'payload_preview': None}, {'frame': 1521, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [4413], 'zero_bytes': 49, 'num_records': 1, 'payload_preview': None}, {'frame': 1534, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 806, 'num_records': 1, 'payload_preview': None}, {'frame': 1537, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2317], 'zero_bytes': 862, 'num_records': 1, 'payload_preview': None}, {'frame': 1549, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 406, 'num_records': 1, 'payload_preview': None}, {'frame': 1565, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 379, 'num_records': 1, 'payload_preview': None}, {'frame': 1579, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 700, 'num_records': 1, 'payload_preview': None}, {'frame': 1594, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 624, 'num_records': 1, 'payload_preview': None}, {'frame': 1608, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 413, 'num_records': 1, 'payload_preview': None}, {'frame': 1614, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [7036], 'zero_bytes': 1215, 'num_records': 1, 'payload_preview': None}, {'frame': 1625, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [13173], 'zero_bytes': 75, 'num_records': 1, 'payload_preview': None}, {'frame': 1627, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 38, 'num_records': 1, 'payload_preview': None}, {'frame': 1643, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 1475, 'num_records': 1, 'payload_preview': None}, {'frame': 1646, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [882], 'zero_bytes': 298, 'num_records': 1, 'payload_preview': None}, {'frame': 1654, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [10262], 'zero_bytes': 86, 'num_records': 1, 'payload_preview': None}, {'frame': 1666, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 421, 'num_records': 1, 'payload_preview': None}, {'frame': 1668, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2335], 'zero_bytes': 881, 'num_records': 1, 'payload_preview': None}, {'frame': 1682, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 88, 'num_records': 1, 'payload_preview': None}, {'frame': 1699, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 71, 'num_records': 1, 'payload_preview': None}, {'frame': 1714, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 372, 'num_records': 1, 'payload_preview': None}, {'frame': 1727, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 405, 'num_records': 1, 'payload_preview': None}, {'frame': 1742, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 142, 'num_records': 1, 'payload_preview': None}, {'frame': 1756, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 417, 'num_records': 1, 'payload_preview': None}, {'frame': 1769, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 412, 'num_records': 1, 'payload_preview': None}, {'frame': 1782, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 407, 'num_records': 1, 'payload_preview': None}, {'frame': 1796, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 437, 'num_records': 1, 'payload_preview': None}, {'frame': 1810, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 404, 'num_records': 1, 'payload_preview': None}, {'frame': 1824, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 403, 'num_records': 1, 'payload_preview': None}, {'frame': 1838, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 541, 'num_records': 1, 'payload_preview': None}, {'frame': 1880, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1597], 'zero_bytes': 151, 'num_records': 1, 'payload_preview': None}, {'frame': 1894, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [4817], 'zero_bytes': 454, 'num_records': 1, 'payload_preview': None}, {'frame': 1896, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1475], 'zero_bytes': 25, 'num_records': 1, 'payload_preview': None}, {'frame': 1898, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1481], 'zero_bytes': 31, 'num_records': 1, 'payload_preview': None}, {'frame': 1901, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2935], 'zero_bytes': 30, 'num_records': 1, 'payload_preview': None}, {'frame': 1911, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [10081], 'zero_bytes': 1424, 'num_records': 1, 'payload_preview': None}], 'success_frame_details': [{'frame': 12, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 13, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 16, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 17, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 18, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 21, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 33, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 34, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 36, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 37, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 38, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 39, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 41, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 45, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 46, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 48, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 50, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [275], 'zero_bytes': 275, 'num_records': 1, 'protocol_types': None}, {'frame': 63, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 64, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 65, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 66, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 67, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 68, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 70, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 72, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 73, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 75, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 77, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [299], 'zero_bytes': 299, 'num_records': 1, 'protocol_types': None}, {'frame': 90, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 91, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 92, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 93, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 94, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 95, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 96, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [455], 'zero_bytes': 455, 'num_records': 1, 'protocol_types': None}, {'frame': 98, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 102, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 103, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 105, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 107, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [275], 'zero_bytes': 275, 'num_records': 1, 'protocol_types': None}, {'frame': 120, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 121, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 122, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 123, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 124, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 125, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 127, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 130, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 131, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 132, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 135, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 148, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 149, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 150, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 151, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 152, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 153, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 155, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 159, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 160, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 162, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 164, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [839], 'zero_bytes': 839, 'num_records': 1, 'protocol_types': None}, {'frame': 177, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 178, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 179, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 180, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 181, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 182, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 184, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 188, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 189, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 191, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 193, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [275], 'zero_bytes': 275, 'num_records': 1, 'protocol_types': None}, {'frame': 206, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 207, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 208, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 210, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 211, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 212, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 215, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 227, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 229, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 230, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 231, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 232, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 233, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 235, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 239, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 240, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 242, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 244, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [276], 'zero_bytes': 276, 'num_records': 1, 'protocol_types': None}, {'frame': 257, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 258, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 259, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 260, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 261, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 262, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 264, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 268, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 269, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 271, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 273, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [299], 'zero_bytes': 299, 'num_records': 1, 'protocol_types': None}, {'frame': 286, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 287, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 288, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 289, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 290, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 291, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 293, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 295, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 296, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 298, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 300, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 313, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 315, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 316, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 317, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 318, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 319, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 322, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 323, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 324, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 327, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [276], 'zero_bytes': 276, 'num_records': 1, 'protocol_types': None}, {'frame': 340, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 341, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 342, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 343, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [617], 'zero_bytes': 617, 'num_records': 1, 'protocol_types': None}, {'frame': 344, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 345, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 349, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 350, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 352, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 354, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [299], 'zero_bytes': 299, 'num_records': 1, 'protocol_types': None}, {'frame': 367, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 369, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 370, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 372, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 374, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [301], 'zero_bytes': 301, 'num_records': 1, 'protocol_types': None}, {'frame': 386, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 387, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 388, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 389, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 390, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 391, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 393, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 398, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 399, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 401, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 403, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [274], 'zero_bytes': 274, 'num_records': 1, 'protocol_types': None}, {'frame': 416, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 419, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 420, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 422, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 424, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [840], 'zero_bytes': 840, 'num_records': 1, 'protocol_types': None}, {'frame': 436, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 437, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 438, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 439, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 440, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 441, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 443, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 448, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 449, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 450, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 453, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 466, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 467, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 468, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 469, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [617], 'zero_bytes': 617, 'num_records': 1, 'protocol_types': None}, {'frame': 470, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [198], 'zero_bytes': 198, 'num_records': 1, 'protocol_types': None}, {'frame': 471, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 473, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 476, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 477, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 479, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 481, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 494, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 495, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 496, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 497, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 498, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 499, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 501, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 504, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 505, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 507, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 509, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 522, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 523, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 524, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 525, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 526, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 527, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 529, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 533, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 534, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 536, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 538, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [275], 'zero_bytes': 275, 'num_records': 1, 'protocol_types': None}, {'frame': 551, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 552, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 553, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 554, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 555, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 556, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 558, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 561, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 562, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 564, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 566, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 579, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 580, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 581, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 582, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 583, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 584, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 586, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 589, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 590, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 591, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 594, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [299], 'zero_bytes': 299, 'num_records': 1, 'protocol_types': None}, {'frame': 607, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 609, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 610, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 611, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 614, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 626, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 628, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 630, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 631, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 632, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 633, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 635, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 638, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 639, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 641, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 643, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 656, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 657, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 658, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 659, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 660, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 661, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 663, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 667, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 668, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 669, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 672, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 685, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 686, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 687, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 688, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 689, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 690, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 692, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 694, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 695, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 696, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 699, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [816], 'zero_bytes': 816, 'num_records': 1, 'protocol_types': None}, {'frame': 712, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 713, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 714, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 715, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 716, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 717, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 719, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 722, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 723, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 725, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 727, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 740, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 741, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 742, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 743, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 744, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 745, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 747, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 749, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [455], 'zero_bytes': 455, 'num_records': 1, 'protocol_types': None}, {'frame': 751, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 752, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 754, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 756, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [275], 'zero_bytes': 275, 'num_records': 1, 'protocol_types': None}, {'frame': 769, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 770, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 771, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 772, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 773, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 774, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 776, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 780, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 781, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 783, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 785, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 798, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 799, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 800, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 801, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 802, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 803, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 806, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 808, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 809, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 811, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 813, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 826, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 827, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 828, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [32], 'zero_bytes': 32, 'num_records': 1, 'protocol_types': None}, {'frame': 829, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [28], 'zero_bytes': 28, 'num_records': 1, 'protocol_types': None}, {'frame': 847, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [161], 'zero_bytes': 161, 'num_records': 1, 'protocol_types': None}, {'frame': 848, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [139], 'zero_bytes': 139, 'num_records': 1, 'protocol_types': None}, {'frame': 856, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [148], 'zero_bytes': 148, 'num_records': 1, 'protocol_types': None}, {'frame': 858, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [144], 'zero_bytes': 144, 'num_records': 1, 'protocol_types': None}, {'frame': 871, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [172], 'zero_bytes': 172, 'num_records': 1, 'protocol_types': None}, {'frame': 872, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [72], 'zero_bytes': 72, 'num_records': 1, 'protocol_types': None}, {'frame': 873, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [865], 'zero_bytes': 865, 'num_records': 1, 'protocol_types': None}, {'frame': 874, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [177], 'zero_bytes': 177, 'num_records': 1, 'protocol_types': None}, {'frame': 876, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [179], 'zero_bytes': 179, 'num_records': 1, 'protocol_types': None}, {'frame': 878, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [154], 'zero_bytes': 154, 'num_records': 1, 'protocol_types': None}, {'frame': 880, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [33], 'zero_bytes': 33, 'num_records': 1, 'protocol_types': None}, {'frame': 881, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [174], 'zero_bytes': 174, 'num_records': 1, 'protocol_types': None}, {'frame': 883, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [355], 'zero_bytes': 355, 'num_records': 1, 'protocol_types': None}, {'frame': 884, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [113], 'zero_bytes': 113, 'num_records': 1, 'protocol_types': None}, {'frame': 886, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [343], 'zero_bytes': 343, 'num_records': 1, 'protocol_types': None}, {'frame': 888, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [114], 'zero_bytes': 114, 'num_records': 1, 'protocol_types': None}, {'frame': 895, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [376], 'zero_bytes': 376, 'num_records': 1, 'protocol_types': None}, {'frame': 897, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [50], 'zero_bytes': 50, 'num_records': 1, 'protocol_types': None}, {'frame': 898, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [50], 'zero_bytes': 50, 'num_records': 1, 'protocol_types': None}, {'frame': 899, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [114], 'zero_bytes': 114, 'num_records': 1, 'protocol_types': None}, {'frame': 900, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [365], 'zero_bytes': 365, 'num_records': 1, 'protocol_types': None}, {'frame': 903, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [50], 'zero_bytes': 50, 'num_records': 1, 'protocol_types': None}, {'frame': 904, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1212], 'zero_bytes': 1212, 'num_records': 1, 'protocol_types': None}, {'frame': 1143, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1173, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [130], 'zero_bytes': 130, 'num_records': 1, 'protocol_types': None}, {'frame': 1174, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [76], 'zero_bytes': 76, 'num_records': 1, 'protocol_types': None}, {'frame': 1176, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [696], 'zero_bytes': 696, 'num_records': 1, 'protocol_types': None}, {'frame': 1177, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 1178, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [156], 'zero_bytes': 156, 'num_records': 1, 'protocol_types': None}, {'frame': 1181, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [466], 'zero_bytes': 466, 'num_records': 1, 'protocol_types': None}, {'frame': 1193, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 1194, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 1197, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [350], 'zero_bytes': 350, 'num_records': 1, 'protocol_types': None}, {'frame': 1198, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 1199, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 1200, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 1202, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 1203, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [140], 'zero_bytes': 140, 'num_records': 1, 'protocol_types': None}, {'frame': 1204, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [140], 'zero_bytes': 140, 'num_records': 1, 'protocol_types': None}, {'frame': 1207, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [103], 'zero_bytes': 103, 'num_records': 1, 'protocol_types': None}, {'frame': 1208, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [102], 'zero_bytes': 102, 'num_records': 1, 'protocol_types': None}, {'frame': 1211, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [147], 'zero_bytes': 147, 'num_records': 1, 'protocol_types': None}, {'frame': 1212, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [49], 'zero_bytes': 49, 'num_records': 1, 'protocol_types': None}, {'frame': 1214, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [143], 'zero_bytes': 143, 'num_records': 1, 'protocol_types': None}, {'frame': 1216, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [49], 'zero_bytes': 49, 'num_records': 1, 'protocol_types': None}, {'frame': 1217, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 1219, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 1220, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [156], 'zero_bytes': 156, 'num_records': 1, 'protocol_types': None}, {'frame': 1223, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 1224, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [174], 'zero_bytes': 174, 'num_records': 1, 'protocol_types': None}, {'frame': 1225, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [174], 'zero_bytes': 174, 'num_records': 1, 'protocol_types': None}, {'frame': 1228, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [622], 'zero_bytes': 622, 'num_records': 1, 'protocol_types': None}, {'frame': 1238, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [139], 'zero_bytes': 139, 'num_records': 1, 'protocol_types': None}, {'frame': 1239, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [155], 'zero_bytes': 155, 'num_records': 1, 'protocol_types': None}, {'frame': 1326, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [173], 'zero_bytes': 173, 'num_records': 1, 'protocol_types': None}, {'frame': 1327, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [148], 'zero_bytes': 148, 'num_records': 1, 'protocol_types': None}, {'frame': 1329, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [144], 'zero_bytes': 144, 'num_records': 1, 'protocol_types': None}, {'frame': 1331, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [150], 'zero_bytes': 150, 'num_records': 1, 'protocol_types': None}, {'frame': 1332, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [154], 'zero_bytes': 154, 'num_records': 1, 'protocol_types': None}, {'frame': 1341, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [166], 'zero_bytes': 166, 'num_records': 1, 'protocol_types': None}, {'frame': 1419, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1205], 'zero_bytes': 1205, 'num_records': 1, 'protocol_types': None}, {'frame': 1550, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1566, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1580, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1596, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1040], 'zero_bytes': 1040, 'num_records': 1, 'protocol_types': None}, {'frame': 1683, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1700, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1715, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1728, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1013], 'zero_bytes': 1013, 'num_records': 1, 'protocol_types': None}, {'frame': 1744, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1757, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1770, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1783, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1169], 'zero_bytes': 1169, 'num_records': 1, 'protocol_types': None}, {'frame': 1798, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1013], 'zero_bytes': 1013, 'num_records': 1, 'protocol_types': None}, {'frame': 1812, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1825, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1862, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [172], 'zero_bytes': 172, 'num_records': 1, 'protocol_types': None}, {'frame': 1864, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1444], 'zero_bytes': 1444, 'num_records': 1, 'protocol_types': None}, {'frame': 1865, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [289], 'zero_bytes': 289, 'num_records': 1, 'protocol_types': None}, {'frame': 1867, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [33], 'zero_bytes': 33, 'num_records': 1, 'protocol_types': None}, {'frame': 1869, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [124], 'zero_bytes': 124, 'num_records': 1, 'protocol_types': None}, {'frame': 1870, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [504], 'zero_bytes': 504, 'num_records': 1, 'protocol_types': None}, {'frame': 1872, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [121], 'zero_bytes': 121, 'num_records': 1, 'protocol_types': None}, {'frame': 1874, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [480], 'zero_bytes': 480, 'num_records': 1, 'protocol_types': None}, {'frame': 1875, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [121], 'zero_bytes': 121, 'num_records': 1, 'protocol_types': None}, {'frame': 1882, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [549], 'zero_bytes': 549, 'num_records': 1, 'protocol_types': None}, {'frame': 1883, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [66], 'zero_bytes': 66, 'num_records': 1, 'protocol_types': None}, {'frame': 1884, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [65], 'zero_bytes': 65, 'num_records': 1, 'protocol_types': None}, {'frame': 1885, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [121], 'zero_bytes': 121, 'num_records': 1, 'protocol_types': None}, {'frame': 1886, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [428], 'zero_bytes': 428, 'num_records': 1, 'protocol_types': None}, {'frame': 1914, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1439], 'zero_bytes': 1439, 'num_records': 1, 'protocol_types': None}, {'frame': 1915, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [152], 'zero_bytes': 152, 'num_records': 1, 'protocol_types': None}, {'frame': 1916, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [86], 'zero_bytes': 86, 'num_records': 1, 'protocol_types': None}, {'frame': 1918, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [143], 'zero_bytes': 143, 'num_records': 1, 'protocol_types': None}, {'frame': 1920, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 1932, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 1934, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 1935, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [224], 'zero_bytes': 224, 'num_records': 1, 'protocol_types': None}, {'frame': 1936, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 1937, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 1938, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 1940, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 1944, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 1945, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 1946, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [137], 'zero_bytes': 137, 'num_records': 1, 'protocol_types': None}, {'frame': 1949, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [276], 'zero_bytes': 276, 'num_records': 1, 'protocol_types': None}, {'frame': 1962, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 1963, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 1964, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 1965, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 1966, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 1967, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 1969, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 1972, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 1973, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 1975, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [137], 'zero_bytes': 137, 'num_records': 1, 'protocol_types': None}, {'frame': 1977, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [299], 'zero_bytes': 299, 'num_records': 1, 'protocol_types': None}, {'frame': 1990, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 1991, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 1992, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 1993, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 1994, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 1995, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 1997, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 2001, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 2002, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 2003, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [137], 'zero_bytes': 137, 'num_records': 1, 'protocol_types': None}, {'frame': 2006, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 2019, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 2020, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 2021, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 2022, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 2023, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 2024, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 2026, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 2029, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 2030, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 2032, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [137], 'zero_bytes': 137, 'num_records': 1, 'protocol_types': None}, {'frame': 2034, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [275], 'zero_bytes': 275, 'num_records': 1, 'protocol_types': None}, {'frame': 2047, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 2048, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 2049, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 2050, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 2051, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 2052, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 2054, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 2057, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 2058, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 2060, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [137], 'zero_bytes': 137, 'num_records': 1, 'protocol_types': None}, {'frame': 2062, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 2075, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 2076, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 2077, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 2078, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 2079, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 2080, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 2082, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 2084, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 2085, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 2086, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [137], 'zero_bytes': 137, 'num_records': 1, 'protocol_types': None}, {'frame': 2089, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [275], 'zero_bytes': 275, 'num_records': 1, 'protocol_types': None}, {'frame': 2098, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 2099, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 2100, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 2101, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 2106, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [638], 'zero_bytes': 638, 'num_records': 1, 'protocol_types': None}], 'file': 'tls_1_2_single_vlan.pcap', 'maskstage_mode': 'pipeline'}, {'status': 'pass', 'records_before': 1, 'records_after': 1, 'input_tls23_pkts': 1, 'masked_zero_pkts': 1, 'output_tls23_pkts': 1, 'masked_records': 1, 'unmasked_records': 0, 'masked_ok_frames': [10], 'failed_frames': [], 'failed_frame_details': [], 'success_frame_details': [{'frame': 10, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [36], 'zero_bytes': 36, 'num_records': 1, 'protocol_types': None}], 'file': 'tls_1_2-2.pcapng', 'maskstage_mode': 'pipeline'}, {'status': 'pass', 'records_before': 10, 'records_after': 10, 'input_tls23_pkts': 10, 'masked_zero_pkts': 10, 'output_tls23_pkts': 10, 'masked_records': 10, 'unmasked_records': 0, 'masked_ok_frames': [6, 8, 9, 10, 12, 21, 23, 25, 26, 28], 'failed_frames': [], 'failed_frame_details': [], 'success_frame_details': [{'frame': 6, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [23, 675, 153, 69], 'zero_bytes': 920, 'num_records': 4, 'protocol_types': None}, {'frame': 8, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [69], 'zero_bytes': 69, 'num_records': 1, 'protocol_types': None}, {'frame': 9, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [274], 'zero_bytes': 274, 'num_records': 1, 'protocol_types': None}, {'frame': 10, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [274], 'zero_bytes': 274, 'num_records': 1, 'protocol_types': None}, {'frame': 12, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [19], 'zero_bytes': 19, 'num_records': 1, 'protocol_types': None}, {'frame': 21, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [73], 'zero_bytes': 73, 'num_records': 1, 'protocol_types': None}, {'frame': 23, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [27, 69], 'zero_bytes': 96, 'num_records': 2, 'protocol_types': None}, {'frame': 25, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [21, 69], 'zero_bytes': 90, 'num_records': 2, 'protocol_types': None}, {'frame': 26, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [274], 'zero_bytes': 274, 'num_records': 1, 'protocol_types': None}, {'frame': 28, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [19], 'zero_bytes': 19, 'num_records': 1, 'protocol_types': None}], 'file': 'tls_1_3_0-RTT-2_22_23_mix.pcapng', 'maskstage_mode': 'pipeline'}, {'status': 'pass', 'records_before': 4, 'records_after': 4, 'input_tls23_pkts': 4, 'masked_zero_pkts': 4, 'output_tls23_pkts': 4, 'masked_records': 4, 'unmasked_records': 0, 'masked_ok_frames': [17, 19, 29, 31], 'failed_frames': [], 'failed_frame_details': [], 'success_frame_details': [{'frame': 17, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [29], 'zero_bytes': 29, 'num_records': 1, 'protocol_types': None}, {'frame': 19, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [107], 'zero_bytes': 107, 'num_records': 1, 'protocol_types': None}, {'frame': 29, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [29], 'zero_bytes': 29, 'num_records': 1, 'protocol_types': None}, {'frame': 31, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [107], 'zero_bytes': 107, 'num_records': 1, 'protocol_types': None}], 'file': 'tls_1_2_pop_mix.pcapng', 'maskstage_mode': 'pipeline'}]}">tests/integration/test_tls23_maskstage_e2e_integration.py:185: in test_maskstage_validator_output_format
    assert "test_metadata" in summary
E   AssertionError: assert 'test_metadata' in {'overall_pass_rate': 66.67, 'maskstage_mode': 'pipeline', 'files': [{'status': 'pass', 'records_before': 64, 'records_after': 64, 'input_tls23_pkts': 64, 'masked_zero_pkts': 64, 'output_tls23_pkts': 64, 'masked_records': 64, 'unmasked_records': 0, 'masked_ok_frames': [1, 2, 30, 32, 71, 73, 74, 108, 110, 142, 144, 180, 182, 218, 220, 221, 256, 258, 259, 283, 285, 286, 316, 318, 345, 347, 348, 415, 418, 421, 422, 424, 425, 460, 462, 463, 490, 492, 493, 521, 523, 524, 571, 573, 602, 606, 607, 639, 641, 671, 673, 712, 714, 742, 744, 745, 779, 781, 782, 820, 822, 850, 852, 853], 'failed_frames': [], 'failed_frame_details': [], 'success_frame_details': [{'frame': 1, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [308], 'zero_bytes': 308, 'num_records': 1, 'protocol_types': None}, {'frame': 2, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 30, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 32, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [552], 'zero_bytes': 552, 'num_records': 1, 'protocol_types': None}, {'frame': 71, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 73, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [545], 'zero_bytes': 545, 'num_records': 1, 'protocol_types': None}, {'frame': 74, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [31], 'zero_bytes': 31, 'num_records': 1, 'protocol_types': None}, {'frame': 108, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 110, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [552], 'zero_bytes': 552, 'num_records': 1, 'protocol_types': None}, {'frame': 142, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 144, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 180, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 182, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [552], 'zero_bytes': 552, 'num_records': 1, 'protocol_types': None}, {'frame': 218, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 220, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [545], 'zero_bytes': 545, 'num_records': 1, 'protocol_types': None}, {'frame': 221, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [31], 'zero_bytes': 31, 'num_records': 1, 'protocol_types': None}, {'frame': 256, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 258, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [308], 'zero_bytes': 308, 'num_records': 1, 'protocol_types': None}, {'frame': 259, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 283, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 285, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [547], 'zero_bytes': 547, 'num_records': 1, 'protocol_types': None}, {'frame': 286, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [29], 'zero_bytes': 29, 'num_records': 1, 'protocol_types': None}, {'frame': 316, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [786], 'zero_bytes': 786, 'num_records': 1, 'protocol_types': None}, {'frame': 318, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [787], 'zero_bytes': 787, 'num_records': 1, 'protocol_types': None}, {'frame': 345, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [787], 'zero_bytes': 787, 'num_records': 1, 'protocol_types': None}, {'frame': 347, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [770], 'zero_bytes': 770, 'num_records': 1, 'protocol_types': None}, {'frame': 348, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [29], 'zero_bytes': 29, 'num_records': 1, 'protocol_types': None}, {'frame': 415, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 418, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 421, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [547], 'zero_bytes': 547, 'num_records': 1, 'protocol_types': None}, {'frame': 422, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [29], 'zero_bytes': 29, 'num_records': 1, 'protocol_types': None}, {'frame': 424, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [545], 'zero_bytes': 545, 'num_records': 1, 'protocol_types': None}, {'frame': 425, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [31], 'zero_bytes': 31, 'num_records': 1, 'protocol_types': None}, {'frame': 460, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 462, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [308], 'zero_bytes': 308, 'num_records': 1, 'protocol_types': None}, {'frame': 463, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 490, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [787], 'zero_bytes': 787, 'num_records': 1, 'protocol_types': None}, {'frame': 492, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [770], 'zero_bytes': 770, 'num_records': 1, 'protocol_types': None}, {'frame': 493, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [29], 'zero_bytes': 29, 'num_records': 1, 'protocol_types': None}, {'frame': 521, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [782], 'zero_bytes': 782, 'num_records': 1, 'protocol_types': None}, {'frame': 523, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [770], 'zero_bytes': 770, 'num_records': 1, 'protocol_types': None}, {'frame': 524, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [29], 'zero_bytes': 29, 'num_records': 1, 'protocol_types': None}, {'frame': 571, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [791], 'zero_bytes': 791, 'num_records': 1, 'protocol_types': None}, {'frame': 573, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [789], 'zero_bytes': 789, 'num_records': 1, 'protocol_types': None}, {'frame': 602, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [797], 'zero_bytes': 797, 'num_records': 1, 'protocol_types': None}, {'frame': 606, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [307], 'zero_bytes': 307, 'num_records': 1, 'protocol_types': None}, {'frame': 607, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [446], 'zero_bytes': 446, 'num_records': 1, 'protocol_types': None}, {'frame': 639, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [791], 'zero_bytes': 791, 'num_records': 1, 'protocol_types': None}, {'frame': 641, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [785], 'zero_bytes': 785, 'num_records': 1, 'protocol_types': None}, {'frame': 671, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [786], 'zero_bytes': 786, 'num_records': 1, 'protocol_types': None}, {'frame': 673, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [789], 'zero_bytes': 789, 'num_records': 1, 'protocol_types': None}, {'frame': 712, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [786], 'zero_bytes': 786, 'num_records': 1, 'protocol_types': None}, {'frame': 714, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [789], 'zero_bytes': 789, 'num_records': 1, 'protocol_types': None}, {'frame': 742, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 744, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [308], 'zero_bytes': 308, 'num_records': 1, 'protocol_types': None}, {'frame': 745, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 779, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 781, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [545], 'zero_bytes': 545, 'num_records': 1, 'protocol_types': None}, {'frame': 782, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [31], 'zero_bytes': 31, 'num_records': 1, 'protocol_types': None}, {'frame': 820, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 822, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [551], 'zero_bytes': 551, 'num_records': 1, 'protocol_types': None}, {'frame': 850, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [772], 'zero_bytes': 772, 'num_records': 1, 'protocol_types': None}, {'frame': 852, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [308], 'zero_bytes': 308, 'num_records': 1, 'protocol_types': None}, {'frame': 853, 'path': 'eth:ethertype:vlan:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}], 'file': 'tls_1_2_double_vlan.pcap', 'maskstage_mode': 'pipeline'}, {'status': 'fail', 'records_before': 12, 'records_after': 11, 'input_tls23_pkts': 12, 'masked_zero_pkts': 2, 'output_tls23_pkts': 11, 'masked_records': 2, 'unmasked_records': 9, 'masked_ok_frames': [11, 98], 'failed_frames': [25, 34, 43, 52, 61, 70, 79, 88, 97], 'failed_frame_details': [{'frame': 25, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 938, 'num_records': 1, 'payload_preview': None}, {'frame': 34, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 941, 'num_records': 1, 'payload_preview': None}, {'frame': 43, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 947, 'num_records': 1, 'payload_preview': None}, {'frame': 52, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 939, 'num_records': 1, 'payload_preview': None}, {'frame': 61, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 933, 'num_records': 1, 'payload_preview': None}, {'frame': 70, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 947, 'num_records': 1, 'payload_preview': None}, {'frame': 79, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 935, 'num_records': 1, 'payload_preview': None}, {'frame': 88, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 950, 'num_records': 1, 'payload_preview': None}, {'frame': 97, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [8208], 'zero_bytes': 920, 'num_records': 1, 'payload_preview': None}], 'success_frame_details': [{'frame': 11, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [969], 'zero_bytes': 969, 'num_records': 1, 'protocol_types': None}, {'frame': 98, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [863], 'zero_bytes': 863, 'num_records': 1, 'protocol_types': None}], 'file': 'ssl_3.pcapng', 'maskstage_mode': 'pipeline'}, {'status': 'pass', 'records_before': 5, 'records_after': 5, 'input_tls23_pkts': 5, 'masked_zero_pkts': 5, 'output_tls23_pkts': 5, 'masked_records': 5, 'unmasked_records': 0, 'masked_ok_frames': [22, 24, 26, 28, 32], 'failed_frames': [], 'failed_frame_details': [], 'success_frame_details': [{'frame': 22, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [80], 'zero_bytes': 80, 'num_records': 1, 'protocol_types': None}, {'frame': 24, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [352], 'zero_bytes': 352, 'num_records': 1, 'protocol_types': None}, {'frame': 26, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [96], 'zero_bytes': 96, 'num_records': 1, 'protocol_types': None}, {'frame': 28, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [192], 'zero_bytes': 192, 'num_records': 1, 'protocol_types': None}, {'frame': 32, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [272], 'zero_bytes': 272, 'num_records': 1, 'protocol_types': None}], 'file': 'tls_1_2_smtp_mix.pcapng', 'maskstage_mode': 'pipeline'}, {'status': 'pass', 'records_before': 2, 'records_after': 2, 'input_tls23_pkts': 2, 'masked_zero_pkts': 2, 'output_tls23_pkts': 2, 'masked_records': 2, 'unmasked_records': 0, 'masked_ok_frames': [14, 15], 'failed_frames': [], 'failed_frame_details': [], 'success_frame_details': [{'frame': 14, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [169, 26], 'zero_bytes': 195, 'num_records': 2, 'protocol_types': None}, {'frame': 15, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [106], 'zero_bytes': 106, 'num_records': 1, 'protocol_types': None}], 'file': 'tls_1_2_plainip.pcap', 'maskstage_mode': 'pipeline'}, {'status': 'fail', 'records_before': 47, 'records_after': 32, 'input_tls23_pkts': 47, 'masked_zero_pkts': 25, 'output_tls23_pkts': 32, 'masked_records': 25, 'unmasked_records': 7, 'masked_ok_frames': [51, 63, 73, 80, 85, 86, 88, 90, 91, 93, 94, 100, 104, 107, 109, 111, 113, 115, 117, 154, 156, 157, 159, 162, 164], 'failed_frames': [21, 122, 125, 128, 131, 143, 146], 'failed_frame_details': [{'frame': 21, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1543], 'zero_bytes': 118, 'num_records': 1, 'payload_preview': None}, {'frame': 122, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [2068], 'zero_bytes': 649, 'num_records': 1, 'payload_preview': None}, {'frame': 125, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [2068], 'zero_bytes': 650, 'num_records': 1, 'payload_preview': None}, {'frame': 128, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [2068], 'zero_bytes': 647, 'num_records': 1, 'payload_preview': None}, {'frame': 131, 'path': 'eth:ethertype:ip:tcp:tls:tls', 'lengths': [2068], 'zero_bytes': 654, 'num_records': 1, 'payload_preview': None}, {'frame': 143, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [2068], 'zero_bytes': 649, 'num_records': 1, 'payload_preview': None}, {'frame': 146, 'path': 'eth:ethertype:ip:tcp:tls:tls', 'lengths': [2068], 'zero_bytes': 648, 'num_records': 1, 'payload_preview': None}], 'success_frame_details': [{'frame': 51, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [955], 'zero_bytes': 955, 'num_records': 1, 'protocol_types': None}, {'frame': 63, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1096], 'zero_bytes': 1096, 'num_records': 1, 'protocol_types': None}, {'frame': 73, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1391], 'zero_bytes': 1391, 'num_records': 1, 'protocol_types': None}, {'frame': 80, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [235], 'zero_bytes': 235, 'num_records': 1, 'protocol_types': None}, {'frame': 85, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [939], 'zero_bytes': 939, 'num_records': 1, 'protocol_types': None}, {'frame': 86, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [145], 'zero_bytes': 145, 'num_records': 1, 'protocol_types': None}, {'frame': 88, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1019], 'zero_bytes': 1019, 'num_records': 1, 'protocol_types': None}, {'frame': 90, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [313, 224], 'zero_bytes': 537, 'num_records': 2, 'protocol_types': None}, {'frame': 91, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1020], 'zero_bytes': 1020, 'num_records': 1, 'protocol_types': None}, {'frame': 93, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [313, 207], 'zero_bytes': 520, 'num_records': 2, 'protocol_types': None}, {'frame': 94, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1021], 'zero_bytes': 1021, 'num_records': 1, 'protocol_types': None}, {'frame': 100, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [313, 198], 'zero_bytes': 511, 'num_records': 2, 'protocol_types': None}, {'frame': 104, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1022], 'zero_bytes': 1022, 'num_records': 1, 'protocol_types': None}, {'frame': 107, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [313, 186], 'zero_bytes': 499, 'num_records': 2, 'protocol_types': None}, {'frame': 109, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1023], 'zero_bytes': 1023, 'num_records': 1, 'protocol_types': None}, {'frame': 111, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [313, 204], 'zero_bytes': 517, 'num_records': 2, 'protocol_types': None}, {'frame': 113, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1024], 'zero_bytes': 1024, 'num_records': 1, 'protocol_types': None}, {'frame': 115, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [291, 202], 'zero_bytes': 493, 'num_records': 2, 'protocol_types': None}, {'frame': 117, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1312], 'zero_bytes': 1312, 'num_records': 1, 'protocol_types': None}, {'frame': 154, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1059], 'zero_bytes': 1059, 'num_records': 1, 'protocol_types': None}, {'frame': 156, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [235], 'zero_bytes': 235, 'num_records': 1, 'protocol_types': None}, {'frame': 157, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [939], 'zero_bytes': 939, 'num_records': 1, 'protocol_types': None}, {'frame': 159, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [145], 'zero_bytes': 145, 'num_records': 1, 'protocol_types': None}, {'frame': 162, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [1412], 'zero_bytes': 1412, 'num_records': 1, 'protocol_types': None}, {'frame': 164, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [307, 263], 'zero_bytes': 570, 'num_records': 2, 'protocol_types': None}], 'file': 'tls_1_0_multi_segment_google-https.pcap', 'maskstage_mode': 'pipeline'}, {'status': 'fail', 'records_before': 607, 'records_after': 556, 'input_tls23_pkts': 607, 'masked_zero_pkts': 473, 'output_tls23_pkts': 556, 'masked_records': 473, 'unmasked_records': 83, 'masked_ok_frames': [12, 13, 16, 17, 18, 21, 33, 34, 36, 37, 38, 39, 41, 45, 46, 48, 50, 63, 64, 65, 66, 67, 68, 70, 72, 73, 75, 77, 90, 91, 92, 93, 94, 95, 96, 98, 102, 103, 105, 107, 120, 121, 122, 123, 124, 125, 127, 130, 131, 132, 135, 148, 149, 150, 151, 152, 153, 155, 159, 160, 162, 164, 177, 178, 179, 180, 181, 182, 184, 188, 189, 191, 193, 206, 207, 208, 210, 211, 212, 215, 227, 229, 230, 231, 232, 233, 235, 239, 240, 242, 244, 257, 258, 259, 260, 261, 262, 264, 268, 269, 271, 273, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 300, 313, 315, 316, 317, 318, 319, 322, 323, 324, 327, 340, 341, 342, 343, 344, 345, 349, 350, 352, 354, 367, 369, 370, 372, 374, 386, 387, 388, 389, 390, 391, 393, 398, 399, 401, 403, 416, 419, 420, 422, 424, 436, 437, 438, 439, 440, 441, 443, 448, 449, 450, 453, 466, 467, 468, 469, 470, 471, 473, 476, 477, 479, 481, 494, 495, 496, 497, 498, 499, 501, 504, 505, 507, 509, 522, 523, 524, 525, 526, 527, 529, 533, 534, 536, 538, 551, 552, 553, 554, 555, 556, 558, 561, 562, 564, 566, 579, 580, 581, 582, 583, 584, 586, 589, 590, 591, 594, 607, 609, 610, 611, 614, 626, 628, 630, 631, 632, 633, 635, 638, 639, 641, 643, 656, 657, 658, 659, 660, 661, 663, 667, 668, 669, 672, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 699, 712, 713, 714, 715, 716, 717, 719, 722, 723, 725, 727, 740, 741, 742, 743, 744, 745, 747, 749, 751, 752, 754, 756, 769, 770, 771, 772, 773, 774, 776, 780, 781, 783, 785, 798, 799, 800, 801, 802, 803, 806, 808, 809, 811, 813, 826, 827, 828, 829, 847, 848, 856, 858, 871, 872, 873, 874, 876, 878, 880, 881, 883, 884, 886, 888, 895, 897, 898, 899, 900, 903, 904, 1143, 1173, 1174, 1176, 1177, 1178, 1181, 1193, 1194, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1208, 1211, 1212, 1214, 1216, 1217, 1219, 1220, 1223, 1224, 1225, 1228, 1238, 1239, 1326, 1327, 1329, 1331, 1332, 1341, 1419, 1550, 1566, 1580, 1596, 1683, 1700, 1715, 1728, 1744, 1757, 1770, 1783, 1798, 1812, 1825, 1862, 1864, 1865, 1867, 1869, 1870, 1872, 1874, 1875, 1882, 1883, 1884, 1885, 1886, 1914, 1915, 1916, 1918, 1920, 1932, 1934, 1935, 1936, 1937, 1938, 1940, 1944, 1945, 1946, 1949, 1962, 1963, 1964, 1965, 1966, 1967, 1969, 1972, 1973, 1975, 1977, 1990, 1991, 1992, 1993, 1994, 1995, 1997, 2001, 2002, 2003, 2006, 2019, 2020, 2021, 2022, 2023, 2024, 2026, 2029, 2030, 2032, 2034, 2047, 2048, 2049, 2050, 2051, 2052, 2054, 2057, 2058, 2060, 2062, 2075, 2076, 2077, 2078, 2079, 2080, 2082, 2084, 2085, 2086, 2089, 2098, 2099, 2100, 2101, 2106], 'failed_frames': [807, 841, 845, 853, 857, 859, 893, 917, 1157, 1167, 1231, 1234, 1236, 1244, 1247, 1259, 1261, 1263, 1275, 1283, 1285, 1295, 1309, 1311, 1323, 1339, 1344, 1347, 1358, 1360, 1369, 1371, 1381, 1384, 1391, 1393, 1402, 1404, 1418, 1435, 1446, 1467, 1469, 1473, 1485, 1491, 1495, 1502, 1516, 1521, 1534, 1537, 1549, 1565, 1579, 1594, 1608, 1614, 1625, 1627, 1643, 1646, 1654, 1666, 1668, 1682, 1699, 1714, 1727, 1742, 1756, 1769, 1782, 1796, 1810, 1824, 1838, 1880, 1894, 1896, 1898, 1901, 1911], 'failed_frame_details': [{'frame': 807, 'path': 'eth:ethertype:vlan:ethertype:ip:icmp:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 8, 'num_records': 1, 'payload_preview': None}, {'frame': 841, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [8219], 'zero_bytes': 949, 'num_records': 1, 'payload_preview': None}, {'frame': 845, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2768], 'zero_bytes': 1311, 'num_records': 1, 'payload_preview': None}, {'frame': 853, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2196], 'zero_bytes': 739, 'num_records': 1, 'payload_preview': None}, {'frame': 857, 'path': 'eth:ethertype:vlan:ethertype:ip:icmp:ip:tcp:tls', 'lengths': [148], 'zero_bytes': 8, 'num_records': 1, 'payload_preview': None}, {'frame': 859, 'path': 'eth:ethertype:vlan:ethertype:ip:icmp:ip:tcp:tls', 'lengths': [144], 'zero_bytes': 7, 'num_records': 1, 'payload_preview': None}, {'frame': 893, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [4697], 'zero_bytes': 327, 'num_records': 1, 'payload_preview': None}, {'frame': 917, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls:tls', 'lengths': [13173], 'zero_bytes': 1308, 'num_records': 1, 'payload_preview': None}, {'frame': 1157, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 1290, 'num_records': 1, 'payload_preview': None}, {'frame': 1167, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [11416], 'zero_bytes': 1231, 'num_records': 1, 'payload_preview': None}, {'frame': 1231, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 41, 'num_records': 1, 'payload_preview': None}, {'frame': 1234, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2953], 'zero_bytes': 46, 'num_records': 1, 'payload_preview': None}, {'frame': 1236, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2681], 'zero_bytes': 1225, 'num_records': 1, 'payload_preview': None}, {'frame': 1244, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2726], 'zero_bytes': 1272, 'num_records': 1, 'payload_preview': None}, {'frame': 1247, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2172], 'zero_bytes': 719, 'num_records': 1, 'payload_preview': None}, {'frame': 1259, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [13173], 'zero_bytes': 96, 'num_records': 1, 'payload_preview': None}, {'frame': 1261, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 43, 'num_records': 1, 'payload_preview': None}, {'frame': 1263, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 40, 'num_records': 1, 'payload_preview': None}, {'frame': 1275, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 406, 'num_records': 1, 'payload_preview': None}, {'frame': 1283, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [8793], 'zero_bytes': 74, 'num_records': 1, 'payload_preview': None}, {'frame': 1285, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 47, 'num_records': 1, 'payload_preview': None}, {'frame': 1295, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [13173], 'zero_bytes': 86, 'num_records': 1, 'payload_preview': None}, {'frame': 1309, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16093], 'zero_bytes': 137, 'num_records': 1, 'payload_preview': None}, {'frame': 1311, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 38, 'num_records': 1, 'payload_preview': None}, {'frame': 1323, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [14631], 'zero_bytes': 466, 'num_records': 1, 'payload_preview': None}, {'frame': 1339, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [4544], 'zero_bytes': 181, 'num_records': 1, 'payload_preview': None}, {'frame': 1344, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 42, 'num_records': 1, 'payload_preview': None}, {'frame': 1347, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2953], 'zero_bytes': 41, 'num_records': 1, 'payload_preview': None}, {'frame': 1358, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [14633], 'zero_bytes': 95, 'num_records': 1, 'payload_preview': None}, {'frame': 1360, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 42, 'num_records': 1, 'payload_preview': None}, {'frame': 1369, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [11713], 'zero_bytes': 90, 'num_records': 1, 'payload_preview': None}, {'frame': 1371, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 49, 'num_records': 1, 'payload_preview': None}, {'frame': 1381, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [13191], 'zero_bytes': 127, 'num_records': 1, 'payload_preview': None}, {'frame': 1384, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2953], 'zero_bytes': 49, 'num_records': 1, 'payload_preview': None}, {'frame': 1391, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [8793], 'zero_bytes': 70, 'num_records': 1, 'payload_preview': None}, {'frame': 1393, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 46, 'num_records': 1, 'payload_preview': None}, {'frame': 1402, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [8820], 'zero_bytes': 410, 'num_records': 1, 'payload_preview': None}, {'frame': 1404, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 37, 'num_records': 1, 'payload_preview': None}, {'frame': 1418, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 833, 'num_records': 1, 'payload_preview': None}, {'frame': 1435, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 875, 'num_records': 1, 'payload_preview': None}, {'frame': 1446, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [12311], 'zero_bytes': 682, 'num_records': 1, 'payload_preview': None}, {'frame': 1467, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [13173], 'zero_bytes': 92, 'num_records': 1, 'payload_preview': None}, {'frame': 1469, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 47, 'num_records': 1, 'payload_preview': None}, {'frame': 1473, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [4413], 'zero_bytes': 48, 'num_records': 1, 'payload_preview': None}, {'frame': 1485, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 410, 'num_records': 1, 'payload_preview': None}, {'frame': 1491, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [5873], 'zero_bytes': 63, 'num_records': 1, 'payload_preview': None}, {'frame': 1495, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [4422], 'zero_bytes': 71, 'num_records': 1, 'payload_preview': None}, {'frame': 1502, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [8793], 'zero_bytes': 68, 'num_records': 1, 'payload_preview': None}, {'frame': 1516, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 427, 'num_records': 1, 'payload_preview': None}, {'frame': 1521, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [4413], 'zero_bytes': 49, 'num_records': 1, 'payload_preview': None}, {'frame': 1534, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 806, 'num_records': 1, 'payload_preview': None}, {'frame': 1537, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2317], 'zero_bytes': 862, 'num_records': 1, 'payload_preview': None}, {'frame': 1549, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 406, 'num_records': 1, 'payload_preview': None}, {'frame': 1565, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 379, 'num_records': 1, 'payload_preview': None}, {'frame': 1579, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 700, 'num_records': 1, 'payload_preview': None}, {'frame': 1594, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 624, 'num_records': 1, 'payload_preview': None}, {'frame': 1608, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 413, 'num_records': 1, 'payload_preview': None}, {'frame': 1614, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [7036], 'zero_bytes': 1215, 'num_records': 1, 'payload_preview': None}, {'frame': 1625, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [13173], 'zero_bytes': 75, 'num_records': 1, 'payload_preview': None}, {'frame': 1627, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1493], 'zero_bytes': 38, 'num_records': 1, 'payload_preview': None}, {'frame': 1643, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 1475, 'num_records': 1, 'payload_preview': None}, {'frame': 1646, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [882], 'zero_bytes': 298, 'num_records': 1, 'payload_preview': None}, {'frame': 1654, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [10262], 'zero_bytes': 86, 'num_records': 1, 'payload_preview': None}, {'frame': 1666, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 421, 'num_records': 1, 'payload_preview': None}, {'frame': 1668, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2335], 'zero_bytes': 881, 'num_records': 1, 'payload_preview': None}, {'frame': 1682, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 88, 'num_records': 1, 'payload_preview': None}, {'frame': 1699, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 71, 'num_records': 1, 'payload_preview': None}, {'frame': 1714, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 372, 'num_records': 1, 'payload_preview': None}, {'frame': 1727, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 405, 'num_records': 1, 'payload_preview': None}, {'frame': 1742, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 142, 'num_records': 1, 'payload_preview': None}, {'frame': 1756, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 417, 'num_records': 1, 'payload_preview': None}, {'frame': 1769, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 412, 'num_records': 1, 'payload_preview': None}, {'frame': 1782, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 407, 'num_records': 1, 'payload_preview': None}, {'frame': 1796, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 437, 'num_records': 1, 'payload_preview': None}, {'frame': 1810, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 404, 'num_records': 1, 'payload_preview': None}, {'frame': 1824, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 403, 'num_records': 1, 'payload_preview': None}, {'frame': 1838, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [16408], 'zero_bytes': 541, 'num_records': 1, 'payload_preview': None}, {'frame': 1880, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1597], 'zero_bytes': 151, 'num_records': 1, 'payload_preview': None}, {'frame': 1894, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [4817], 'zero_bytes': 454, 'num_records': 1, 'payload_preview': None}, {'frame': 1896, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1475], 'zero_bytes': 25, 'num_records': 1, 'payload_preview': None}, {'frame': 1898, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1481], 'zero_bytes': 31, 'num_records': 1, 'payload_preview': None}, {'frame': 1901, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [2935], 'zero_bytes': 30, 'num_records': 1, 'payload_preview': None}, {'frame': 1911, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [10081], 'zero_bytes': 1424, 'num_records': 1, 'payload_preview': None}], 'success_frame_details': [{'frame': 12, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 13, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 16, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 17, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 18, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 21, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 33, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 34, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 36, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 37, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 38, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 39, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 41, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 45, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 46, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 48, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 50, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [275], 'zero_bytes': 275, 'num_records': 1, 'protocol_types': None}, {'frame': 63, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 64, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 65, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 66, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 67, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 68, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 70, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 72, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 73, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 75, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 77, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [299], 'zero_bytes': 299, 'num_records': 1, 'protocol_types': None}, {'frame': 90, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 91, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 92, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 93, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 94, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 95, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 96, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [455], 'zero_bytes': 455, 'num_records': 1, 'protocol_types': None}, {'frame': 98, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 102, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 103, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 105, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 107, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [275], 'zero_bytes': 275, 'num_records': 1, 'protocol_types': None}, {'frame': 120, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 121, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 122, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 123, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 124, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 125, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 127, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 130, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 131, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 132, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 135, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 148, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 149, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 150, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 151, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 152, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 153, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 155, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 159, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 160, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 162, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 164, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [839], 'zero_bytes': 839, 'num_records': 1, 'protocol_types': None}, {'frame': 177, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 178, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 179, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 180, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 181, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 182, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 184, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 188, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 189, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 191, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 193, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [275], 'zero_bytes': 275, 'num_records': 1, 'protocol_types': None}, {'frame': 206, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 207, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 208, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 210, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 211, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 212, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 215, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 227, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 229, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 230, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 231, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 232, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 233, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 235, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 239, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 240, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 242, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 244, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [276], 'zero_bytes': 276, 'num_records': 1, 'protocol_types': None}, {'frame': 257, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 258, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 259, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 260, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 261, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 262, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 264, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 268, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 269, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 271, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 273, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [299], 'zero_bytes': 299, 'num_records': 1, 'protocol_types': None}, {'frame': 286, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 287, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 288, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 289, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 290, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 291, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 293, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 295, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 296, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 298, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 300, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 313, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 315, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 316, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 317, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 318, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 319, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 322, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 323, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 324, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 327, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [276], 'zero_bytes': 276, 'num_records': 1, 'protocol_types': None}, {'frame': 340, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 341, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 342, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 343, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [617], 'zero_bytes': 617, 'num_records': 1, 'protocol_types': None}, {'frame': 344, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 345, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 349, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 350, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 352, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 354, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [299], 'zero_bytes': 299, 'num_records': 1, 'protocol_types': None}, {'frame': 367, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 369, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 370, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 372, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 374, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [301], 'zero_bytes': 301, 'num_records': 1, 'protocol_types': None}, {'frame': 386, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 387, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 388, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 389, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 390, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 391, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 393, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 398, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 399, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 401, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 403, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [274], 'zero_bytes': 274, 'num_records': 1, 'protocol_types': None}, {'frame': 416, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 419, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 420, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 422, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 424, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [840], 'zero_bytes': 840, 'num_records': 1, 'protocol_types': None}, {'frame': 436, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 437, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 438, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 439, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 440, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 441, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 443, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 448, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 449, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 450, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 453, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 466, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 467, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 468, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 469, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [617], 'zero_bytes': 617, 'num_records': 1, 'protocol_types': None}, {'frame': 470, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [198], 'zero_bytes': 198, 'num_records': 1, 'protocol_types': None}, {'frame': 471, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 473, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 476, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 477, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 479, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 481, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 494, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 495, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 496, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 497, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 498, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 499, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 501, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 504, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 505, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 507, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 509, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 522, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 523, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 524, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 525, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 526, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 527, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 529, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 533, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 534, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 536, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 538, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [275], 'zero_bytes': 275, 'num_records': 1, 'protocol_types': None}, {'frame': 551, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 552, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 553, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 554, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 555, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 556, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 558, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 561, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 562, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 564, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 566, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 579, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 580, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 581, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 582, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 583, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 584, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 586, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 589, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 590, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 591, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 594, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [299], 'zero_bytes': 299, 'num_records': 1, 'protocol_types': None}, {'frame': 607, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 609, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 610, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 611, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 614, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 626, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 628, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 630, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 631, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 632, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 633, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 635, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 638, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 639, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 641, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 643, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 656, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 657, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 658, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 659, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 660, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 661, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 663, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 667, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 668, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 669, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 672, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 685, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 686, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 687, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 688, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 689, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 690, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 692, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 694, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 695, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 696, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 699, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [816], 'zero_bytes': 816, 'num_records': 1, 'protocol_types': None}, {'frame': 712, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 713, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 714, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 715, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 716, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 717, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 719, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 722, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 723, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 725, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 727, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 740, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 741, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 742, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 743, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 744, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 745, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 747, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 749, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [455], 'zero_bytes': 455, 'num_records': 1, 'protocol_types': None}, {'frame': 751, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 752, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 754, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 756, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [275], 'zero_bytes': 275, 'num_records': 1, 'protocol_types': None}, {'frame': 769, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 770, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 771, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 772, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 773, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 774, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 776, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 780, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 781, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 783, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 785, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 798, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 799, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 800, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 801, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 802, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 803, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 806, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 808, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 809, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 811, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [135], 'zero_bytes': 135, 'num_records': 1, 'protocol_types': None}, {'frame': 813, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 826, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 827, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 828, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [32], 'zero_bytes': 32, 'num_records': 1, 'protocol_types': None}, {'frame': 829, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [28], 'zero_bytes': 28, 'num_records': 1, 'protocol_types': None}, {'frame': 847, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [161], 'zero_bytes': 161, 'num_records': 1, 'protocol_types': None}, {'frame': 848, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [139], 'zero_bytes': 139, 'num_records': 1, 'protocol_types': None}, {'frame': 856, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [148], 'zero_bytes': 148, 'num_records': 1, 'protocol_types': None}, {'frame': 858, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [144], 'zero_bytes': 144, 'num_records': 1, 'protocol_types': None}, {'frame': 871, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [172], 'zero_bytes': 172, 'num_records': 1, 'protocol_types': None}, {'frame': 872, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [72], 'zero_bytes': 72, 'num_records': 1, 'protocol_types': None}, {'frame': 873, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [865], 'zero_bytes': 865, 'num_records': 1, 'protocol_types': None}, {'frame': 874, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [177], 'zero_bytes': 177, 'num_records': 1, 'protocol_types': None}, {'frame': 876, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [179], 'zero_bytes': 179, 'num_records': 1, 'protocol_types': None}, {'frame': 878, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [154], 'zero_bytes': 154, 'num_records': 1, 'protocol_types': None}, {'frame': 880, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [33], 'zero_bytes': 33, 'num_records': 1, 'protocol_types': None}, {'frame': 881, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [174], 'zero_bytes': 174, 'num_records': 1, 'protocol_types': None}, {'frame': 883, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [355], 'zero_bytes': 355, 'num_records': 1, 'protocol_types': None}, {'frame': 884, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [113], 'zero_bytes': 113, 'num_records': 1, 'protocol_types': None}, {'frame': 886, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [343], 'zero_bytes': 343, 'num_records': 1, 'protocol_types': None}, {'frame': 888, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [114], 'zero_bytes': 114, 'num_records': 1, 'protocol_types': None}, {'frame': 895, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [376], 'zero_bytes': 376, 'num_records': 1, 'protocol_types': None}, {'frame': 897, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [50], 'zero_bytes': 50, 'num_records': 1, 'protocol_types': None}, {'frame': 898, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [50], 'zero_bytes': 50, 'num_records': 1, 'protocol_types': None}, {'frame': 899, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [114], 'zero_bytes': 114, 'num_records': 1, 'protocol_types': None}, {'frame': 900, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [365], 'zero_bytes': 365, 'num_records': 1, 'protocol_types': None}, {'frame': 903, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [50], 'zero_bytes': 50, 'num_records': 1, 'protocol_types': None}, {'frame': 904, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1212], 'zero_bytes': 1212, 'num_records': 1, 'protocol_types': None}, {'frame': 1143, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1173, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [130], 'zero_bytes': 130, 'num_records': 1, 'protocol_types': None}, {'frame': 1174, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [76], 'zero_bytes': 76, 'num_records': 1, 'protocol_types': None}, {'frame': 1176, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [696], 'zero_bytes': 696, 'num_records': 1, 'protocol_types': None}, {'frame': 1177, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 1178, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [156], 'zero_bytes': 156, 'num_records': 1, 'protocol_types': None}, {'frame': 1181, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [466], 'zero_bytes': 466, 'num_records': 1, 'protocol_types': None}, {'frame': 1193, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 1194, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 1197, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [350], 'zero_bytes': 350, 'num_records': 1, 'protocol_types': None}, {'frame': 1198, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 1199, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 1200, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 1202, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 1203, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [140], 'zero_bytes': 140, 'num_records': 1, 'protocol_types': None}, {'frame': 1204, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [140], 'zero_bytes': 140, 'num_records': 1, 'protocol_types': None}, {'frame': 1207, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [103], 'zero_bytes': 103, 'num_records': 1, 'protocol_types': None}, {'frame': 1208, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [102], 'zero_bytes': 102, 'num_records': 1, 'protocol_types': None}, {'frame': 1211, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [147], 'zero_bytes': 147, 'num_records': 1, 'protocol_types': None}, {'frame': 1212, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [49], 'zero_bytes': 49, 'num_records': 1, 'protocol_types': None}, {'frame': 1214, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [143], 'zero_bytes': 143, 'num_records': 1, 'protocol_types': None}, {'frame': 1216, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [49], 'zero_bytes': 49, 'num_records': 1, 'protocol_types': None}, {'frame': 1217, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 1219, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 1220, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [156], 'zero_bytes': 156, 'num_records': 1, 'protocol_types': None}, {'frame': 1223, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 1224, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [174], 'zero_bytes': 174, 'num_records': 1, 'protocol_types': None}, {'frame': 1225, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [174], 'zero_bytes': 174, 'num_records': 1, 'protocol_types': None}, {'frame': 1228, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [622], 'zero_bytes': 622, 'num_records': 1, 'protocol_types': None}, {'frame': 1238, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [139], 'zero_bytes': 139, 'num_records': 1, 'protocol_types': None}, {'frame': 1239, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [155], 'zero_bytes': 155, 'num_records': 1, 'protocol_types': None}, {'frame': 1326, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [173], 'zero_bytes': 173, 'num_records': 1, 'protocol_types': None}, {'frame': 1327, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [148], 'zero_bytes': 148, 'num_records': 1, 'protocol_types': None}, {'frame': 1329, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [144], 'zero_bytes': 144, 'num_records': 1, 'protocol_types': None}, {'frame': 1331, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [150], 'zero_bytes': 150, 'num_records': 1, 'protocol_types': None}, {'frame': 1332, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [154], 'zero_bytes': 154, 'num_records': 1, 'protocol_types': None}, {'frame': 1341, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [166], 'zero_bytes': 166, 'num_records': 1, 'protocol_types': None}, {'frame': 1419, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1205], 'zero_bytes': 1205, 'num_records': 1, 'protocol_types': None}, {'frame': 1550, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1566, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1580, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1596, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1040], 'zero_bytes': 1040, 'num_records': 1, 'protocol_types': None}, {'frame': 1683, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1700, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1715, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1728, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1013], 'zero_bytes': 1013, 'num_records': 1, 'protocol_types': None}, {'frame': 1744, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1757, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1770, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1783, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1169], 'zero_bytes': 1169, 'num_records': 1, 'protocol_types': None}, {'frame': 1798, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1013], 'zero_bytes': 1013, 'num_records': 1, 'protocol_types': None}, {'frame': 1812, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1825, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1178], 'zero_bytes': 1178, 'num_records': 1, 'protocol_types': None}, {'frame': 1862, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [172], 'zero_bytes': 172, 'num_records': 1, 'protocol_types': None}, {'frame': 1864, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1444], 'zero_bytes': 1444, 'num_records': 1, 'protocol_types': None}, {'frame': 1865, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [289], 'zero_bytes': 289, 'num_records': 1, 'protocol_types': None}, {'frame': 1867, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [33], 'zero_bytes': 33, 'num_records': 1, 'protocol_types': None}, {'frame': 1869, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [124], 'zero_bytes': 124, 'num_records': 1, 'protocol_types': None}, {'frame': 1870, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [504], 'zero_bytes': 504, 'num_records': 1, 'protocol_types': None}, {'frame': 1872, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [121], 'zero_bytes': 121, 'num_records': 1, 'protocol_types': None}, {'frame': 1874, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [480], 'zero_bytes': 480, 'num_records': 1, 'protocol_types': None}, {'frame': 1875, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [121], 'zero_bytes': 121, 'num_records': 1, 'protocol_types': None}, {'frame': 1882, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [549], 'zero_bytes': 549, 'num_records': 1, 'protocol_types': None}, {'frame': 1883, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [66], 'zero_bytes': 66, 'num_records': 1, 'protocol_types': None}, {'frame': 1884, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [65], 'zero_bytes': 65, 'num_records': 1, 'protocol_types': None}, {'frame': 1885, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [121], 'zero_bytes': 121, 'num_records': 1, 'protocol_types': None}, {'frame': 1886, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [428], 'zero_bytes': 428, 'num_records': 1, 'protocol_types': None}, {'frame': 1914, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1439], 'zero_bytes': 1439, 'num_records': 1, 'protocol_types': None}, {'frame': 1915, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [152], 'zero_bytes': 152, 'num_records': 1, 'protocol_types': None}, {'frame': 1916, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [86], 'zero_bytes': 86, 'num_records': 1, 'protocol_types': None}, {'frame': 1918, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [143], 'zero_bytes': 143, 'num_records': 1, 'protocol_types': None}, {'frame': 1920, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 1932, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 1934, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 1935, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [224], 'zero_bytes': 224, 'num_records': 1, 'protocol_types': None}, {'frame': 1936, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 1937, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 1938, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 1940, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 1944, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 1945, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 1946, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [137], 'zero_bytes': 137, 'num_records': 1, 'protocol_types': None}, {'frame': 1949, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [276], 'zero_bytes': 276, 'num_records': 1, 'protocol_types': None}, {'frame': 1962, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 1963, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 1964, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 1965, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 1966, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 1967, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 1969, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 1972, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 1973, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 1975, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [137], 'zero_bytes': 137, 'num_records': 1, 'protocol_types': None}, {'frame': 1977, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [299], 'zero_bytes': 299, 'num_records': 1, 'protocol_types': None}, {'frame': 1990, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 1991, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 1992, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 1993, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 1994, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 1995, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 1997, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 2001, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 2002, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 2003, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [137], 'zero_bytes': 137, 'num_records': 1, 'protocol_types': None}, {'frame': 2006, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 2019, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 2020, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 2021, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 2022, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 2023, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 2024, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [915], 'zero_bytes': 915, 'num_records': 1, 'protocol_types': None}, {'frame': 2026, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 2029, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 2030, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 2032, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [137], 'zero_bytes': 137, 'num_records': 1, 'protocol_types': None}, {'frame': 2034, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [275], 'zero_bytes': 275, 'num_records': 1, 'protocol_types': None}, {'frame': 2047, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 2048, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 2049, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 2050, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 2051, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 2052, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 2054, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 2057, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 2058, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 2060, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [137], 'zero_bytes': 137, 'num_records': 1, 'protocol_types': None}, {'frame': 2062, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [300], 'zero_bytes': 300, 'num_records': 1, 'protocol_types': None}, {'frame': 2075, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [1367], 'zero_bytes': 1367, 'num_records': 1, 'protocol_types': None}, {'frame': 2076, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 2077, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [292], 'zero_bytes': 292, 'num_records': 1, 'protocol_types': None}, {'frame': 2078, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 2079, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 2080, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [870], 'zero_bytes': 870, 'num_records': 1, 'protocol_types': None}, {'frame': 2082, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [122], 'zero_bytes': 122, 'num_records': 1, 'protocol_types': None}, {'frame': 2084, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [142], 'zero_bytes': 142, 'num_records': 1, 'protocol_types': None}, {'frame': 2085, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [92], 'zero_bytes': 92, 'num_records': 1, 'protocol_types': None}, {'frame': 2086, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [137], 'zero_bytes': 137, 'num_records': 1, 'protocol_types': None}, {'frame': 2089, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [275], 'zero_bytes': 275, 'num_records': 1, 'protocol_types': None}, {'frame': 2098, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [930], 'zero_bytes': 930, 'num_records': 1, 'protocol_types': None}, {'frame': 2099, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [373], 'zero_bytes': 373, 'num_records': 1, 'protocol_types': None}, {'frame': 2100, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [268], 'zero_bytes': 268, 'num_records': 1, 'protocol_types': None}, {'frame': 2101, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [439], 'zero_bytes': 439, 'num_records': 1, 'protocol_types': None}, {'frame': 2106, 'path': 'eth:ethertype:vlan:ethertype:ip:tcp:tls', 'lengths': [638], 'zero_bytes': 638, 'num_records': 1, 'protocol_types': None}], 'file': 'tls_1_2_single_vlan.pcap', 'maskstage_mode': 'pipeline'}, {'status': 'pass', 'records_before': 1, 'records_after': 1, 'input_tls23_pkts': 1, 'masked_zero_pkts': 1, 'output_tls23_pkts': 1, 'masked_records': 1, 'unmasked_records': 0, 'masked_ok_frames': [10], 'failed_frames': [], 'failed_frame_details': [], 'success_frame_details': [{'frame': 10, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [36], 'zero_bytes': 36, 'num_records': 1, 'protocol_types': None}], 'file': 'tls_1_2-2.pcapng', 'maskstage_mode': 'pipeline'}, {'status': 'pass', 'records_before': 10, 'records_after': 10, 'input_tls23_pkts': 10, 'masked_zero_pkts': 10, 'output_tls23_pkts': 10, 'masked_records': 10, 'unmasked_records': 0, 'masked_ok_frames': [6, 8, 9, 10, 12, 21, 23, 25, 26, 28], 'failed_frames': [], 'failed_frame_details': [], 'success_frame_details': [{'frame': 6, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [23, 675, 153, 69], 'zero_bytes': 920, 'num_records': 4, 'protocol_types': None}, {'frame': 8, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [69], 'zero_bytes': 69, 'num_records': 1, 'protocol_types': None}, {'frame': 9, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [274], 'zero_bytes': 274, 'num_records': 1, 'protocol_types': None}, {'frame': 10, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [274], 'zero_bytes': 274, 'num_records': 1, 'protocol_types': None}, {'frame': 12, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [19], 'zero_bytes': 19, 'num_records': 1, 'protocol_types': None}, {'frame': 21, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [73], 'zero_bytes': 73, 'num_records': 1, 'protocol_types': None}, {'frame': 23, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [27, 69], 'zero_bytes': 96, 'num_records': 2, 'protocol_types': None}, {'frame': 25, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [21, 69], 'zero_bytes': 90, 'num_records': 2, 'protocol_types': None}, {'frame': 26, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [274], 'zero_bytes': 274, 'num_records': 1, 'protocol_types': None}, {'frame': 28, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [19], 'zero_bytes': 19, 'num_records': 1, 'protocol_types': None}], 'file': 'tls_1_3_0-RTT-2_22_23_mix.pcapng', 'maskstage_mode': 'pipeline'}, {'status': 'pass', 'records_before': 4, 'records_after': 4, 'input_tls23_pkts': 4, 'masked_zero_pkts': 4, 'output_tls23_pkts': 4, 'masked_records': 4, 'unmasked_records': 0, 'masked_ok_frames': [17, 19, 29, 31], 'failed_frames': [], 'failed_frame_details': [], 'success_frame_details': [{'frame': 17, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [29], 'zero_bytes': 29, 'num_records': 1, 'protocol_types': None}, {'frame': 19, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [107], 'zero_bytes': 107, 'num_records': 1, 'protocol_types': None}, {'frame': 29, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [29], 'zero_bytes': 29, 'num_records': 1, 'protocol_types': None}, {'frame': 31, 'path': 'eth:ethertype:ip:tcp:tls', 'lengths': [107], 'zero_bytes': 107, 'num_records': 1, 'protocol_types': None}], 'file': 'tls_1_2_pop_mix.pcapng', 'maskstage_mode': 'pipeline'}]}</failure></testcase><testcase classname="tests.performance.test_enhanced_mask_stage_performance.TestEnhancedMaskStagePerformance" name="test_initialization_performance" time="0.000"><skipped type="pytest.skip" message="性能测试默认跳过，使用 -m performance 运行">/Users/ricky/Downloads/PktMask/tests/conftest.py:207: 性能测试默认跳过，使用 -m performance 运行</skipped></testcase><testcase classname="tests.performance.test_enhanced_mask_stage_performance.TestEnhancedMaskStagePerformance" name="test_enhanced_mode_vs_basic_mode_performance" time="0.001"><skipped type="pytest.skip" message="性能测试默认跳过，使用 -m performance 运行">/Users/ricky/Downloads/PktMask/tests/conftest.py:207: 性能测试默认跳过，使用 -m performance 运行</skipped></testcase><testcase classname="tests.performance.test_enhanced_mask_stage_performance.TestEnhancedMaskStagePerformance" name="test_memory_usage_simulation" time="0.000"><skipped type="pytest.skip" message="性能测试默认跳过，使用 -m performance 运行">/Users/ricky/Downloads/PktMask/tests/conftest.py:207: 性能测试默认跳过，使用 -m performance 运行</skipped></testcase><testcase classname="tests.performance.test_enhanced_mask_stage_performance.TestEnhancedMaskStagePerformance" name="test_concurrent_processing_simulation" time="0.000"><skipped type="pytest.skip" message="性能测试默认跳过，使用 -m performance 运行">/Users/ricky/Downloads/PktMask/tests/conftest.py:207: 性能测试默认跳过，使用 -m performance 运行</skipped></testcase><testcase classname="tests.performance.test_enhanced_mask_stage_performance.TestEnhancedMaskStagePerformance" name="test_large_file_processing_simulation" time="0.000"><skipped type="pytest.skip" message="性能测试默认跳过，使用 -m performance 运行">/Users/ricky/Downloads/PktMask/tests/conftest.py:207: 性能测试默认跳过，使用 -m performance 运行</skipped></testcase><testcase classname="tests.performance.test_enhanced_mask_stage_performance.TestEnhancedMaskStagePerformance" name="test_error_recovery_performance" time="0.000"><skipped type="pytest.skip" message="性能测试默认跳过，使用 -m performance 运行">/Users/ricky/Downloads/PktMask/tests/conftest.py:207: 性能测试默认跳过，使用 -m performance 运行</skipped></testcase><testcase classname="tests.unit.test_config.TestAppConfig" name="test_default_initialization" time="0.002" /><testcase classname="tests.unit.test_config.TestAppConfig" name="test_config_attributes" time="0.001" /><testcase classname="tests.unit.test_config.TestAppConfig" name="test_config_can_be_modified" time="0.000" /><testcase classname="tests.unit.test_config.TestAppConfig" name="test_config_validation" time="0.001" /><testcase classname="tests.unit.test_config.TestUISettings" name="test_ui_defaults" time="0.000" /><testcase classname="tests.unit.test_config.TestUISettings" name="test_ui_modifications" time="0.000" /><testcase classname="tests.unit.test_config.TestProcessingSettings" name="test_processing_defaults" time="0.001" /><testcase classname="tests.unit.test_config.TestProcessingSettings" name="test_processing_modifications" time="0.002" /></testsuite></testsuites>